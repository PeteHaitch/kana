{"version":3,"file":"static/js/534.0569fe6b.chunk.js","mappings":"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","sources":["../node_modules/jszip/dist/jszip.min.js","../node_modules/papaparse/papaparse.min.js","../node_modules/randomcolor/randomColor.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticAccess.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticFieldDescriptor.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecGet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecSet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/utils/general.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/abstract/file.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/utils/abstract/stream.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/utils/extract.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/ArtifactDB-abstract.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/ArtifactDB-zipped.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/inputs.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/rna_quality_control.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/adt_quality_control.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/crispr_quality_control.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/cell_filtering.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/utils/normalization.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/rna_normalization.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/adt_normalization.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/crispr_normalization.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/feature_selection.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/rna_pca.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/adt_pca.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/crispr_pca.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/combine_embeddings.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/batch_correction.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/neighbor_index.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/snn_graph_cluster.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/utils/markers.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/kmeans_cluster.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/choose_clustering.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/marker_detection.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/cell_labelling.js","../node_modules/bakana-remotes/node_modules/bakana/browser/dump/DataFrame.js","../node_modules/bakana-remotes/src/utils.js","../node_modules/bakana-remotes/src/ExperimentHub.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/artifactdb/src/HttpError.js","../node_modules/bakana/browser/readers/10x.js","../node_modules/bakana/browser/readers/ArtifactDB-abstract.js","../node_modules/bakana/browser/readers/abstract/file.js","../node_modules/bakana/browser/readers/mtx.js","../node_modules/bakana/browser/readers/utils/abstract/stream.js","../node_modules/bakana/browser/readers/utils/extract.js","../node_modules/bakana/browser/readers/utils/features.js","../node_modules/bakana/browser/steps/abstract/worker_parent.js","../node_modules/bakana/browser/steps/adt_normalization.js","../node_modules/bakana/browser/steps/adt_pca.js","../node_modules/bakana/browser/steps/adt_quality_control.js","../node_modules/bakana/browser/steps/batch_correction.js","../node_modules/bakana/browser/steps/cell_filtering.js","../node_modules/bakana/browser/steps/cell_labelling.js","../node_modules/bakana/browser/steps/choose_clustering.js","../node_modules/bakana/browser/steps/combine_embeddings.js","../node_modules/bakana/browser/steps/crispr_normalization.js","../node_modules/bakana/browser/steps/crispr_pca.js","../node_modules/bakana/browser/steps/crispr_quality_control.js","../node_modules/bakana/browser/steps/feature_selection.js","../node_modules/bakana/browser/steps/kmeans_cluster.js","../node_modules/bakana/browser/steps/marker_detection.js","../node_modules/bakana/browser/steps/neighbor_index.js","../node_modules/bakana/browser/steps/rna_normalization.js","../node_modules/bakana/browser/steps/rna_pca.js","../node_modules/bakana/browser/steps/rna_quality_control.js","../node_modules/bakana/browser/steps/snn_graph_cluster.js","../node_modules/bakana/browser/steps/tsne.js","../node_modules/bakana/browser/steps/umap.js","../node_modules/bakana/browser/steps/utils/abstract/workers_parent.js","../node_modules/bakana/browser/steps/utils/general.js","../node_modules/bakana/browser/steps/utils/markers.js","../node_modules/bakana/browser/steps/utils/normalization.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/bioconductor/src/utils.js","../node_modules/bioconductor/src/miscellaneous.js","../node_modules/bioconductor/src/AllGenerics.js","../node_modules/bioconductor/src/clone-utils.js","../node_modules/bioconductor/src/Annotated.js","../node_modules/bioconductor/src/InternalList.js","../node_modules/bioconductor/src/DataFrame.js","../node_modules/bioconductor/src/Vector.js","../node_modules/bioconductor/src/overlap-utils.js","../node_modules/bioconductor/src/IRanges.js","../node_modules/bioconductor/src/GRanges.js","../node_modules/bioconductor/src/GroupedGRanges.js","../node_modules/bioconductor/src/DenseMatrix.js","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/bioconductor/src/SummarizedExperiment.js","../node_modules/bioconductor/src/RangedSummarizedExperiment.js","../node_modules/bioconductor/src/SingleCellExperiment.js","../node_modules/gesel/src/fetchAllCollections.js","../node_modules/gesel/src/fetchAllGenes.js","../node_modules/gesel/src/fetchAllSets.js","../node_modules/gesel/src/fetchGenesForAllSets.js","../node_modules/gesel/src/fetchGenesForSet.js","../node_modules/gesel/src/fetchSetsForAllGenes.js","../node_modules/gesel/src/fetchSetsForGene.js","../node_modules/gesel/src/fetchSingleCollection.js","../node_modules/gesel/src/fetchSingleSet.js","../node_modules/gesel/src/mapGenesByIdentifier.js","../node_modules/gesel/src/reindexGenesForAllSets.js","../node_modules/gesel/src/reindexSetsForAllGenes.js","../node_modules/gesel/src/searchSetText.js","../node_modules/scran.js/browser/MultiMatrix.js","../node_modules/scran.js/browser/ScranMatrix.js","../node_modules/scran.js/browser/abstract/realize.js","../node_modules/scran.js/browser/block.js","../node_modules/scran.js/browser/cbind.js","../node_modules/scran.js/browser/chooseHVGs.js","../node_modules/scran.js/browser/clusterKmeans.js","../node_modules/scran.js/browser/clusterSNNGraph.js","../node_modules/scran.js/browser/factorize.js","../node_modules/scran.js/browser/filterCells.js","../node_modules/scran.js/browser/findNearestNeighbors.js","../node_modules/scran.js/browser/groupedSizeFactors.js","../node_modules/scran.js/browser/guessFeatures.js","../node_modules/scran.js/browser/hypergeometricTest.js","../node_modules/scran.js/browser/initializeSparseMatrix.js","../node_modules/scran.js/browser/internal/computePerCellQcFilters.js","../node_modules/scran.js/browser/internal/computePerCellQcMetrics.js","../node_modules/scran.js/browser/internal/pack_strings.js","../node_modules/scran.js/browser/labelCells.js","../node_modules/scran.js/browser/logNormCounts.js","../node_modules/scran.js/browser/mnnCorrect.js","../node_modules/scran.js/browser/modelGeneVar.js","../node_modules/scran.js/browser/perCellAdtQcMetrics.js","../node_modules/scran.js/browser/perCellCrisprQcMetrics.js","../node_modules/scran.js/browser/perCellRnaQcMetrics.js","../node_modules/scran.js/browser/quickAdtSizeFactors.js","../node_modules/scran.js/browser/rds.js","../node_modules/scran.js/browser/runPCA.js","../node_modules/scran.js/browser/runTSNE.js","../node_modules/scran.js/browser/scaleByNeighbors.js","../node_modules/scran.js/browser/scoreFeatureSet.js","../node_modules/scran.js/browser/scoreMarkers.js","../node_modules/scran.js/browser/subset.js","../node_modules/scran.js/browser/suggestAdtQcFilters.js","../node_modules/scran.js/browser/suggestCrisprQcFilters.js","../node_modules/scran.js/browser/suggestRnaQcFilters.js","../node_modules/scran.js/browser/utils.js","../node_modules/scran.js/browser/wasm.js","../node_modules/wasmarrays.js/src/derived.js","../node_modules/wasmarrays.js/src/create.js","../node_modules/wasmarrays.js/src/view.js"],"sourcesContent":["/*!\n\nJSZip v3.10.1 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/main/LICENSE\n*/\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).JSZip=e()}}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t=\"function\"==typeof require&&require;if(!e&&t)return t(r,!0);if(l)return l(r,!0);var n=new Error(\"Cannot find module '\"+r+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h)}return o[r].exports}for(var l=\"function\"==typeof require&&require,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){\"use strict\";var d=e(\"./utils\"),c=e(\"./support\"),p=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c=\"string\"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join(\"\")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u=\"data:\";if(e.substr(0,u.length)===u)throw new Error(\"Invalid base64 input, it looks like a data url.\");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,\"\")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error(\"Invalid base64 input, bad content length.\");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l}},{\"./support\":30,\"./utils\":32}],2:[function(e,t,r){\"use strict\";var n=e(\"./external\"),i=e(\"./stream/DataWorker\"),s=e(\"./stream/Crc32Probe\"),a=e(\"./stream/DataLengthProbe\");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")),t=this;return e.on(\"end\",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a(\"uncompressedSize\")).pipe(t.compressWorker(r)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\",t)},t.exports=o},{\"./external\":6,\"./stream/Crc32Probe\":25,\"./stream/DataLengthProbe\":26,\"./stream/DataWorker\":27}],3:[function(e,t,r){\"use strict\";var n=e(\"./stream/GenericWorker\");r.STORE={magic:\"\\0\\0\",compressWorker:function(){return new n(\"STORE compression\")},uncompressWorker:function(){return new n(\"STORE decompression\")}},r.DEFLATE=e(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":28}],4:[function(e,t,r){\"use strict\";var n=e(\"./utils\");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?\"string\"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length,0):0}},{\"./utils\":32}],5:[function(e,t,r){\"use strict\";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){\"use strict\";var n=null;n=\"undefined\"!=typeof Promise?Promise:e(\"lie\"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,i=e(\"pako\"),s=e(\"./utils\"),a=e(\"./stream/GenericWorker\"),o=n?\"uint8array\":\"array\";function h(e,t){a.call(this,\"FlateWorker/\"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic=\"\\b\\0\",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new h(\"Deflate\",e)},r.uncompressWorker=function(){return new h(\"Inflate\",{})}},{\"./stream/GenericWorker\":28,\"./utils\":32,pako:38}],8:[function(e,t,r){\"use strict\";function A(e,t){var r,n=\"\";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo(\"string\",s(h.name)),c=I.transformTo(\"string\",O.utf8encode(h.name)),d=h.comment,p=I.transformTo(\"string\",s(d)),m=I.transformTo(\"string\",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b=\"\",v=\"\",y=\"\",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),\"UNIX\"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+=\"up\"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+=\"uc\"+A(y.length,2)+y);var E=\"\";return E+=\"\\n\\0\",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+\"\\0\\0\\0\\0\"+A(z,4)+A(n,4)+f+b+p}}var I=e(\"../utils\"),i=e(\"../stream/GenericWorker\"),O=e(\"../utf8\"),B=e(\"../crc32\"),R=e(\"../signature\");function s(e,t,r,n){i.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo(\"string\",i(n));return R.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on(\"error\",function(e){t.error(e)}),this},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=s},{\"../crc32\":4,\"../signature\":23,\"../stream/GenericWorker\":28,\"../utf8\":31,\"../utils\":32}],9:[function(e,t,r){\"use strict\";var u=e(\"../compressions\"),n=e(\"./ZipFileWorker\");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+\" is not a valid compression method !\");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo(\"file\",{name:e,dir:i,date:s,comment:t.comment||\"\",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(e){o.error(e)}return o}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(e,t,r){\"use strict\";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files=Object.create(null),this.comment=null,this.root=\"\",this.clone=function(){var e=new n;for(var t in this)\"function\"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e(\"./object\")).loadAsync=e(\"./load\"),n.support=e(\"./support\"),n.defaults=e(\"./defaults\"),n.version=\"3.10.1\",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e(\"./external\"),t.exports=n},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":15,\"./support\":30}],11:[function(e,t,r){\"use strict\";var u=e(\"./utils\"),i=e(\"./external\"),n=e(\"./utf8\"),s=e(\"./zipEntries\"),a=e(\"./stream/Crc32Probe\"),l=e(\"./nodejsUtils\");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on(\"error\",function(e){t(e)}).on(\"end\",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error(\"Corrupted zip : CRC32 mismatch\")):e()}).resume()})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):u.prepareContent(\"the loaded zip file\",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s)}return t.zipComment.length&&(h.comment=t.zipComment),h})}},{\"./external\":6,\"./nodejsUtils\":14,\"./stream/Crc32Probe\":25,\"./utf8\":31,\"./utils\":32,\"./zipEntries\":33}],12:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../stream/GenericWorker\");function s(e,t){i.call(this,\"Nodejs stream input adapter for \"+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on(\"data\",function(e){t.push({data:e,meta:{percent:0}})}).on(\"error\",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on(\"end\",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{\"../stream/GenericWorker\":28,\"../utils\":32}],13:[function(e,t,r){\"use strict\";var i=e(\"readable-stream\").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on(\"data\",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on(\"error\",function(e){n.emit(\"error\",e)}).on(\"end\",function(){n.push(null)})}e(\"../utils\").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{\"../utils\":32,\"readable-stream\":16}],14:[function(e,t,r){\"use strict\";t.exports={isNode:\"undefined\"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if(\"number\"==typeof e)throw new Error('The \"data\" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&\"function\"==typeof e.on&&\"function\"==typeof e.pause&&\"function\"==typeof e.resume}}},{}],15:[function(e,t,r){\"use strict\";function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),\"string\"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a=\"string\"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t=\"\",s.compression=\"STORE\",i=\"string\");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h}var i=e(\"./utf8\"),u=e(\"./utils\"),l=e(\"./stream/GenericWorker\"),a=e(\"./stream/StreamHelper\"),f=e(\"./defaults\"),c=e(\"./compressedObject\"),d=e(\"./zipObject\"),o=e(\"./generate\"),p=e(\"./nodejsUtils\"),m=e(\"./nodejs/NodejsStreamInputAdapter\"),_=function(e){\"/\"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf(\"/\");return 0<t?e.substring(0,t):\"\"},g=function(e){return\"/\"!==e.slice(-1)&&(e+=\"/\"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return\"[object RegExp]\"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||(\"/\"!==r.slice(-1)&&(r+=\"/\"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),\"binarystring\"===r.type&&(r.type=\"string\"),!r.type)throw new Error(\"No output type specified.\");u.checkSupport(r.type),\"darwin\"!==r.platform&&\"freebsd\"!==r.platform&&\"linux\"!==r.platform&&\"sunos\"!==r.platform||(r.platform=\"UNIX\"),\"win32\"===r.platform&&(r.platform=\"DOS\");var n=r.comment||this.comment||\"\";t=o.generateWorker(this,r,n)}catch(e){(t=new l(\"error\")).error(e)}return new a(t,r.type||\"string\",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type=\"nodebuffer\"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":12,\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31,\"./utils\":32,\"./zipObject\":35}],16:[function(e,t,r){\"use strict\";t.exports=e(\"stream\")},{stream:void 0}],17:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],18:[function(e,t,r){\"use strict\";var n=e(\"../utils\");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+e+\"). Corrupted zip ?\")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo(\"string\",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{\"../utils\":32}],19:[function(e,t,r){\"use strict\";var n=e(\"./Uint8ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./Uint8ArrayReader\":21}],20:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],21:[function(e,t,r){\"use strict\";var n=e(\"./ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./ArrayReader\":17}],22:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../support\"),s=e(\"./ArrayReader\"),a=e(\"./StringReader\"),o=e(\"./NodeBufferReader\"),h=e(\"./Uint8ArrayReader\");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),\"string\"!==t||i.uint8array?\"nodebuffer\"===t?new o(e):i.uint8array?new h(n.transformTo(\"uint8array\",e)):new s(n.transformTo(\"array\",e)):new a(e)}},{\"../support\":30,\"../utils\":32,\"./ArrayReader\":17,\"./NodeBufferReader\":19,\"./StringReader\":20,\"./Uint8ArrayReader\":21}],23:[function(e,t,r){\"use strict\";r.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",r.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",r.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",r.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",r.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],24:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../utils\");function s(e){n.call(this,\"ConvertWorker to \"+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],25:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../crc32\");function s(){n.call(this,\"Crc32Probe\"),this.withStreamInfo(\"crc32\",0)}e(\"../utils\").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{\"../crc32\":4,\"../utils\":32,\"./GenericWorker\":28}],26:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataLengthProbe for \"+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],27:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataWorker\");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":e=this.data.substring(this.index,t);break;case\"uint8array\":e=this.data.subarray(this.index,t);break;case\"array\":case\"nodebuffer\":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],28:[function(e,t,r){\"use strict\";function n(e){this.name=e||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit(\"data\",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit(\"error\",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit(\"error\",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.end()}),e.on(\"error\",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+e:e}},t.exports=n},{}],29:[function(e,t,r){\"use strict\";var h=e(\"../utils\"),i=e(\"./ConvertWorker\"),s=e(\"./GenericWorker\"),u=e(\"../base64\"),n=e(\"../support\"),a=e(\"../external\"),o=null;if(n.nodestream)try{o=e(\"../nodejs/NodejsStreamOutputAdapter\")}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on(\"data\",function(e,t){n.push(e),o&&o(t)}).on(\"error\",function(e){n=[],r(e)}).on(\"end\",function(){try{var e=function(e,t,r){switch(e){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",t),r);case\"base64\":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case\"string\":return t.join(\"\");case\"array\":return Array.prototype.concat.apply([],t);case\"uint8array\":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case\"nodebuffer\":return Buffer.concat(t);default:throw new Error(\"concat : unsupported type '\"+e+\"'\")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()})}function f(e,t,r){var n=t;switch(t){case\"blob\":case\"arraybuffer\":n=\"uint8array\";break;case\"base64\":n=\"string\"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s(\"error\"),this._worker.error(e)}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return\"data\"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new o(this,{objectMode:\"nodebuffer\"!==this._outputType},e)}},t.exports=f},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":13,\"../support\":30,\"../utils\":32,\"./ConvertWorker\":24,\"./GenericWorker\":28}],30:[function(e,t,r){\"use strict\";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,r.nodebuffer=\"undefined\"!=typeof Buffer,r.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:\"application/zip\"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob(\"application/zip\").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e(\"readable-stream\").Readable}catch(e){r.nodestream=!1}},{\"readable-stream\":16}],31:[function(e,t,s){\"use strict\";for(var o=e(\"./utils\"),h=e(\"./support\"),r=e(\"./nodejsUtils\"),n=e(\"./stream/GenericWorker\"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,\"utf-8 decode\"),this.leftOver=null}function l(){n.call(this,\"utf-8 encode\")}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,\"utf-8\"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo(\"nodebuffer\",e).toString(\"utf-8\"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?\"uint8array\":\"array\",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?\"uint8array\":\"array\",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=l},{\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./support\":30,\"./utils\":32}],32:[function(e,t,a){\"use strict\";var o=e(\"./support\"),h=e(\"./base64\"),r=e(\"./nodejsUtils\"),u=e(\"./external\");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e(\"setimmediate\"),a.newBlob=function(t,r){a.checkSupport(\"blob\");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error(\"Bug : can't construct the Blob.\")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)\"array\"===t||\"nodebuffer\"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join(\"\")},stringifyByChar:function(e){for(var t=\"\",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if(\"uint8array\"===r?n=i.applyCanBeUsed.uint8array:\"nodebuffer\"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||\"\",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split(\"/\"),r=[],n=0;n<t.length;n++){var i=t[n];\".\"===i||\"\"===i&&0!==n&&n!==t.length-1||(\"..\"===i?r.pop():r.push(i))}return r.join(\"/\")},a.getTypeOf=function(e){return\"string\"==typeof e?\"string\":\"[object Array]\"===Object.prototype.toString.call(e)?\"array\":o.nodebuffer&&r.isBuffer(e)?\"nodebuffer\":o.uint8array&&e instanceof Uint8Array?\"uint8array\":o.arraybuffer&&e instanceof ArrayBuffer?\"arraybuffer\":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+\" is not supported by this platform\")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n=\"\";for(r=0;r<(e||\"\").length;r++)n+=\"\\\\x\"+((t=e.charCodeAt(r))<16?\"0\":\"\")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[])})},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==[\"[object File]\",\"[object Blob]\"].indexOf(Object.prototype.toString.call(n)))&&\"undefined\"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t=a.getTypeOf(e);return t?(\"arraybuffer\"===t?e=a.transformTo(\"uint8array\",e):\"string\"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error(\"Can't read the data of '\"+r+\"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":14,\"./support\":30,setimmediate:54}],33:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),i=e(\"./utils\"),s=e(\"./signature\"),a=e(\"./zipEntry\"),o=e(\"./support\");function h(e){this.files=[],this.loadOptions=e}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error(\"Corrupted zip or bug: unexpected signature (\"+i.pretty(t)+\", expected \"+i.pretty(e)+\")\")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?\"uint8array\":\"array\",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip: can't find end of central directory\");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(n)+\" bytes.\")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=h},{\"./reader/readerFor\":22,\"./signature\":23,\"./support\":30,\"./utils\":32,\"./zipEntry\":34}],34:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),s=e(\"./utils\"),i=e(\"./compressedObject\"),a=e(\"./crc32\"),o=e(\"./utf8\"),h=e(\"./compressions\"),u=e(\"./support\");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error(\"Corrupted zip : compression \"+s.pretty(this.compressionMethod)+\" unknown (inner file : \"+s.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=u.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":22,\"./support\":30,\"./utf8\":31,\"./utils\":32}],35:[function(e,t,r){\"use strict\";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e(\"./stream/StreamHelper\"),i=e(\"./stream/DataWorker\"),a=e(\"./utf8\"),o=e(\"./compressedObject\"),h=e(\"./stream/GenericWorker\");n.prototype={internalStream:function(e){var t=null,r=\"string\";try{if(!e)throw new Error(\"No output type specified.\");var n=\"string\"===(r=e.toLowerCase())||\"text\"===r;\"binarystring\"!==r&&\"text\"!==r||(r=\"string\"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new h(\"error\")).error(e)}return new s(t,r,\"\")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||\"nodebuffer\").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],l=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n},{\"./compressedObject\":2,\"./stream/DataWorker\":27,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31}],36:[function(e,l,t){(function(t){\"use strict\";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode(\"\");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r=\"document\"in t&&\"onreadystatechange\"in t.document.createElement(\"script\")?function(){var e=t.document.createElement(\"script\");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(u,0)};else{var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length}n=!1}l.exports=function(e){1!==h.push(e)||n||r()}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],37:[function(e,t,r){\"use strict\";var i=e(\"immediate\");function u(){}var l={},s=[\"REJECTED\"],a=[\"FULFILLED\"],n=[\"PENDING\"];function o(e){if(\"function\"!=typeof e)throw new TypeError(\"resolver must be a function\");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e)}function h(e,t,r){this.promise=e,\"function\"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError(\"Cannot resolve promise with itself\")):l.resolve(t,e)})}function c(e){var t=e&&e.then;if(e&&(\"object\"==typeof e||\"function\"==typeof e)&&\"function\"==typeof t)return function(){t.apply(e,arguments)}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e))}function i(e){r||(r=!0,l.resolve(t,e))}var s=p(function(){e(i,n)});\"error\"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status=\"success\"}catch(e){r.status=\"error\",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if(\"function\"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if(\"function\"!=typeof e&&this.state===a||\"function\"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e)},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},h.prototype.callRejected=function(e){l.reject(this.promise,e)},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},l.resolve=function(e,t){var r=p(c,t);if(\"error\"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s))},function(e){i||(i=!0,l.reject(o,e))})}},o.race=function(e){var t=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e))},function(e){n||(n=!0,l.reject(s,e))});var a;return s}},{immediate:36}],38:[function(e,t,r){\"use strict\";var n={};(0,e(\"./lib/utils/common\").assign)(n,e(\"./lib/deflate\"),e(\"./lib/inflate\"),e(\"./lib/zlib/constants\")),t.exports=n},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(e,t,r){\"use strict\";var a=e(\"./zlib/deflate\"),o=e(\"./utils/common\"),h=e(\"./utils/strings\"),i=e(\"./zlib/messages\"),s=e(\"./zlib/zstream\"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:\"\"},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n=\"string\"==typeof t.dictionary?h.string2buf(t.dictionary):\"[object ArrayBuffer]\"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,\"string\"==typeof e?i.input=h.string2buf(e):\"[object ArrayBuffer]\"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||(\"string\"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===l&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(e,t,r){\"use strict\";var c=e(\"./zlib/inflate\"),d=e(\"./utils/common\"),p=e(\"./utils/strings\"),m=e(\"./zlib/constants\"),n=e(\"./zlib/messages\"),i=e(\"./zlib/zstream\"),s=e(\"./zlib/gzheader\"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:\"\"},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,\"string\"==typeof e?h.input=p.binstring2buf(e):\"[object ArrayBuffer]\"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o=\"string\"==typeof l?p.string2buf(l):\"[object ArrayBuffer]\"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if(\"object\"!=typeof r)throw new TypeError(r+\"must be non-object\");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){\"use strict\";var h=e(\"./common\"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r=\"\",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}},{\"./common\":41}],43:[function(e,t,r){\"use strict\";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){\"use strict\";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){\"use strict\";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){\"use strict\";var h,c=e(\"../utils/common\"),u=e(\"./trees\"),d=e(\"./adler32\"),p=e(\"./crc32\"),n=e(\"./messages\"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return(e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm)}function U(e,t){e.pending_buf[e.pending++]=t}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a]}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else{var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(e,t,r){\"use strict\";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){\"use strict\";t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg=\"invalid literal/length code\",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg=\"invalid distance code\",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p}},{}],49:[function(e,t,r){\"use strict\";var I=e(\"../utils/common\"),O=e(\"./adler32\"),B=e(\"./crc32\"),R=e(\"./inffast\"),T=e(\"./inftrees\"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg=\"incorrect header check\",r.mode=30;break}if(8!=(15&u)){e.msg=\"unknown compression method\",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){e.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){e.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(65535&r.check)){e.msg=\"header crc mismatch\",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg=\"invalid block type\",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){e.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){e.msg=\"invalid bit length repeat\",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+d>r.nlen+r.ndist){e.msg=\"invalid bit length repeat\",r.mode=30;break}for(;d--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg=\"invalid distance code\",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg=\"incorrect data check\",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(4294967295&r.total)){e.msg=\"incorrect length check\",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(e,t,r){\"use strict\";var D=e(\"../utils/common\"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===e||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0}},{\"../utils/common\":41}],51:[function(e,t,r){\"use strict\";t.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(e,t,r){\"use strict\";var i=e(\"../utils/common\"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function L(e,t,r){P(e,r[2*t],r[2*t+1])}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o))}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t)}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--)}}(e,t),Z(s,u,e.bl_count)}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4))}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4)}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),n&&(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p)}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e)},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{\"../utils/common\":41}],53:[function(e,t,r){\"use strict\";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(r,n){\"use strict\";if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i=\"[object process]\"==={}.toString.call(r.process)?function(e){process.nextTick(function(){c(e)})}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1},r.postMessage(\"\",\"*\"),r.onmessage=t,e}}()?(a=\"setImmediate$\"+Math.random()+\"$\",r.addEventListener?r.addEventListener(\"message\",d,!1):r.attachEvent(\"onmessage\",d),function(e){r.postMessage(a+e,\"*\")}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data)},function(e){t.port2.postMessage(e)}):l&&\"onreadystatechange\"in l.createElement(\"script\")?(s=l.documentElement,function(e){var t=l.createElement(\"script\");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null},s.appendChild(t)}):function(e){setTimeout(c,0,e)},e.setImmediate=function(e){\"function\"!=typeof e&&(e=new Function(\"\"+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f}function f(e){delete h[e]}function c(e){if(u)setTimeout(c,0,e);else{var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),u=!1}}}}function d(e){e.source===r&&\"string\"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length))}}(\"undefined\"==typeof self?void 0===e?this:e:self)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[10])(10)});","/* @license\nPapa Parse\nv5.4.1\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=f.IS_PAPA_WORKER||!1,a={},u=0,b={parse:function(e,t){var r=(t=t||{}).dynamicTyping||!1;J(r)&&(t.dynamicTypingFunction=r,r={});if(t.dynamicTyping=r,t.transform=!!J(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var i=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(r=f.URL||f.webkitURL||null,i=s.toString(),b.BLOB_URL||(b.BLOB_URL=r.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",i,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var r,i;return t.onmessage=_,t.id=u++,a[t.id]=t}();return i.userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=J(t.step),t.chunk=J(t.chunk),t.complete=J(t.complete),t.error=J(t.error),delete t.worker,void i.postMessage({input:e,config:t,workerId:i.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?(e=function(e){if(65279===e.charCodeAt(0))return e.slice(1);return e}(e),n=t.download?new l(t):new p(t)):!0===e.readable&&J(e.read)&&J(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,r=!1,i=null,o=!1;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(r=t.skipEmptyLines);\"string\"==typeof t.newline&&(y=t.newline);\"string\"==typeof t.quoteChar&&(s=t.quoteChar);\"boolean\"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");i=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s);(\"boolean\"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(o=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\\-@\\t\\r].*$/)}();var u=new RegExp(Q(s),\"g\");\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,r);if(\"object\"==typeof e[0])return h(i||Object.keys(e[0]),e,r)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||i),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],r);throw new Error(\"Unable to serialize unrecognized input\");function h(e,t,r){var i=\"\";\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(i+=m),i+=v(e[a],a);0<t.length&&(i+=y)}for(var o=0;o<t.length;o++){var u=n?e.length:t[o].length,h=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(r&&!n&&(h=\"greedy\"===r?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===r&&n){for(var d=[],l=0;l<u;l++){var c=s?e[l]:l;d.push(t[o][c])}h=\"\"===d.join(\"\").trim()}if(!h){for(var p=0;p<u;p++){0<p&&!f&&(i+=m);var g=n&&s?e[p]:p;i+=v(t[o][g],p)}o<t.length-1&&(!r||0<u&&!f)&&(i+=y)}}return i}function v(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var r=!1;o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0);var i=e.toString().replace(u,a);return(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var r=0;r<t.length;r++)if(-1<e.indexOf(t[r]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=E,b.ParserHandle=r,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var r=o.config||{},u=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)u.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},r)})}),e(),this;function e(){if(0!==u.length){var e,t,r,i,n=u[0];if(J(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,r=n.inputElem,i=s.reason,void(J(o.error)&&o.error({name:e},t,r,i));if(\"skip\"===s.action)return void h();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void h()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){J(a)&&a(e,n.file,n.inputElem),h()},b.parse(n.file,n.instanceConfig)}else J(o.complete)&&o.complete()}function h(){u.splice(0,1),e()}}}function h(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new r(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&J(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=i.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(J(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!J(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){J(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var i;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),h.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(i=new XMLHttpRequest,this._config.withCredentials&&(i.withCredentials=this._config.withCredentials),n||(i.onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)),i.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)i.setRequestHeader(t,e[t])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;i.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+r)}try{i.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===i.status&&this._chunkError()}},this._chunkLoaded=function(){4===i.readyState&&(i.status<200||400<=i.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:i.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(i),this.parseChunk(i.responseText)))},this._chunkError=function(e){var t=i.statusText||e;this._sendError(new Error(t))}}function c(e){var i,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),h.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((i=new FileReader).onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var r=i.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:r}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function p(e){var r;h.call(this,e=e||{}),this.stream=function(e){return r=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=r.substring(0,t),r=r.substring(t)):(e=r,r=\"\"),this._finished=!r,this.parseChunk(e)}}}function g(e){h.call(this,e=e||{});var t=[],r=!0,i=!1;this.pause=function(){h.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){h.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){i&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):r=!0},this._streamData=v(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),i=!0,this._streamData(\"\")},this),this._streamCleanUp=v(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function r(m){var a,o,u,i=Math.pow(2,53),n=-i,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,h=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,t=this,r=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(J(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;r+=e.data.length,m.preview&&r>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){return c&&u&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),u=!1),m.skipEmptyLines&&(c.data=c.data.filter(function(e){return!y(e)})),_()&&function(){if(!c)return;function e(e,t){J(m.transformHeader)&&(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var r,i=m.header?{}:[];for(r=0;r<e.length;r++){var n=r,s=e[r];m.header&&(n=r>=l.length?\"__parsed_extra\":l[r]),m.transform&&(s=m.transform(s,n)),s=v(n,s),\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+r,f+t):r<l.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+r,f+t)),i}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function v(e,t){return r=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[r]&&(m.dynamicTyping[r]=m.dynamicTypingFunction(r)),!0===(m.dynamicTyping[r]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<i)return!0}return!1}(t)?parseFloat(t):h.test(t)?new Date(t):\"\"===t?null:t):t;var r}function k(e,t,r,i){var n={type:e,code:t,message:r};void 0!==i&&(n.row=i),c.errors.push(n)}this.parse=function(e,t,r){var i=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var r=new RegExp(Q(t)+\"([^]*?)\"+Q(t),\"gm\"),i=(e=e.replace(r,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1<n.length&&n[0].length<i[0].length;if(1===i.length||s)return\"\\n\";for(var a=0,o=0;o<i.length;o++)\"\\n\"===i[o][0]&&a++;return a>=i.length/2?\"\\r\\n\":\"\\r\"}(e,i)),u=!1,m.delimiter)J(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,r,i,n){var s,a,o,u;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var h=0;h<n.length;h++){var f=n[h],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:i,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(r&&y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===u||u<l)&&1.99<l&&(a=d,s=f,u=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(u=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&&m.header&&s.preview++,a=e,o=new E(s),c=o.parse(a,t,r),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=J(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,J(m.complete)&&m.complete(c),a=\"\"}}function Q(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(j){var z,M=(j=j||{}).delimiter,P=j.newline,U=j.comments,q=j.step,N=j.preview,B=j.fastMode,K=z=void 0===j.quoteChar||null===j.quoteChar?'\"':j.quoteChar;if(void 0!==j.escapeChar&&(K=j.escapeChar),(\"string\"!=typeof M||-1<b.BAD_DELIMITERS.indexOf(M))&&(M=\",\"),U===M)throw new Error(\"Comment character same as delimiter\");!0===U?U=\"#\":(\"string\"!=typeof U||-1<b.BAD_DELIMITERS.indexOf(U))&&(U=!1),\"\\n\"!==P&&\"\\r\"!==P&&\"\\r\\n\"!==P&&(P=\"\\n\");var W=0,H=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=M.length,s=P.length,a=U.length,o=J(q),u=[],h=[],f=[],d=W=0;if(!i)return L();if(j.header&&!t){var l=i.split(P)[0].split(M),c=[],p={},g=!1;for(var _ in l){var m=l[_];J(j.transformHeader)&&(m=j.transformHeader(m,_));var y=m,v=p[m]||0;for(0<v&&(g=!0,y=m+\"_\"+v),p[m]=v+1;c.includes(y);)y=y+\"_\"+v;c.push(y)}if(g){var k=i.split(P);k[0]=c.join(M),i=k.join(P)}}if(B||!1!==B&&-1===i.indexOf(z)){for(var b=i.split(P),E=0;E<b.length;E++){if(f=b[E],W+=f.length,E!==b.length-1)W+=P.length;else if(r)return L();if(!U||f.substring(0,a)!==U){if(o){if(u=[],I(f.split(M)),F(),H)return L()}else I(f.split(M));if(N&&N<=E)return u=u.slice(0,N),L(!0)}}return L()}for(var w=i.indexOf(M,W),R=i.indexOf(P,W),C=new RegExp(Q(K)+Q(z),\"g\"),S=i.indexOf(z,W);;)if(i[W]!==z)if(U&&0===f.length&&i.substring(W,W+a)===U){if(-1===R)return L();W=R+s,R=i.indexOf(P,W),w=i.indexOf(M,W)}else if(-1!==w&&(w<R||-1===R))f.push(i.substring(W,w)),W=w+e,w=i.indexOf(M,W);else{if(-1===R)break;if(f.push(i.substring(W,R)),D(R+s),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0)}else for(S=W,W++;;){if(-1===(S=i.indexOf(z,S+1)))return r||h.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:u.length,index:W}),T();if(S===n-1)return T(i.substring(W,S).replace(C,z));if(z!==K||i[S+1]!==K){if(z===K||0===S||i[S-1]!==K){-1!==w&&w<S+1&&(w=i.indexOf(M,S+1)),-1!==R&&R<S+1&&(R=i.indexOf(P,S+1));var O=A(-1===R?w:Math.min(w,R));if(i.substr(S+1+O,e)===M){f.push(i.substring(W,S).replace(C,z)),i[W=S+1+O+e]!==z&&(S=i.indexOf(z,W)),w=i.indexOf(M,W),R=i.indexOf(P,W);break}var x=A(R);if(i.substring(S+1+x,S+1+x+s)===P){if(f.push(i.substring(W,S).replace(C,z)),D(S+1+x+s),w=i.indexOf(M,W),S=i.indexOf(z,W),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0);break}h.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:u.length,index:W}),S++}}else S++}return T();function I(e){u.push(e),d=W}function A(e){var t=0;if(-1!==e){var r=i.substring(S+1,e);r&&\"\"===r.trim()&&(t=r.length)}return t}function T(e){return r||(void 0===e&&(e=i.substring(W)),f.push(e),W=n,I(f),o&&F()),L()}function D(e){W=e,I(f),f=[],R=i.indexOf(P,W)}function L(e){return{data:u,errors:h,meta:{delimiter:M,linebreak:P,aborted:H,truncated:!!e,cursor:d+(t||0)}}}function F(){q(L()),u=[],h=[]}},this.abort=function(){H=!0},this.getCharIndex=function(){return W}}function _(e){var t=e.data,r=a[t.workerId],i=!1;if(t.error)r.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){i=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(J(r.userStep)){for(var s=0;s<t.results.data.length&&(r.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!i);s++);delete t.results}else J(r.userChunk)&&(r.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!i&&m(t.workerId,t.results)}function m(e,t){var r=a[e];J(r.userComplete)&&r.userComplete(t),r.terminate(),delete a[e]}function y(){throw new Error(\"Not implemented.\")}function w(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var r in e)t[r]=w(e[r]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function J(e){return\"function\"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var r=b.parse(t.input,t.config);r&&f.postMessage({workerId:b.WORKER_ID,results:r,finished:!0})}}),(l.prototype=Object.create(h.prototype)).constructor=l,(c.prototype=Object.create(h.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(h.prototype)).constructor=g,b});","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [18,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [46,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [62,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [178, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [257, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [282, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {\n  if (receiver !== classConstructor) {\n    throw new TypeError(\"Private static access of wrong provenance\");\n  }\n}","export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {\n  if (descriptor === undefined) {\n    throw new TypeError(\"attempted to \" + action + \" private static field before its declaration\");\n  }\n}","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","import classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nexport default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  return method;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    // Just an alias for back-compatibility.\n    scran.free(object);\n    return;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n\nexport async function defaultDownload(url) {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return new Uint8Array(await resp.arrayBuffer());\n}\n\nexport function guessFeatureTypes(genes) {\n    let output = { columns: {} };\n\n    let rn = genes.rowNames();\n    if (rn !== null) {\n        output.row_names = scran.guessFeatures(rn, { forceTaxonomy: true });\n    }\n\n    for (const key of genes.columnNames()) {\n        let curcol = genes.column(key);\n        if (curcol instanceof Array) {\n            output.columns[key] = scran.guessFeatures(genes.column(key), { forceTaxonomy: true });\n        }\n    }\n\n    return output;\n}\n\nexport function subsetInvalidFactors(arrays) {\n    let N = arrays[0].length;\n    let output = { arrays: [], retain: null };\n\n    let invalid = new Uint8Array(N);\n    invalid.fill(0);\n    for (const x of arrays) {\n        let transformed = scran.factorize(x, { action: \"none\", placeholder: -1 });\n        output.arrays.push(transformed);\n        transformed.ids.forEach((y, i) => {\n            if (y == -1) {\n                invalid[i] = 1;\n            }\n        });\n    }\n\n    let num_invalid = 0;\n    invalid.forEach(y => { num_invalid += y; });\n    if (num_invalid == 0) {\n        return output;\n    }\n\n    let retain = new Int32Array(N - num_invalid);\n    {\n        let counter = 0;\n        for (var i = 0; i < N; i++) {\n            if (invalid[i] == 0) {\n                retain[counter] = i;\n                counter++;\n            }\n        }\n    }\n    output.retain = retain;\n\n    for (var i = 0; i < output.arrays.length; i++) {\n        let x = output.arrays[i];\n        let new_ids = scran.subsetBlock(x.ids, retain);\n        let remapping = scran.dropUnusedBlock(new_ids);\n        let new_levels = remapping.map(i => x.levels[i]);\n\n        scran.free(x.ids);\n        x.ids = new_ids;\n        x.levels = new_levels;\n    }\n\n    return output;\n}\n","export class SimpleFile {\n    #mode;\n    #buffer;\n    #file;\n    #name;\n\n    constructor(x, { name = null } = {}) {\n        if (x instanceof File) {\n            this.#mode = \"file\";\n            this.#file = x;\n            if (name === null) {\n                name = x.name;\n            }\n            this.#name = name;\n        } else if (x instanceof Uint8Array) {\n            this.#mode = \"buffer\";\n            this.#buffer = x; \n            if (name === null) {\n                throw new Error(\"'name' must be provided for Uint8Array inputs in SimpleFile constructor\");\n            }\n            this.#name = name;\n        } else {\n            throw new Error(\"unknown type '\" + typeof(x) + \"' for SimpleFile constructor\");\n        }\n    }\n\n    buffer({ copy = false } = {}) {\n        if (this.#mode == \"file\") {\n            let reader = new FileReaderSync();\n            let b = reader.readAsArrayBuffer(this.#file);\n            return new Uint8Array(b);\n        } else {\n            if (copy) {\n                return this.#buffer.slice();\n            } else {\n                return this.#buffer;\n            }\n        }\n    }\n\n    size() {\n        if (this.#mode == \"file\") {\n            return this.#file.size;\n        } else {\n            return this.#buffer.length;\n        }\n    }\n\n    name() {\n        return this.#name;\n    }\n\n    content({ copy = false } = {}) {\n        return this.buffer({ copy: copy });\n    }\n}\n","export function stream(file, chunkSize, callback, resolve, reject) {\n    reject(\"no support for file paths in the browser context\");\n}\n\nexport function peek(file, n) {\n    throw new Error(\"no support for file paths in the browser context\");\n}\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\nimport * as astream from \"./abstract/stream.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function extractHDF5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (content.type !== \"String\") {\n        return null;\n    }\n\n    return content.load();\n}\n\n/**\n * Summarize an array, typically corresponding to a single column of per-cell annotation.\n * This can be used as part of a preflight response in a Reader.\n *\n * @param {Array|TypedArray} array - Per-cell annotation array of length equal to the number of cells for a given matrix.\n * An Array is treated as categorical data and should contain strings, while TypedArrays are treated as continuous data.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.limit=50] - Maximum number of unique values to report for categorical `x`.\n *\n * @return {object} Object containing `type`, a string indicating whether `array` was categorical or continuous.\n *\n * If `\"categorical\"`, the object will contain `values`, an array of unique values up to the length specified by `limit`.\n * It will also contain `truncated`, a boolean indicating whether the actual number of unique values exceeds `limit`.\n *\n * If `\"continuous\"`, the object will contain the numbers `min` and `max` specifying the minimum and maximum value in `x`, respectively.\n * `min` or `max` may be negative or positive infinity, respectively, if there is no bound on one or both ends.\n * If `min > max`, all values in `array` are `NaN`s such that no bound can be found.\n */\nexport function summarizeArray(array, { limit = 50 } = {}) {\n    if (array instanceof Array) {\n        let chosen = Array.from(new Set(array));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        array.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\nfunction guess_compression(x, compression) {\n    if (compression !== null) {\n        return compression;\n    }\n\n    let buffer;\n    if (x instanceof Uint8Array) {\n        buffer = x;\n    } else {\n        buffer = astream.peek(x, 3);\n    }\n\n    // Compare against magic words for auto-detection.\n    if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n        return 'gz';\n    }\n\n    return 'none';\n}\n\nexport function unpackText(buffer, { compression = null } = {}) {\n    compression = guess_compression(buffer, compression);\n    let txt = (compression === \"gz\" ? pako.ungzip(buffer) : buffer);\n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\nfunction merge_bytes(leftovers, decoder) {\n    let total = 0;\n    for (const x of leftovers) {\n        total += x.length;\n    }\n\n    let combined = new Uint8Array(total);\n    total = 0;\n    for (const x of leftovers) {\n        combined.set(x, total);\n        total += x.length;\n    }\n\n    return decoder.decode(combined);\n}\n\nasync function stream_callback(x, compression, chunkSize, callback) {\n    // Force the input to be either a Uint8Array or a file path string.\n    if (typeof x == \"string\") {\n        ;\n    } else if (x instanceof Uint8Array) {\n        ;\n    } else if (x instanceof afile.SimpleFile) {\n        x = x.content();\n    } else {\n        x = (new afile.SimpleFile(x, { name: \"dummy\" })).content();\n    }\n\n    if (guess_compression(x, compression) == \"gz\") {\n        await (new Promise((resolve, reject) => {\n            let gz = new pako.Inflate({ chunkSize: chunkSize });\n            gz.onData = callback;\n            gz.onEnd = status => {\n                if (status) {\n                    reject(\"gzip decompression failed; \" + gz.msg);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            if (typeof x == \"string\") {\n                astream.stream(x, chunkSize, chunk => gz.push(chunk), null, reject);\n            } else {\n                gz.push(x);\n            }\n        }));\n        return;\n    }\n\n    // Remaining possibilities are uncompressed.\n    if (typeof x == \"string\") {\n        await (new Promise((resolve, reject) => astream.stream(x, chunkSize, callback, resolve, reject)));\n        return;\n    }\n\n    callback(x);\n    return;\n}\n\n/**\n * Read lines of text from a file, possibly with decompression.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {number} [options.chunkSize=65536] - Chunk size in bytes to use for file reading (if `x` is a file path) and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string.\n * @async \n */\nexport async function readLines2(x, { compression = null, chunkSize = 65536 } = {}) {\n    const dec = new TextDecoder;\n    let leftovers = [];\n    let lines = [];\n\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk[i] == 10) { // i.e., ASCII newline.\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    lines.push(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    lines.push(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        lines.push(merge_bytes(leftovers, dec));\n    }\n\n    return lines;    \n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readTable(buffer, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n * This assumes that newlines represent the end of each row of the table, i.e., there cannot be newlines inside quoted strings.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {string} [options.delim=\"\\t\"] - Delimiter between fields.\n * @param {number} [options.chunkSize=1048576] - Chunk size in bytes to use for file reading (if `x` is a path), parsing of rows, and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of length equal to the number of lines in `buffer`.\n * Each entry is an array of strings, containing the `delim`-separated fields for its corresponding line.\n *\n * @async\n */\nexport async function readTable2(x, { compression = null, delim = \"\\t\", chunkSize = 1048576 } = {}) {\n    const dec = new TextDecoder;\n\n    let rows = [];\n    let parse = (str) => {\n        let out = ppp.parse(str, { delimiter: delim });\n        if (out.meta.aborted) {\n            let msg = \"failed to parse delimited file\";\n            for (const e of out.errors) {\n                msg += \"; \" + e.message;\n            }\n            throw new Error(msg);\n        }\n        for (const x of out.data) {\n            rows.push(x);\n        }\n    };\n\n    let leftovers = [];\n    let size_left = 0;\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            // We assume that all newlines are end-of-rows, i.e., there are no\n            // newlines inside quoted strings. Under this assumption, we can\n            // safely chunk the input stream based on newlines, parse each\n            // chunk, and then combine the parsing results together. To avoid\n            // too many parsing calls, we accumulate buffers until we hit \n            // the chunkSize and then we decode + parse them altogether.\n            if (chunk[i] == 10 && (i - last) + size_left >= chunkSize) {\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    parse(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    parse(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n                size_left = 0;\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n            size_left += chunk.length - last;\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        let combined = merge_bytes(leftovers, dec);\n        parse(combined);\n        if (combined[combined.length - 1] == \"\\n\") { // guaranteed to have non-zero length, by virtue of how 'leftovers' is filled.\n            rows.pop();            \n        }\n    }\n\n    return rows;    \n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**\n * Any class that satisfies the ArtifactdbProjectNavigator contract, so called as it is intended to \"navigate\" an ArtifactDB project directory.\n * This should provide the following methods:\n * \n * - `metadata(p)`, a (possibly async) method that accepts a string `p` containing a relative path to a resource inside an ArtifactDB project directory,\n *   and returns an object containing the metadata for that object.\n *   Any redirections should be resolved by this method.\n *\n *   Note that {@linkplain AbstractArtifactdbDataset} will automatically cache the outputs of all `metadata()` calls between any invocations of {@linkcode AbstractArtifactdbDataset#clear clear},\n *   to improve efficiency when repeatedly accessing the same metadata.\n *   The same applies to {@linkplain AbstractArtifactdbResult}.\n * - `file(p)`, a (possibly async) method that accepts a string `p` containing a relative path inside a project directory and returns the contents of the file at that path.\n *   The return value should typically be a Uint8Array; on Node.js, methods may alternatively return a string containing a path to the file on the local file system.\n *   The method does not need to handle redirections from `p`.\n *\n * Optionally, the ArtifactdbProjectNavigator class may implement a `clear()` method to remove any cached content.\n * This will be called by {@linkcode AbstractArtifactdbDataset#clear AbstractArtifactdbDataset.clear} and  {@linkcode AbstractArtifactdbResult#clear AbstractArtifactdbResult.clear}.\n *\n * @typedef ArtifactdbProjectNavigator\n */\n\n/**************************\n ******* Internals ********\n **************************/\n\nasync function load_data_frame(info, navigator) {\n    if (typeof info == \"string\") {\n        info = await navigator.metadata(info);\n    }\n    let contents = await navigator.file(info.path);\n\n    let colnames;\n    let columns;\n    let rownames = null;\n\n    if (info[\"$schema\"].startsWith(\"csv_data_frame/\")) {\n        // TODO: replace with comservatory parser.\n        let parsed = await eutils.readTable2(contents, { delim: \",\" });\n        colnames = parsed.shift();\n\n        columns = new Array(colnames.length);\n        for (var i = 0; i < columns.length; i++) {\n            let current = [];\n            for (const x of parsed) {\n                current.push(x[i]);\n            }\n            columns[i] = current;\n        }\n\n        if (info.data_frame.row_names) {\n            rownames = columns.shift();\n            colnames.shift();\n        }\n\n        // Mutating the type... this doesn't quite handle NAs and NaNs properly, but whatever.\n        for (var i = 0; i < columns.length; i++) {\n            let type = info.data_frame.columns[i].type;\n            if (type == \"integer\") {\n                columns[i] = new Int32Array(columns[i]);\n            } else if (type == \"number\") {\n                columns[i] = new Float64Array(columns[i]);\n            } else if (type == \"boolean\") {\n                columns[i] = columns[i].map(x => x == \"true\");\n            }\n        }\n\n    } else if (info[\"$schema\"].startsWith(\"hdf5_data_frame/\")) {\n        let out = scran.realizeFile(contents);\n        try {\n            let handle = new scran.H5File(out.path);\n            let ghandle = handle.open(info.hdf5_data_frame.group);\n\n            colnames = ghandle.open(\"column_names\", { load: true }).values;\n            if (info.data_frame.row_names) {\n                rownames = ghandle.open(\"row_names\", { load: true }).values;\n            }\n\n            columns = [];\n            let chandle = ghandle.open(\"data\");\n            for (var i = 0; i < colnames.length; i++) {\n                if (!(String(i) in chandle.children)) {\n                    columns.push(null);\n                    continue;\n                }\n\n                let dhandle = chandle.open(String(i), { load: true });\n                let current = dhandle.values;\n\n                let type = info.data_frame.columns[i];\n                if (type == \"integer\") {\n                    if (current instanceof Float64Array || current instanceof Float32Array) {\n                        current = new Int32Array(current);\n                    }\n\n                } else if (type == \"number\") {\n                    if (!(current instanceof Float64Array) && !(current instanceof Float32Array)) {\n                        current = new Float64Array(current);\n                    }\n\n                } else if (type == \"boolean\") {\n                    let replacement = new Array(current.length);\n                    for (var i = 0; i < current.length; i++) {\n                        if (current[i] == -2147483648) {\n                            replacement[i] = null;\n                        } else {\n                            replacement[i] = current[i] != 0\n                        }\n                    }\n                    current = replacement;\n\n                } else if (type == \"string\" || type == \"date\") {\n                    if (\"missing-value-placeholder\" in dhandle.attributes) {\n                        let placeholder = dhandle.readAttribute(\"missing-value-placeholder\").values[0];\n                        for (var i = 0; i < current.length; i++) {\n                            if (current[i] == placeholder) {\n                                current[i] = null;\n                            }\n                        }\n                    }\n                }\n\n                columns.push(current);\n            }\n        } finally {\n            out.flush();\n        }\n\n    } else {\n        throw new Error(\"unknown data_frame schema type '\" + info[\"$schema\"] + \"'\");\n    }\n\n    let new_columns = {};\n    let new_colnames = [];\n    for (var i = 0; i < columns.length; i++) {\n        if (info.data_frame.columns[i].type === \"other\") {\n            let nest_meta = await navigator.metadata(info.data_frame.columns[i].resource.path);\n            try {\n                new_columns[colnames[i]] = await load_data_frame(nest_meta, navigator);\n                new_colnames.push(colnames[i]);\n            } catch (e) {\n                console.warn(e);\n            }\n        } else {\n            new_columns[colnames[i]] = columns[i];\n            new_colnames.push(colnames[i]);\n        }\n    }\n\n    return new bioc.DataFrame(new_columns, { \n        columnOrder: new_colnames, \n        rowNames: rownames, \n        numberOfRows: info.data_frame.dimensions[0] \n    });\n}\n\nconst main_experiment_name = \"\";\n\nasync function extract_all_features(path, navigator) {\n    let extract_features = async se_meta => {\n        if (\"row_data\" in se_meta.summarized_experiment) {\n            let row_path = se_meta.summarized_experiment.row_data.resource.path;\n            return await load_data_frame(row_path, navigator);\n        } else {\n            return new bioc.DataFrame({}, { numberOfRows: se_meta.summarized_experiment.dimensions[0] });\n        }\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let output = {};\n    output[main_experiment_name] = await extract_features(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                output[alt.name] = await extract_features(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return output;\n}\n\nasync function extract_all_assay_names(path, navigator) {\n    let extract_assay_names = se_meta => {\n        let output = [];\n        for (const ass of se_meta.summarized_experiment.assays) {\n            output.push(ass.name);\n        }\n        return output;\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let assays = {};\n    assays[main_experiment_name] = extract_assay_names(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                assays[alt.name] = extract_assay_names(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return assays;\n}\n\n// This specifically loads the log-counts created by the dumper.\n// TODO: replace this with chihaya.js.\nasync function extract_logcounts(handle, navigator) {\n    if (handle.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (handle.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (Math.abs(handle.open(\"value\", { load: true }).values[0] - Math.log(2)) > 0.00000001) {\n        return null;\n    }\n    if (handle.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (handle.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n\n    let ghandle2 = handle.open(\"seed\");\n    if (ghandle2.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle2.readAttribute(\"delayed_operation\").values[0] !== \"unary math\") {\n        return null;\n    }\n    if (ghandle2.open(\"method\", { load: true }).values[0] !== \"log1p\") {\n        return null;\n    }\n\n    let ghandle3 = ghandle2.open(\"seed\");\n    if (ghandle3.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle3.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (ghandle3.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (ghandle3.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n    if (ghandle3.open(\"along\", { load: true }).values[0] !== 1) {\n        return null;\n    }\n    let sf = ghandle3.open(\"value\", { load: true }).values;\n\n    let ahandle = ghandle3.open(\"seed\");\n    if (ahandle.readAttribute(\"delayed_type\").values[0] !== \"array\") {\n        return null;\n    }\n    if (ahandle.readAttribute(\"delayed_array\").values[0] !== \"custom alabaster local array\") {\n        return null;\n    }\n    let path = ahandle.open(\"path\", { load: true }).values[0];\n\n    let mat;\n    let output = {};\n    try {\n        mat = await extract_assay_raw(path, navigator, false); // don't force it to be integer, but we don't mind if it is.\n        output.matrix = scran.logNormCounts(mat.matrix, { sizeFactors: sf, center: false });\n        output.row_ids = mat.row_ids;\n    } finally {\n        scran.free(mat.matrix);\n    }\n                \n    return output;\n}\n\nasync function extract_assay(meta, assay, navigator, forceInteger) {\n    if (typeof assay == \"string\") {\n        var counter = 0;\n        for (const ass of meta.summarized_experiment.assays) {\n            if (ass.name == assay) {\n                assay = counter;\n                break;\n            }\n            counter++;\n        }\n        if (counter == meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay '\" + assay + \"' not found\");\n        }\n    } else {\n        if (assay >= meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay \" + String(assay) + \" out of range\");\n        }\n    }\n\n    let asspath = meta.summarized_experiment.assays[assay].resource.path;\n    return extract_assay_raw(asspath, navigator, forceInteger);\n}\n\nasync function extract_assay_raw(asspath, navigator, forceInteger) {\n    let assmeta = await navigator.metadata(asspath);\n    let contents = await navigator.file(assmeta.path);\n    let output;\n\n    let schema = assmeta[\"$schema\"];\n    let is_dense = schema.startsWith(\"hdf5_dense_array/\");\n    let is_sparse = schema.startsWith(\"hdf5_sparse_matrix/\");\n\n    if (is_dense || is_sparse) {\n        let name = (is_sparse ?  assmeta.hdf5_sparse_matrix.group : assmeta.hdf5_dense_array.dataset);\n        let stuff = scran.realizeFile(contents);\n        try {\n            output = scran.initializeSparseMatrixFromHDF5(stuff.path, name, { forceInteger });\n        } finally {\n            stuff.flush();\n        }\n\n    } else if (assmeta[\"$schema\"].startsWith(\"hdf5_delayed_array/\")) {\n        let stuff = scran.realizeFile(contents);\n        try {\n            let fhandle = new scran.H5File(stuff.path);\n            let ghandle = fhandle.open(assmeta.hdf5_delayed_array.group);\n\n            // TODO: replace with calls to chihaya.js.\n            output = await extract_logcounts(ghandle, navigator);\n            if (output == null) {\n                throw new Error(\"currently only supporting bakana-generated log-counts for delayed arrays\");\n            }\n        } finally {\n            stuff.flush();\n        }\n\n    } else {\n        throw new Error(\"array schema '\" + assmeta[\"$schema\"] + \"' is currently not supported\");\n    }\n\n    return output;\n}\n\nasync function extract_other_data(other_path, navigator) {\n    let othermeta = await navigator.metadata(other_path);\n    if (!othermeta[\"$schema\"].startsWith(\"json_simple_list/\")) {\n        throw new Error(\"currently only support JSON-formatted lists in the 'other_data'\");\n    }\n\n    let contents = await navigator.file(othermeta.path);\n    let ofile = new afile.SimpleFile(contents, { name: \"list.json\" });\n    let unpacked = eutils.unpackText(ofile.buffer(), { compression: (othermeta.json_simple_list.compression == \"gzip\" ? \"gz\" : \"none\") });\n    let parsed = JSON.parse(unpacked);\n    return extract_list_data_internal(parsed);\n}\n\nfunction extract_list_data_internal(obj) {\n    if (!(\"type\" in obj)) {\n        throw new Error(\"non-standard JSON object for 'json_simple_list' schema\");\n    }\n\n    if (obj.type == \"number\") {\n        if (obj.values instanceof Array) {\n            let output = new Float64Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? Number.NaN : x) \n            });\n            return output;\n        } else {\n            return (obj.values == null ? Number.NaN : obj.values);\n        }\n\n    } else if (obj.type == \"integer\") {\n        if (obj.values instanceof Array) {\n            let output = new Int32Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? -2147483648 : x) \n            });\n            return output;\n        } else {\n            return obj.values;\n        }\n\n    } else if (obj.type == \"boolean\" || obj.type == \"string\") {\n        return obj.values;\n\n    } else if (obj.type == \"list\") {\n        if (\"names\" in obj) {\n            let output = {};\n            for (var i = 0; i < obj.values.length; i++) {\n                output[obj.names[i]] = extract_list_data_internal(obj.values[i]);\n            }\n            return output;\n        } else {\n            let output = [];\n            for (var i = 0; i < obj.values.length; i++) {\n                output.push(extract_list_data_internal(obj.values[i]));\n            }\n            return output;\n        }\n\n    } else if (obj.type == \"nothing\") {\n        return null;\n\n    } else {\n        console.warn(\"JSON simple list containing type '\" + obj.type + \"' is not yet supported\");\n        return null;\n    }\n}\n\n/***********************\n ******* Cacher ********\n ***********************/\n\n// As we'll be using the metadata often, we cache it at this level. This\n// removes the burden of caching on the implementation of the navigator. \nclass MetadataCacheWrapper {\n    #navigator;\n    #metadata_cache;\n\n    constructor(nav) {\n        this.#navigator = nav;\n        this.#metadata_cache = {};\n    }\n\n    clear() {\n        this.#metadata_cache = {};\n        if (\"clear\" in this.#navigator) {\n            this.#navigator.clear();\n        }\n    }\n\n    async metadata(path) {\n        if (path in this.#metadata_cache) {\n            return this.#metadata_cache[path];\n        } else {\n            let content = await this.#navigator.metadata(path);\n            this.#metadata_cache[path] = content;\n            return content;\n        }\n    }\n\n    file(path) {\n        return this.#navigator.file(path);\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n * Subclasses should define `abbreviate()` and `serialize()` methods, as well as the static `format()` and `unserialize()` methods - \n * see the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md) for more details.\n */\nexport class AbstractArtifactdbDataset {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbDataset.defaults();\n\n        // Don't call this.clear() here. We don't want to clear the navigator's\n        // cache at this point, as the navigator might contain some cached\n        // values when passed to the constructor. We should respect any caches\n        // until we're specifically told to discard it with clear() or cache =\n        // false in load() or summary().\n        this.#reset_local_caches();\n        return;\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            rnaCountAssay: 0, \n            adtCountAssay: 0, \n            crisprCountAssay: 0,\n            rnaExperiment: \"\", \n            adtExperiment: \"Antibody Capture\", \n            crisprExperiment: \"CRISPR Guide Capture\",\n            primaryRnaFeatureIdColumn: null, \n            primaryAdtFeatureIdColumn: null,\n            primaryCrisprFeatureIdColumn: null \n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbDataset#load load} (but not {@linkcode AbstractArtifactdbDataset#summary summary}).\n     * @param {string|number} [options.rnaCountAssay] - Name or index of the assay containing the RNA count matrix.\n     * @param {string|number} [options.adtCountAssay] - Name or index of the assay containing the ADT count matrix.\n     * @param {string|number} [options.crisprCountAssay] - Name or index of the assay containing the CRISPR count matrix.\n     * @param {?(string|number)} [options.rnaExperiment] - Name or index of the alternative experiment containing gene expression data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     * @param {?(string|number)} [options.adtExperiment] - Name or index of the alternative experiment containing ADT data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     * @param {?(string|number)} [options.crisprExperiment] - Name or index of the alternative experiment containing CRISPR guide data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     * @param {?(string|number)} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbDataset#load load} or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator)\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode AbstractArtifactdbDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n\n        let fmapping = {\n            RNA: this.#options.rnaExperiment, \n            ADT: this.#options.adtExperiment, \n            CRISPR: this.#options.crisprExperiment \n        };\n\n        let preview = futils.extractRemappedPrimaryIds(this.#raw_features, fmapping, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode AbstractArtifactdbDataset#defaults defaults} or with {@linkcode AbstractArtifactdbDataset#setOptions setOptions}.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            row_ids: {},\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#options.rnaExperiment, assay: this.#options.rnaCountAssay },\n            ADT: { exp: this.#options.adtExperiment, assay: this.#options.adtCountAssay },\n            CRISPR: { exp: this.#options.crisprExperiment, assay: this.#options.crisprCountAssay }\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let altmap = {};\n        let alts = [];\n        if (\"single_cell_experiment\" in full_meta) {\n            alts = full_meta.single_cell_experiment.alternative_experiments;\n            for (const alt of alts) {\n                altmap[alt.name] = alt.resource.path;\n            }\n        }\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let meta = null;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        meta = full_meta;\n                    } else {\n                        if (!(v.exp in altmap)) {\n                            continue;\n                        }\n                        meta = await this.#navigator.metadata(altmap[v.exp]);\n                    }\n                } else {\n                    if (v.exp >= alts.length) {\n                        continue;\n                    }\n                    name = alts[v.exp].name;\n                    meta = await this.#navigator.metadata(alts[v.exp].resource.path);\n                }\n\n                let loaded = await extract_assay(meta, v.assay, this.#navigator, true);\n                output.matrix.add(k, loaded.matrix);\n                let out_ids = loaded.row_ids;\n                output.row_ids[k] = out_ids;\n                output.features[k] = bioc.SLICE(this.#raw_features[name], out_ids);\n            }\n\n            output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentDatasetBase = AbstractArtifactdbDataset;\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n */\nexport class AbstractArtifactdbResult {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n    #raw_other;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbResult.defaults();\n\n        // Don't call clear() here, see comments above in the Dataset constructor.\n        this.#reset_local_caches();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbResults#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return { \n            primaryAssay: 0,\n            isPrimaryNormalized: true,\n            reducedDimensionNames: null\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbResult#load load} (but not {@linkcode AbstractArtifactdbResult#summary summary}.\n     * @param {object|string|number} [options.primaryAssay] - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     * @param {object|boolean} [options.isPrimaryNormalized] - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     * @param {?Array} [options.reducedDimensionNames] - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setOptions(options) {\n        // Cloning to avoid pass-by-reference links.\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = bioc.CLONE(v);\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#raw_other = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbResult#load load} or {@linkcode AbstractArtifactdbResult#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    async #other() {\n        if (this.#raw_other !== null) {\n            return;\n        }\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"other_data\" in full_meta.summarized_experiment) {\n            let other_path = full_meta.summarized_experiment.other_data.resource.path;\n            this.#raw_other = await extract_other_data(other_path, this.#navigator);\n        } else {\n            this.#raw_other = {};\n        }\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async \n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator),\n            reduced_dimension_names: [],\n            other_metadata: this.#raw_other\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta) {\n            for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                let redmeta = await this.#navigator.metadata(red.resource.path);\n                if (redmeta[\"$schema\"].startsWith(\"hdf5_dense_array/\") && redmeta.array.dimensions.length == 2) {\n                    output.reduced_dimension_names.push(red.name);\n                }\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {},\n            other_metadata: this.#raw_other\n        };\n\n        // Fetch the reduced dimensions first.\n        {\n            let reddims = this.#options.reducedDimensionNames;\n            if (reddims == null) {\n                reddims = [];\n                if (\"single_cell_experiment\" in full_meta) {\n                    for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                        reddims.push(red.name);\n                    }\n                }\n            }\n\n            if (reddims.length > 0) {\n                let redmap = {};\n                for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                    redmap[red.name] = red.resource.path;\n                }\n\n                for (const k of reddims) {\n                    let redmeta = await this.#navigator.metadata(redmap[k]); // this should be only HDF5 dense matrices.\n                    let dims = redmeta.array.dimensions;\n                    let redcontents = await this.#navigator.file(redmeta.path); \n\n                    let realized = scran.realizeFile(redcontents);\n                    let acquired = [];\n                    try {\n                        let fhandle = new scran.H5File(realized.path);\n                        let dhandle = fhandle.open(redmeta.hdf5_dense_array.dataset, { load: true });\n                        let contents = dhandle.values;\n                        for (var d = 0; d < dims[1]; d++) {\n                            acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n                        }\n                    } finally {\n                        realized.flush();\n                    }\n\n                    output.reduced_dimensions[k] = acquired;\n                }\n            }\n        }\n\n        // Now fetching the assay matrix.\n        {\n            let altmap = {};\n            if (\"single_cell_experiment\" in full_meta) {\n                for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n                    altmap[alt.name] = alt.resource.path;\n                }\n            }\n\n            try {\n                for (const [k, v] of Object.entries(this.#raw_features)) {\n                    let curassay = this.#options.primaryAssay;\n                    if (typeof curassay == \"object\") {\n                        if (k in curassay) {\n                            curassay = curassay[k];\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    let curnormalized = this.#options.isPrimaryNormalized;\n                    if (typeof curnormalized == \"object\") {\n                        if (k in curnormalized) {\n                            curnormalized = curnormalized[k];\n                        } else {\n                            curnormalized = true;\n                        }\n                    }\n\n                    let meta;\n                    if (k === \"\") {\n                        meta = full_meta;\n                    } else {\n                        meta = await this.#navigator.metadata(altmap[k]);\n                    }\n\n                    let loaded = await extract_assay(meta, curassay, this.#navigator, !curnormalized);\n                    output.matrix.add(k, loaded.matrix);\n\n                    if (!curnormalized) {\n                        let normed = scran.logNormCounts(loaded.matrix, { allowZeros: true });\n                        output.matrix.add(k, normed);\n                    }\n\n                    if (loaded.row_ids !== null) {\n                        output.features[k] = bioc.SLICE(this.#raw_features[k], loaded.row_ids);\n                    } else {\n                        output.features[k] = this.#raw_features[k];\n                    }\n                }\n\n            } catch (e) {\n                scran.free(output.matrix);\n                throw e;\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentResultBase = AbstractArtifactdbResult;\n","import * as adb from \"./ArtifactDB-abstract.js\";\nimport JSZip from \"jszip\";\nimport * as afile from \"./abstract/file.js\";\n\nclass ZippedProjectNavigator {\n    #zipfile;\n    #ziphandle;\n\n    constructor(zipfile, ziphandle) {\n        this.#zipfile = zipfile;\n        this.#ziphandle = null;\n    }\n\n    async file(path) {\n        if (this.#ziphandle == null) {\n            this.#ziphandle = await JSZip.loadAsync(this.#zipfile.buffer());\n        }\n        return await this.#ziphandle.file(path).async(\"uint8array\");\n    }\n\n    async metadata(path) {\n        if (this.#ziphandle == null) {\n            this.#ziphandle = await JSZip.loadAsync(this.#zipfile.buffer());\n        }\n\n        while (1) {\n            if (!path.endsWith(\".json\")) { \n                path += \".json\";\n            }\n\n            let contents = await this.#ziphandle.file(path).async(\"string\");\n            let values = JSON.parse(contents);\n\n            if (values[\"$schema\"].startsWith(\"redirection/\")){\n                path = values.redirection.targets[0].location;\n            } else {\n                return values;\n            }\n        }\n    }\n\n    clear() {\n        this.#ziphandle = null;\n    }\n};\n\n/**\n * Search a ZIP file for SummarizedExperiments to use in {@linkplain ZippedArtifactdbDataset} or {@linkplain ZippedArtifactdbResult}.\n *\n * @param {JSZip} handle - A handle into the ZIP file, generated using the [**JSZip**](https://stuk.github.io/jszip/) package.\n * \n * @return {Map} Object where the keys are the paths/names of possible SummarizedExperiment objects,\n * and each value is a 2-element array of dimensions.\n */\nexport async function searchZippedArtifactdb(handle) {\n    // Sorting by the number of slashes.\n    let all_json = [];\n    for (const name of Object.keys(handle.files)) {\n        if (name.endsWith(\".json\")) {\n            all_json.push({ name: name, path: name.split(\"/\") });\n        }\n    }\n    all_json.sort((a, b) => a.path.length - b.path.length);\n\n    let found_se = new Map;\n    let nonchildren = new Map;\n    let redirects = new Map;\n\n    for (const x of all_json) {\n        // Avoid loading JSONs for files in subdirectories of known SEs.\n        let current = found_se;\n        let already_found = false;\n\n        for (const comp of x.path) {\n            let val = current.get(comp);\n            if (typeof val === \"undefined\") {\n                val = new Map;\n                current.set(comp, val);\n            } else if (val === null) {\n                already_found = true;\n                break;\n            }\n            current = val;\n        }\n\n        // Otherwise, we load it in and peel out some information.\n        if (!already_found) {\n            let contents = await handle.file(x.name).async(\"string\");\n            let values = JSON.parse(contents);\n            if (\"summarized_experiment\" in values) {\n                nonchildren.set(values.path, values.summarized_experiment.dimensions);            \n            } else if (values[\"$schema\"].startsWith(\"redirection/\")) {\n                redirects.set(values.path, values.redirection.targets[0].location);\n            }\n        }\n    }\n\n    for (const [rr, loc] of redirects) {\n        let found = nonchildren.get(loc);\n        if (typeof found !== \"undefined\") {\n            nonchildren.delete(loc);\n            nonchildren.set(rr, found);\n        }\n    }\n\n    return nonchildren;\n}\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset as a ZIP file containing a SummarizedExperiment in the **ArtifactDB** representation,\n * e.g., as produced by {@linkcode saveSingleCellExperiment}.\n * Specifically, the ZIP file should contain the contents of an **ArtifactDB** project directory.\n * This project directory may contain multiple objects; the SummarizedExperiment of interest is identified in the constructor.\n *\n * @extends AbstractArtifactdbDataset\n */\nexport class ZippedArtifactdbDataset extends adb.AbstractArtifactdbDataset {\n    #zipfile;\n    #name;\n\n    /**\n     * @param {string} name - Name of the SummarizedExperiment object inside the project directory.\n     * @param {SimpleFile|string|File} zipfile - Contents of the ZIP file containing the project directory.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {object} [options={}] - Optional parameters. \n     * @param {?JSZip} [options.existingHandle=null] - An existing handle into the ZIP file, generated using the [**JSZip**](https://stuk.github.io/jszip/) package.\n     * If an existing handle already exists, passing it in here will allow it to be re-used for greater efficiency.\n     * If `null`, a new handle is created for this ZippedArtifactdbDataset instance.\n     */\n    constructor(name, zipfile, options={}) {\n        let ziphandle = null;\n        if (\"existingHandle\" in options) {\n            ziphandle = options.existingHandle;\n            delete options.existingHandle;\n        } else {\n            if (!(zipfile instanceof afile.SimpleFile)) {\n                zipfile = new afile.SimpleFile(zipfile);\n            }\n        }\n\n        let nav = new ZippedProjectNavigator(zipfile, ziphandle);\n        super(name, nav);\n        this.#zipfile = zipfile;\n        this.#name = name;\n    }\n\n    /**\n     * @return {string} String specifying the format for this dataset.\n     */\n    static format() {\n        return \"ArtifactDB-zipped\";\n    }\n\n    #dump_summary(fun) {\n        let files = [ { type: \"zip\", file: fun(this.#zipfile) } ]; \n        let opt = this.options();\n        opt.datasetName = this.#name; // storing the name as a special option... can't be bothered to store it as a separate file.\n        return { files: files, options: opt };\n\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { \n            return { size: f.size(), name: f.name() }\n        });\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode ZippedArtifactdbDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {ZippedArtifactdbDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"zip\") {\n            throw new Error(\"expected exactly one file of type 'zip' for Zipped ArtifactDB unserialization\");\n        }\n\n        let name = options.datasetName;\n        delete options.datasetName;\n        return new ZippedArtifactdbDataset(name, files[0].file, options);\n    }\n}\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Result as a ZIP file containing a SummarizedExperiment in the **ArtifactDB** representation,\n * e.g., as produced by {@linkcode saveSingleCellExperiment}.\n * Specifically, the ZIP file should contain the contents of an **ArtifactDB** project directory.\n * This project directory may contain multiple objects; the SummarizedExperiment of interest is identified in the constructor.\n *\n * @extends AbstractArtifactdbResult\n */\nexport class ZippedArtifactdbResult extends adb.AbstractArtifactdbResult {\n    /**\n     * @param {string} name - Name of the SummarizedExperiment object inside the project directory.\n     * @param {SimpleFile|string|File} zipfile - Contents of the ZIP file containing the project directory.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {object} [options={}] - Optional parameters. \n     * @param {?JSZip} [options.existingHandle=null] - An existing handle into the ZIP file, generated using the [**JSZip**](https://stuk.github.io/jszip/) package.\n     * If an existing handle already exists, passing it in here will allow it to be re-used for greater efficiency.\n     * If `null`, a new handle is created for this ZippedArtifactdbDataset instance.\n     */\n    constructor(name, zipfile, options={}) {\n        let ziphandle = null;\n        if (\"existingHandle\" in options) {\n            ziphandle = options.existingHandle;\n            delete options.existingHandle;\n        } else {\n            if (!(zipfile instanceof afile.SimpleFile)) {\n                zipfile = new afile.SimpleFile(zipfile);\n            }\n        }\n\n        let nav = new ZippedProjectNavigator(zipfile, ziphandle);\n        super(name, nav, options);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as iutils from \"../readers/index.js\";\nexport const step_name = \"inputs\";\n\nconst RAW_SUBSET_OVERRIDE = \"raw_subset_indices\";\n\n/**\n * This step handles the loading of all datasets into memory.\n * This wraps various matrix initialization functions in [**scran.js**](https://github.com/kanaverse/scran.js),\n * depending on the format of the supplied datasets.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class InputsState {\n    #parameters;\n    #cache;\n    #abbreviated;\n    #preserve_dataset_cache;\n\n    constructor(parameters = null, cache = null, abbreviated = null) {\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#abbreviated = (abbreviated === null ? {} : abbreviated);\n        this.#preserve_dataset_cache = false;\n        this.changed = false;\n        return;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.raw_matrix);\n        utils.freeCache(this.#cache.block_ids);\n        utils.freeCache(this.#cache.raw_block_ids);\n        utils.freeCache(this.#cache.multi_block_ids);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing counts for one or more modalities.\n     * Each modality is represented by a separate count matrix, where each row of the matrix represents a feature of that modality.\n     * All matrices have the same number and ordering of cells in their columns.\n     */\n    fetchCountMatrix() {\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a modality and each value is a {@linkplain external:DataFrame DataFrame}.\n     * Each row of the DataFrame corresponds to a feature in that modality \n     * (i.e., a row in the corresponding matrix from {@linkcode InputsState#fetchCountMatrix fetchCountMatrix})\n     * and each column represents a per-feature annotation field.\n     */\n    fetchFeatureAnnotations() {\n        return this.#cache.genes;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a modality and each value is an Int32Array.\n     * Each entry of an Int32Array specifies the identity of the corresponding row of its count matrix from {@linkcode InputsState#fetchCountMatrix fetchCountMatrix}.\n     */\n    fetchRowIds() {\n        return this.#cache.row_ids;\n    }\n\n    /**\n     * @return {external:DataFrame} {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * Each row of the DataFrame corresponds to a cell in {@linkcode InputsState#fetchCountMatrix fetchCountMatrix},\n     * and each column represents a per-cell annotation field.\n     *\n     * Note that this considers all cells in the dataset before QC filtering - \n     * see {@linkcode QualityControlState#applyFilter QualityControlState.applyFilter} to obtain a filtered version of each column.\n     */\n    fetchCellAnnotations() {\n        return this.#cache.annotations;\n    }\n\n    /**\n     * @return {?Int32Array} Array of length equal to the number of cells in the dataset,\n     * identifying the block to which each cell is assigned.\n     * Alternatively `null`, if no blocking is performed.\n     */\n    fetchBlock() {\n        return this.#cache.block_ids;\n    }\n\n    /**\n     * @return {?Array} Array of names of the blocks, or `null` if no blocking is performed.\n     */\n    fetchBlockLevels() {\n        return this.#cache.block_levels;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Cloning the parameters to avoid pass-by-reference behavior affecting the\n        // InputsState object. We don't pass the files back here.\n        let output = { ...this.#parameters };\n        output.subset = this.constructor.#cloneSubset(output.subset);\n        return output;\n    }\n\n    fetchDatasets() {\n        return this.#cache.datasets;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to return a copy of the subsets to avoid pass-by-reference behaviors.\n     *\n     * @return {?Int32Array} Array containing the indices to use for direct subsetting -\n     * see {@linkcode InputsState#setDirectSubset setDirectSubset} for more information.\n     * Alternatively `null`, if direct subsetting is not performed.\n     */\n    fetchDirectSubset({ copy = true } = {}) {\n        if (RAW_SUBSET_OVERRIDE in this.#cache) {\n            let candidate = this.#cache[RAW_SUBSET_OVERRIDE];\n            return (copy ? candidate.slice() : candidate);\n        } else {\n            return null;\n        }\n    }\n\n    guessRnaFeatureTypes() {\n        if (!(\"RNA\" in this.#cache.genes)) {\n            return null;\n        }\n\n        if (!(\"inferred_rna_types\" in this.#cache)) {\n            this.#cache.inferred_rna_types = utils.guessFeatureTypes(this.#cache.genes[\"RNA\"]);\n        }\n\n        return this.#cache.inferred_rna_types;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            block_factor: null,\n            subset: null\n        };\n    }\n\n    /**\n     * Allow each {@linkplain Dataset} reader (i.e., the `datasets` in {@linkcode InputsState#compute compute}) to cache any intermediate results during loading.\n     * By default, this is disabled as caching increases memory usage of the analysis without any major runtime improvements to `compute` when the `datasets` do not change.\n     *\n     * Setting `cache = true` is only useful if the instances in `datasets` are to be re-used outside of **bakana**, or if they are to be re-used in `compute()` in different combinations. \n     * In such cases, there may be a runtime improvement that warrants the increase in memory usage.\n     * If caching is used, the user is responsible for releasing cached resources via each instance's `clear()` method once they are no longer needed.\n     *\n     * @param {boolean} cache - Whether to allow {@linkplain Dataset} instances to cache their results.\n     */\n    enableDatasetCache(cache) {\n        this.#preserve_dataset_cache = cache;\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} datasets - An object containing data for one or more datasets.\n     * Each property corresponds to a single dataset and its value should satisfy the {@linkplain Dataset} contract.\n     * See the description of the argument of the same name in {@linkcode runAnalysis}.\n     * @param {object} parameters - Parameter object, equivalent to the `inputs` property of the `parameters` in {@linkcode runAnalysis}.\n     * @param {?string} parameters.block_factor - Name of the column of the cell annotations specifying the sample of origin for each cell.\n     * This is only used if a single count matrix is supplied.\n     *\n     * If `null`, all cells are assumed to originate from the same sample.\n     * @param {?subset} parameters.subset - Object describing if any pre-analysis subsetting should be applied.\n     * This should contain `field`, a string specifying a field of the column annotation.\n     *\n     * - For categorical variables, the object should also contain `values`, an array of allowed values for that annotation.\n     *   Cells are only retained if they are associated with any of the allowable values for that annotation field.\n     * - For continuous variables, the object should also contain `ranges`, an array of arrays.\n     *   Each inner array should contain two numbers defining the start and end of a range.\n     *   Ranges should be sorted and non-overlapping (boundaries excepted).\n     *\n     * If `subset` is `null`, no subsetting is performed and all cells are used in the downstream analysis.\n     *\n     * @return The object is updated with the new results.\n     * A promise is returned that resolves to `null` once input loading is complete - this should be resolved before any downstream steps are run.\n     */\n    async compute(datasets, parameters) {\n        let { block_factor, subset } = parameters;\n        this.changed = false;\n\n        // Don't bother proceeding with any of the below\n        // if we're operating from a reloaded state.\n        if (datasets !== null) {\n            let tmp_abbreviated = {};\n            for (const [key, val] of Object.entries(datasets)) {\n                tmp_abbreviated[key] = { format: val.constructor.format(), details: val.abbreviate() };\n            }\n\n            if (utils.changedParameters(tmp_abbreviated, this.#abbreviated)) {\n                await load_and_cache(datasets, this.#cache, this.#preserve_dataset_cache);\n                this.#abbreviated = tmp_abbreviated;\n                this.#cache.datasets = { ...datasets }; // making a deep-ish copy to avoid pass-by-reference links.\n                delete this.#cache.inferred_rna_types;\n                this.changed = true;\n            }\n        }\n\n        if (this.changed || this.#parameters.block_factor !== block_factor) {\n            block_and_cache(block_factor, this.#cache);\n            this.#parameters.block_factor = block_factor;\n            this.changed = true;\n        }\n\n        // final condition handles loss of 'matrix' when setDirectSubset() is called.\n        if (this.changed || (!(RAW_SUBSET_OVERRIDE in this.#cache) && utils.changedParameters(subset, this.#parameters.subset)) || !(\"matrix\" in this.#cache)) { \n            subset_and_cache(subset, this.#cache);\n            this.#parameters.subset = this.constructor.#cloneSubset(subset);\n            this.changed = true;\n        }\n\n        return null;\n    }\n\n    /******************************\n     ******** Subsetting **********\n     ******************************/\n\n    static #cloneSubset(subset) {\n        // We use a dedicated cloning function to handle Infs,\n        // as these get converted to nulls by the JSON stringify.\n        if (subset == null) {\n            return subset;\n        }\n\n        let clone = { ...subset };\n        if (\"values\" in clone) {\n            clone.values = clone.values.slice();\n        }\n\n        if (\"ranges\" in clone) {\n            clone.ranges = clone.ranges.map(x => x.slice());\n        }\n\n        return clone;\n    }\n\n    /**\n     * Undo the effect of subsetting on an array of indices.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the subsetted matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the pre-subsetted matrix.\n     */\n    undoSubset(indices) {\n        if (\"matrix\" in this.#cache) {\n            let max_index = this.fetchCountMatrix().numberOfColumns();\n            for (const x of indices) {\n                if (x < 0 || x >= max_index) {\n                    throw new Error(\"entries of 'indices' should be less than the number of cells in the dataset\");\n                }\n            }\n        }\n\n        // Setting the subset to null, if the parameter-level subset hasn't\n        // been set yet. This is because we might get indirectly called via\n        // setDirectSubset() before compute() has been run.\n        let subset = null;\n        if (\"subset\" in this.#parameters) {\n            subset = this.#parameters.subset;\n        }\n\n        let keep = harvest_subset_indices(subset, this.#cache);\n        if (keep !== null) {\n            indices.forEach((x, i) => { indices[i] = keep[x] });\n        }\n    }\n\n    #configureIndices(indices, copy, onOriginal) {\n        // scran.js's subset functions will pick up out-of-range indices.\n        utils.checkIndices(indices, null);\n\n        // We make a copy here to take ownership of the underlying memory,\n        // otherwise any edits in the caller would mutate the new InputsState's\n        // indices by reference.\n        if (copy) {\n            indices = indices.slice();\n        }\n\n        if (!onOriginal) {\n            this.undoSubset(indices);\n        }\n\n        return indices;\n    }\n\n    /**\n     * Unlike most of the other methods, `setDirectSubset` can be called on an InputsState before {@linkcode InputsState#compute compute}.\n     * This means that a user can create the state object from {@linkcode createAnalysis},\n     * specify a subset of cells via `setDirectSubset` on the (currently empty) InputsState object in `inputs`,\n     * and then call {@linkcode runAnalysis} to execute an analysis on the desired subset of cells.\n     * \n     * @param {TypedArray|Array} indices - Array containing the indices for the desired subset of cells.\n     * This should be sorted and non-duplicate.\n     * Any existing subset in this object will be overridden by `indices`.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `indices` before storing it inside the returned state object.\n     * If `false`, it is assumed that the caller makes no further use of the passed `indices`.\n     * @param {boolean} [options.onOriginal=false] - Whether `indices` contains indices on the original dataset or on the dataset in `state`.\n     * This distinction is only relevant if the current InputsState object already contains a specified subset.\n     * If `false`, the `indices` are assumed to refer to the already-subsetted dataset that exists in `state`;\n     * if `true`, the `indices` are assumed to refer to the original dataset from which the subset in `state` was created.\n     *\n     * @return The dataset in this InputsState object is subsetted to the desired `indices`.\n     */\n    setDirectSubset(indices, { copy = true, onOriginal = false } = {}) {\n        if (indices !== null) {\n            this.#cache[RAW_SUBSET_OVERRIDE] = this.#configureIndices(indices, copy, onOriginal);\n        } else {\n            delete this.#cache[RAW_SUBSET_OVERRIDE];            \n        }\n\n        // Flag that it needs to be rerun.\n        scran.free(this.#cache.matrix);\n        delete this.#cache.matrix;\n    }\n\n    createDirectSubset(indices, { copy = true, onOriginal = false } = {}) {\n        let new_cache = {};\n        new_cache[RAW_SUBSET_OVERRIDE] = this.#configureIndices(indices, copy, onOriginal);\n\n        // Need to manually copy everything in 'this.#cache' that is set in\n        // load_and_cache or block_and_cache.\n\n        // Making explicit clones to take ownership.\n        new_cache.raw_matrix = this.#cache.raw_matrix.clone();\n        for (const x of [ \"multi_block_ids\", \"raw_block_ids\" ]) {\n            if (x in this.#cache) {\n                if (this.#cache[x] === null) {\n                    new_cache[x] = null;\n                } else {\n                    new_cache[x] = this.#cache[x].clone();\n                }\n            }\n        }\n\n        // These can probably be copied directly, given that they are always\n        // replaced wholesale in the various *_and_cache functions, rather than\n        // being modified in-place.\n        for (const x of [ \"row_ids\", \"raw_annotations\", \"genes\", \"multi_block_levels\", \"raw_block_levels\" ]) {\n            if (x in this.#cache) {\n                new_cache[x] = this.#cache[x];\n            }\n        }\n\n        subset_and_cache(null, new_cache);\n\n        let new_params = this.fetchParameters();\n        new_params.subset = null;\n\n        return new InputsState(new_params, new_cache, this.#abbreviated);\n    }\n}\n\n/************************************\n ******* Internals - loading ********\n ************************************/\n\nconst known_modalities = [ \"RNA\", \"ADT\", \"CRISPR\" ];\n\nfunction bind_single_modality(modality, loaded) {\n    let output = {};\n\n    try {\n        let gnames = [];\n        let mats = [];\n        for (var i = 0; i < loaded.length; i++) {\n            mats.push(loaded[i].matrix.get(modality));\n\n            let primary_id = loaded[i].primary_ids[modality];\n            if (primary_id == null) {\n                throw new Error(\"modality '\" + modality + \"' lacks a primary identifier for dataset \" + String(i));\n            }\n            gnames.push(primary_id);\n        }\n\n        let merged = scran.cbindWithNames(mats, gnames);\n        output.matrix = merged.matrix;\n\n        // Extracting gene information from the first object. We won't make\n        // any attempt at merging and deduplication across objects.\n        output.features = bioc.SLICE(loaded[0].features[modality], merged.indices);\n        output.row_ids = bioc.SLICE(loaded[0].row_ids[modality], merged.indices);\n\n    } catch (e) {\n        utils.freeCache(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction bind_datasets(names, loaded) {\n    let common_modes = [];\n    for (const mod of known_modalities) {\n        let okay = true;\n        for (const l of loaded) {\n            if (!l.matrix.has(mod)) {\n                okay = false;\n                break;\n            }\n        }\n        if (okay) {\n            common_modes.push(mod);\n        }\n    }\n\n    if (common_modes.length == 0) {\n        throw new Error(\"failed to find common modalities across all datasets\");\n    }\n\n    let blocks;\n    let output = { \n        matrix: new scran.MultiMatrix, \n        features: {},\n        row_ids: {}\n    };\n\n    try {\n        for (const k of common_modes) {\n            let current = bind_single_modality(k, loaded);\n            output.matrix.add(k, current.matrix);\n            output.features[k] = current.features;\n            output.row_ids[k] = current.row_ids;\n        }\n\n        let annos = loaded.map(x => x.cells);\n        output.cells = bioc.flexibleCombineRows(annos);\n\n        // Generating a block vector.\n        let ncells = new Array(loaded.length);\n        loaded.forEach((x, i) => { ncells[i] = x.matrix.numberOfColumns(); });\n        blocks = scran.createBlock(ncells);\n        output.block_ids = blocks;\n        output.block_levels = names;\n\n        let nice_barr = new Array(blocks.length);\n        blocks.forEach((x, i) => { nice_barr[i] = names[x]; })\n        output.cells.$setColumn(\"__batch__\", nice_barr);\n\n    } catch (e) {\n        utils.freeCache(blocks);\n        utils.freeCache(output.matrix);\n        throw e;\n    } \n\n    return output;\n}\n\nfunction rename_dataset(single) {\n    let modalities = single.matrix.available();\n    if (modalities.length == 0) {\n        throw new Error(\"\");\n    }\n\n    let output = { \n        matrix: new scran.MultiMatrix, \n        features: {},\n        row_ids: {}\n    };\n\n    try {\n        for (const k of known_modalities) {\n            if (!single.matrix.has(k)) {\n                continue;\n            }\n\n            output.matrix.add(k, single.matrix.get(k));\n            output.features[k] = single.features[k];\n            output.row_ids[k] = single.row_ids[k];\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    output.cells = single.cells;\n    output.block_ids = null;\n    output.block_levels = null;\n\n    return output;\n}\n\nasync function load_datasets(datasets, preserve_dataset_cache) {\n    // Ensure we have a reproducible order; otherwise the batch\n    // order becomes dependent on the JS engine's ordering.\n    let names = Object.keys(datasets);\n    names.sort();\n\n    let loaded = [];\n    try {\n        for (const key of names) {\n            // Too much hassle to convert this into a Promise.all(), because we\n            // need to make sure it gets freed properly on failure.\n            loaded.push(await datasets[key].load({ cache: preserve_dataset_cache }));\n        }\n    } catch (e) {\n        // If any one fails, we free the rest.\n        for (const x of loaded) {\n            scran.free(x.matrix);\n        }\n        throw e;\n    }\n\n    let output;\n    if (names.length == 1) {\n        try {\n            output = rename_dataset(loaded[0]);\n        } catch (e) {\n            scran.free(loaded[0].matrix);\n            throw e;\n        }\n    } else {\n        try {\n            output = bind_datasets(names, loaded);\n        } finally {\n            // No need to hold references to the individual matrices once the\n            // binding is complete, so we release them.\n             for (const x of loaded) {\n                scran.free(x.matrix);\n            }\n        }\n    }\n\n    return output;\n}\n\n/******************************************\n ******* Internals - miscellaneous ********\n ******************************************/\n\nconst invalid_block_id = -1;\n\nfunction harvest_subset_indices(subset, cache) {\n    let keep;\n\n    if (RAW_SUBSET_OVERRIDE in cache) {\n        keep = cache[RAW_SUBSET_OVERRIDE];\n    } else if (subset == null) {\n        keep = null;\n    } else {\n        if (!cache.raw_annotations.hasColumn(subset.field)) {\n            throw new Error(\"failed to find '\" + subset.field + \"' in the column annotations\");\n        }\n\n        let anno = cache.raw_annotations.column(subset.field);\n        keep = [];\n\n        if (\"values\" in subset) {\n            let allowed = new Set(subset.values);\n            anno.forEach((x, i) => {\n                if (allowed.has(x)) {\n                    keep.push(i);\n                }\n            });\n        } else {\n            // Check each entry to see whether it belongs to the range.\n            // This is cheaper than sorting anything, assuming there \n            // aren't that many ranges.\n            anno.forEach((x, i) => {\n                for (const r of subset.ranges) {\n                    if (x >= r[0] && x <= r[1]) {\n                        keep.push(i);\n                        return;\n                    }\n                }\n            });\n        }\n    }\n\n    // Filter out invalid block IDs. Note that this might get called\n    // before compute() is run (via undoSubset), so we need to protect\n    // against the case where the raw_block_ids has not been set yet.\n    if (\"raw_block_ids\" in cache && cache.raw_block_ids !== null) {\n        let bids = cache.raw_block_ids.array();\n\n        let keep2 = [];\n        if (keep !== null) {\n            for (const i of keep) {\n                if (bids[i] !== invalid_block_id) {\n                    keep2.push(i);\n                }\n            }\n        } else {\n            for (var i = 0; i < bids.length; i++) {\n                if (bids[i] !== invalid_block_id) {\n                    keep2.push(i);\n                }\n            }\n        }\n        keep = keep2;\n    }\n\n    return keep;\n}\n\nfunction check_subset_ranges(ranges) { \n    if (ranges.length % 2 !== 0) {\n        throw new Error(\"'ranges' should have two columns in 'subset'\");\n    }\n    for (var i = 1; i < ranges.length; i++) {\n        if (ranges[i] < ranges[i-1]) {\n            throw new Error(\"'ranges' should be sorted in increasing order\");\n        }\n    }\n}\n\n/************************************\n ******* Internals - caching ********\n ************************************/\n\nasync function load_and_cache(new_datasets, cache, preserve_dataset_cache) {\n    utils.freeCache(cache.raw_matrix);\n    utils.freeCache(cache.matrix); // freeing this as well, to release all references and potentially release memory.\n    utils.freeCache(cache.multi_block_ids);\n\n    let res = await load_datasets(new_datasets, preserve_dataset_cache);\n    cache.raw_matrix = res.matrix;\n    cache.row_ids = res.row_ids;\n    cache.raw_annotations = res.cells;\n    cache.multi_block_ids = res.block_ids;\n    cache.multi_block_levels = res.block_levels;\n    cache.genes = res.features;\n}\n\nfunction block_and_cache(block_factor, cache) {\n    utils.freeCache(cache.raw_block_ids);\n\n    let blocks = null;\n    let block_levels = null;\n\n    if (block_factor !== null) {\n        // Single matrix with a batch factor.\n        try {\n            let anno_batch = cache.raw_annotations.column(block_factor);\n            if (anno_batch.length != cache.raw_matrix.numberOfColumns()) {\n                throw new Error(\"length of blocking factor '\" + block_factor + \"' should be equal to the number of cells\"); \n            }\n            let converted = scran.factorize(anno_batch, { action: \"none\", placeholder: invalid_block_id });\n            blocks = converted.ids;\n            block_levels = converted.levels;\n        } catch (e) {\n            utils.freeCache(blocks);\n            throw e;\n        }\n    } else {\n        if (cache.multi_block_ids !== null) { \n            // Creating a view so that freeing of this object is a no-op.\n            // We're downstream of load_and_cache so any freeing of\n            // multi_block_ids would require block_and_cache to rerun\n            // anyway, so we don't have to worry about invalidation.\n            blocks = cache.multi_block_ids.view();\n        } else {\n            blocks = null;\n        }\n        block_levels = cache.multi_block_levels;\n    }\n\n    cache.raw_block_ids = blocks;\n    cache.raw_block_levels = block_levels;\n}\n\nfunction subset_and_cache(subset, cache) {\n    utils.freeCache(cache.matrix);\n    utils.freeCache(cache.block_ids);\n\n    let keep = harvest_subset_indices(subset, cache);\n\n    let new_annotations;\n    let new_matrix;\n    let new_block_ids;\n    let new_block_levels;\n\n    try {\n        if (keep === null) {\n            new_annotations = cache.raw_annotations;\n\n            // Need to make a clone so that it can be freed independently of the original.\n            // This is cheap as only the shared pointer is cloned, not the underlying data.\n            new_matrix = cache.raw_matrix.clone();\n\n            if (cache.raw_block_ids !== null) {\n                // A view also works, given that we're downstream of the generating\n                // process for raw_block_ids and thus our lifetime is always tied to it.\n                new_block_ids = cache.raw_block_ids.view();\n                new_block_levels = cache.raw_block_levels;\n            } else {\n                new_block_ids = null;\n                new_block_levels = null;\n            }\n\n        } else {\n            new_annotations = bioc.SLICE(cache.raw_annotations, keep);\n\n            if (cache.raw_block_ids !== null) {\n                new_block_ids = scran.subsetBlock(cache.raw_block_ids, keep);\n                let dropped = scran.dropUnusedBlock(new_block_ids);\n                new_block_levels = dropped.map(x => cache.raw_block_levels[x]);\n            } else {\n                new_block_ids = null;\n                new_block_levels = null;\n            }\n\n            new_matrix = new scran.MultiMatrix;\n            for (const key of cache.raw_matrix.available()) {\n                let current = cache.raw_matrix.get(key);\n                new_matrix.add(key, scran.subsetColumns(current, keep));\n            }\n        }\n\n    } catch (e) {\n        utils.freeCache(new_matrix);\n        utils.freeCache(new_block_ids);\n        throw e;\n    }\n\n    cache.annotations = new_annotations;\n    cache.block_levels = new_block_levels;\n    cache.block_ids = new_block_ids;\n    cache.matrix = new_matrix;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function updateRowIdentities(current, old) {\n    if (current.length == old.length) {\n        if (current.every((x, i) => x == old[i])) {\n            return y => y;\n        }\n    }\n\n    let mapping = {};\n    old.forEach((x, i) => {\n        mapping[x] = i;\n    });\n\n    let perm = new Int32Array(current.length);\n    current.forEach((x, i) => {\n        if (x in mapping) {\n            perm[i] = mapping[x];\n        } else {\n            perm[i] = -1;\n        }\n    });\n\n    return y => {\n        let copy = new y.constructor(perm.length);\n        perm.forEach((i, j) => {\n            if (i == -1) {\n                if (copy instanceof Array) {\n                    copy[j] = null;\n                } else if (copy instanceof Float64Array) {\n                    copy[j] = Number.NaN;\n                } else {\n                    copy[j] = -1; // dunno what else to do here.\n                }\n            } else {\n                copy[j] = y[i];\n            }\n        });\n        return copy;\n    };\n}\n\nfunction extract_serialized_files(handle) {\n    let kids = handle.children;\n    let all_files = new Array(kids.length);\n\n    for (const x of Object.keys(kids)) {\n        let current = handle.open(x);\n\n        let curfile = {};\n        for (const field of [\"type\", \"name\"]) {\n            let dhandle = current.open(field, { load: true });\n            curfile[field] = dhandle.values[0];\n        }\n\n        if (\"id\" in current.children) {\n            curfile.id = current.open(\"id\", { load: true }).values[0];\n        } else {\n            for (const field of [\"offset\", \"size\"]) {\n                curfile[field] = current.open(field, { load: true }).values[0];\n            }\n        }\n\n        let idx = Number(x);\n        all_files[idx] = curfile;\n    }\n\n    return all_files;\n}\n\nasync function unserialize_Dataset(format, all_files, all_options, loader) {\n    if (!(format in iutils.availableReaders)) {\n        throw new Error(\"unknown format '\" + format + \"' during unserialization\");\n    }\n    let cls = iutils.availableReaders[format];\n\n    let handles = [];\n    for (const f of all_files) {\n        let b;\n        if (loader == null) {\n            if (link2file == null) {\n                throw new Error(\"no valid linking function from 'setResolveLink'\");\n            }\n            b = await link2file(f.id);\n        } else {\n            b = await loader(f.offset, f.size);\n        }\n        let handle = new iutils.SimpleFile(b, { name: f.name }) \n        handles.push({ type: f.type, file: handle });\n    }\n\n    return await cls.unserialize(handles, all_options);\n}\n\nexport async function unserialize(handle, embeddedLoader) {\n    let ghandle = handle.open(\"inputs\");\n    let phandle = ghandle.open(\"parameters\");\n\n    let readers = {};\n    let parameters = { block_factor: null };\n    let solofile = false; // legacy argument.\n\n    if (\"datasets\" in phandle.children) {\n        let dhandle = phandle.open(\"datasets\");\n        for (const k of Object.keys(dhandle.children)) {\n            let curdhandle = dhandle.open(k);\n            let format = curdhandle.open(\"format\", { load: true }).values[0];\n            let name = curdhandle.open(\"name\", { load: true }).values[0];\n\n            let fihandle = curdhandle.open(\"files\");\n            let curfiles = extract_serialized_files(fihandle);\n\n            let options = {};\n            if (\"options\" in curdhandle.children) {\n                options = JSON.parse(curdhandle.open(\"options\", { load: true }).values[0]);\n            }\n\n            readers[name] = await unserialize_Dataset(format, curfiles, options, embeddedLoader);\n        }\n\n        if (\"block_factor\" in phandle.children) {\n            parameters.block_factor = phandle.open(\"block_factor\", { load: true }).values[0];\n        }\n\n    } else {\n        // Extracting the files.\n        let fihandle = phandle.open(\"files\");\n        let all_files = extract_serialized_files(fihandle);\n\n        // Extracting the format and organizing the files.\n        let fohandle = phandle.open(\"format\", { load: true });\n        solofile = (fohandle.shape.length == 0);\n\n        if (solofile) {\n            let format = fohandle.values[0];\n            readers[\"default\"] = await unserialize_Dataset(format, all_files, {}, embeddedLoader);\n            if (\"sample_factor\" in phandle.children) {\n                parameters.block_factor = phandle.open(\"sample_factor\", { load: true }).values[0];\n            }\n\n        } else {\n            let formats = fohandle.values;\n            let sample_names = phandle.open(\"sample_names\", { load: true }).values;\n            let sample_groups = phandle.open(\"sample_groups\", { load: true }).values;\n\n            let sofar = 0;\n            for (var i = 0; i < formats.length; i++) {\n                let start = sofar;\n                sofar += sample_groups[i];\n                let curfiles = all_files.slice(start, sofar);\n                let format = formats[i];\n                readers[sample_names[i]] = await unserialize_Dataset(format, curfiles, {}, embeddedLoader);\n            }\n        }\n    }\n\n    // Figuring out the subset.\n    let subset = null;\n    let raw_indices = null;\n    if (\"subset\" in phandle.children) {\n        let shandle = phandle.open(\"subset\");\n\n        if (\"cells\" in shandle.children) {\n            let schandle = shandle.open(\"cells\");\n            if (\"indices\" in schandle.children) {\n                raw_indices = schandle.open(\"indices\", { load: true }).values;\n            } else if (\"field\" in schandle.children) {\n                subset = { field: schandle.open(\"field\", { load: true }).values[0] };\n\n                if (\"values\" in schandle.children) {\n                    subset.values = schandle.open(\"values\", { load: true }).values;\n                } else {\n                    let ranges = schandle.open(\"ranges\", { load: true }).values;\n                    check_subset_ranges(ranges);\n                    let reranges = [];\n                    for (var i = 0; i < ranges.length/2; i++) {\n                        reranges.push([ ranges[2*i], ranges[2*i + 1] ]);\n                    }\n                    subset.ranges = reranges;\n                }\n            } else {\n                throw new Error(\"unrecognized specification for 'subset'\");\n            }\n        }\n    }\n\n    parameters.subset = subset;\n\n    // Loading matrix data.\n    let cache = { readers: readers };\n    await load_and_cache(readers, cache);\n    block_and_cache(parameters.block_factor, cache);\n\n    if (raw_indices !== null) {\n        cache[RAW_SUBSET_OVERRIDE] = raw_indices;\n    }\n    subset_and_cache(parameters.subset, cache);\n\n    // We need to do something if the permutation is not the same.\n    let rhandle = ghandle.open(\"results\");\n    let perm = {};\n\n    if (\"feature_identities\" in rhandle.children) { \n        // v3.0\n        let ihandle = rhandle.open(\"feature_identities\");\n        for (const a of Object.keys(ihandle.children)) {\n            if (cache.matrix.has(a)) {\n                let dhandle = ihandle.open(a, { load: true });\n                perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n            }\n        }\n    } else {\n        if (solofile) {\n            if (\"permutation\" in rhandle.children) {\n                // v1.0-v1.1\n                let dhandle = rhandle.open(\"permutation\", { load: true });\n                let ids = new Int32Array(dhandle.values.length);\n                dhandle.values.forEach((x, i) => { ids[x] = i; });\n                perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], ids);\n            } else if (\"identities\" in rhandle.children) {\n                if (rhandle.children[\"identities\"] == \"DataSet\") {\n                    // v1.2\n                    let dhandle = rhandle.open(\"identities\", { load: true });\n                    perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], dhandle.values);\n                } else {\n                    // v2.0\n                    let ihandle = rhandle.open(\"identities\");\n                    for (const a of Object.keys(ihandle.children)) {\n                        if (cache.matrix.has(a)) {\n                            let dhandle = ihandle.open(a, { load: true });\n                            perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n                        }\n                    }\n                }\n            } else {\n                // Otherwise, we're dealing with v0 states. We'll just\n                // assume it was the same, I guess. Should be fine as we didn't change\n                // the permutation code in v0.\n            }\n        } else {\n            let old_ids;\n            if (\"indices\" in rhandle.children) {\n                // v1.1\n                old_ids = rhandle.open(\"indices\", { load: true }).values;\n\n                let ref = cache.row_ids[\"RNA\"].slice().sort();\n                let old_ids2 = old_ids.slice().sort();\n                for (var i = 0; i < old_ids2.length; i++) {\n                    if (ref[i] != old_ids2[i]) {\n                        console.log([i, ref[i], old_ids2[i]]);\n                        break;\n                    }\n                }\n                perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], old_ids);\n            } else {\n                if (rhandle.children[\"identities\"] == \"DataSet\") {\n                    // v1.2+\n                    old_ids = rhandle.open(\"identities\", { load: true }).values;\n                    perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], old_ids);\n                } else {\n                    // v2.0\n                    let ihandle = rhandle.open(\"identities\");\n                    for (const a of Object.keys(ihandle.children)) {\n                        if (cache.matrix.has(a)) {\n                            let dhandle = ihandle.open(a, { load: true });\n                            perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Any missing modalities, for whatever reason.\n    for (const a of cache.matrix.available()) {\n        if (!(a in perm)) {\n            perm[a] = y => y;\n        }\n    }\n\n    /*\n     * We could try to construct 'abbreviated', but there isn't really\n     * any point because callers are expected to set 'datasets = null'\n     * in their calls to 'compute()' on an unserialized analysis, so \n     * any setting of '#abbreviated' wouldn't even get used.\n     */\n\n    return { \n        state: new InputsState(parameters, cache),\n        permuters: perm\n    };\n}\n\n/**************************\n ******** Linking *********\n **************************/\n\nvar file2link = null;\nvar link2file = null;\n\n/**\n * Specify a function to create links for data files.\n *\n * @param {function} fun - Function that accepts:\n *\n * - `format`: the string containing the format of the dataset that owns the file.\n * - `file`: a {@linkplain SimpleFile} representing the file contents.\n *\n * It should return a string containing some unique identifier to the file.\n * This is most typically used to register the file with some user-specified database system for later retrieval.\n *\n * @return `fun` is set as the global link creator for this step. \n * The _previous_ value of the creator is returned.\n */\nexport function setCreateLink(fun) {\n    let previous = file2link;\n    file2link = fun;\n    return previous;\n}\n\n/**\n * Specify a function to resolve links for data files.\n *\n * @param {function} fun - Function that accepts a string containing a linking idenfier and returns any value that can be used in the {@linkplain SimpleFile} constructor\n * i.e., a Uint8Array, File (on browser) or string containing a file path (on Node.js).\n * This is most typically used to retrieve a file from some user-specified database system.\n *\n * @return `fun` is set as the global resolver for this step. \n * The _previous_ value of the resolver is returned.\n */\nexport function setResolveLink(fun) {\n    let previous = link2file;\n    link2file = fun;\n    return previous;\n}\n","import * as scran from \"scran.js\"; \nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as rutils from \"../readers/index.js\";\n\nconst baseUrl = \"https://github.com/kanaverse/kana-special-features/releases/download/v1.0.0\";\n\nexport const step_name = \"rna_quality_control\";\n\n/**\n * Results of computing per-cell RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellRnaQcMetricsResults.html) for details.\n *\n * @external PerCellRnaQcMetricsResults\n */\n\n/**\n * Suggested filters for the RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestRnaQcFiltersResults.html) for details.\n *\n * @external SuggestRnaQcFiltersResults\n */\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellRnaQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellRnaQcMetrics)\n * and [`suggestRnaQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestRnaQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n    #automatic;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#automatic = false;\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        output.species = bioc.CLONE(output.species);\n        return output;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:SuggestRnaQcFiltersResults} Result of filtering on the RNA-derived QC metrics.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {external:PerCellRnaQcMetricsResults} RNA-derived QC metrics.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults () {\n        return {\n            automatic: true,\n            gene_id_column: null,\n            use_reference_mito: true,\n            species: [],\n            gene_id_type: \"ENSEMBL\",\n            mito_prefix: \"mt-\",\n            nmads: 3\n        };\n    }\n\n    static configureFeatureParameters(use_reference_mito, guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Array of strings containing the taxonomy IDs for species where mitochondrial gene lists are available.\n     * @type {Array}\n     */\n    static mitochondriaSpecies = [ \n        \"9606\",  // Mouse\n        \"10090\", // Human\n        \"6239\",  // C. elegans\n        \"10116\", // Rat\n        \"9541\",  // M. fascicularis\n        \"7227\",  // Fly\n        \"7955\",  // Zebrafish\n        \"9598\"   // Chimp\n    ];\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #acquire_reference(species, feature_type) {\n        let output = new Set;\n        let mito_lists = RnaQualityControlState.#mito_lists;\n\n        for (const s of species) {\n            let target = s + \"-mito-\" + feature_type.toLowerCase() + \".txt.gz\";\n            if (!(target in mito_lists)) {\n                let contents = await RnaQualityControlState.#downloadFun(baseUrl + \"/\" + target);\n                let lines = await rutils.readLines2(contents, { compression: \"gz\" });\n                mito_lists[target] = lines;\n            }\n\n            mito_lists[target].forEach(x => { output.add(x); });\n        }\n\n        return output;\n    }\n\n    static #mito_lists = {};\n\n    /**\n     * Flush all cached lists of mitochondrial genes.\n     *\n     * By default, {@linkcode RnaQualityControlState#compute compute} will cache the mitochondrial gene lists in a static member for re-use across {@linkplain RnaQualityControlState} instances.\n     * These cached lists are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        RnaQualityControlState.#mito_lists = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download the reference mitochondrial gene lists.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = RnaQualityControlState.#downloadFun;\n        RnaQualityControlState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If set to `true`, the following logic is applied:\n     *\n     * - If `use_reference_mito = true`, the annotation column that best matches human/mouse Ensembl/symbols is set as `gene_id_column`.\n     *   Based on the identified species and feature type, `species` and `gene_id_type` are also set.\n     * - If `use_reference_mito = false`, the annotation column that best matches human/mouse symbols is set as `gene_id_column`.\n     *\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the feature annotations that contains the gene identifiers for the RNA modality.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {boolean} parameters.use_reference_mito - Whether to use the reference lists of mitochondrial genes.\n     * If `false`, mitochondrial genes are instead identified from their prefix.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species to use to obtain a reference list of mitochondrial genes.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode RnaQualityControlState#mitochondriaSpecies mitochondriaSpecies}).\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Name of the feature type in the reference list of mitochondrial genes.\n     * This can be any one of `\"ENSEMBL\"`, `\"SYMBOL\"`, or `\"ENTREZ\"`.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.mito_prefix - Case-insensitive prefix to use to identify mitochondrial genes from the dataset.\n     * Only used when `use_reference_mito = false`; in such cases, `gene_id_column` should point to symbols.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let { mito_prefix, nmads } = parameters;\n        let automatic;\n        let use_reference_mito;\n        let gene_id_column;\n        let species;\n        let gene_id_type;\n\n        // Some back-compatibility here.\n        if (\"use_reference_mito\" in parameters) {\n            automatic = parameters.automatic;\n            use_reference_mito = parameters.use_reference_mito;\n            gene_id_column = parameters.gene_id_column;\n            species = parameters.species;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            automatic = true;\n            use_reference_mito = parameters.use_mito_default;\n            let def = RnaQualityControlState.defaults();\n            gene_id_column = def.gene_id_column;\n            species = def.species;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            use_reference_mito !== this.#parameters.use_reference_mito || \n            (\n                !automatic && \n                (\n                    gene_id_column !== this.#parameters.gene_id_column || \n                    (!use_reference_mito && mito_prefix !== this.#parameters.mito_prefix) ||\n                    (\n                        use_reference_mito && \n                        (\n                            utils.changedParameters(species, this.#parameters.species) || \n                            gene_id_type !== this.#parameters.gene_id_type\n                        )\n                    )\n                )\n            ) \n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                let gene_id_column2 = gene_id_column;\n                let species2 = species;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let backcomp = RnaQualityControlState.configureFeatureParameters(use_reference_mito, guesses);\n                    gene_id_column2 = backcomp.gene_id_column;\n                    species2 = backcomp.species;\n                    gene_id_type2 = backcomp.gene_id_type;\n                }\n\n                var gene_info = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let val = (gene_id_column2 == null ? gene_info.rowNames() : gene_info.column(gene_id_column2));\n                var subsets = utils.allocateCachedArray(gene_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (val !== null) {\n                    if (use_reference_mito) {\n                        let lists = await this.#acquire_reference(species2, gene_id_type2);\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if (lists.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else if (mito_prefix !== null) {\n                        var lower_mito = mito_prefix.toLowerCase();\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"RNA\");\n                this.#cache.metrics = scran.perCellRnaQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.use_reference_mito = use_reference_mito;\n        this.#parameters.species = bioc.CLONE(species); // avoid pass-by-reference behavior.\n        this.#parameters.gene_id_type = gene_id_type;\n        this.#parameters.mito_prefix = mito_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestRnaQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let ghandle = handle.open(\"rna_quality_control\" in handle.children ? \"rna_quality_control\" : \"quality_control\");\n\n    let parameters = RnaQualityControlState.defaults(); \n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.use_mito_default = phandle.open(\"use_mito_default\", { load: true }).values[0] > 0;\n        parameters.mito_prefix = phandle.open(\"mito_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n    }\n\n    let output;\n    let cache = {};\n    try {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"metrics\" in rhandle.children) { // QC metrics may not be reported if skipped.\n            let mhandle = rhandle.open(\"metrics\");\n            let sums = mhandle.open(\"sums\", { load: true }).values;\n\n            cache.metrics = scran.emptyPerCellRnaQcMetricsResults(sums.length, 1);\n            cache.metrics.sums({ fillable: true }).set(sums);\n\n            let detected = mhandle.open(\"detected\", { load: true }).values;\n            cache.metrics.detected({ fillable: true }).set(detected);\n            let proportions = mhandle.open(\"proportion\", { load: true }).values;\n            cache.metrics.subsetProportions(0, { fillable: true }).set(proportions);\n        }\n\n        if (\"thresholds\" in rhandle.children) { // if skip=true, QC thresholds may not be reported.\n            let discards = rhandle.open(\"discards\", { load: true }).values; \n            cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n            cache.discard_buffer.set(discards);\n\n            let thandle = rhandle.open(\"thresholds\");\n            let thresholds_sums = thandle.open(\"sums\", { load: true }).values;\n            let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n            let thresholds_proportion = thandle.open(\"proportion\", { load: true }).values;\n\n            cache.filters = scran.emptySuggestRnaQcFiltersResults(1, thresholds_sums.length);\n            cache.filters.thresholdsSums({ fillable: true }).set(thresholds_sums);\n            cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n            cache.filters.thresholdsSubsetProportions(0, { fillable: true }).set(thresholds_proportion);\n        }\n\n        output = new RnaQualityControlState(inputs, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.metrics);\n        utils.freeCache(cache.filters)\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * Results of computing per-cell ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellAdtQcMetricsResults.html) for details.\n *\n * @external PerCellAdtQcMetricsResults\n */\n\n/**\n * Suggested filters for the ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestAdtQcFiltersResults.html) for details.\n *\n * @external SuggestAdtQcFiltersResults\n */\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellAdtQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellAdtQcMetrics)\n * and [`suggestAdtQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestAdtQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"ADT\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestAdtQcFiltersResults} Result of filtering on the ADT-derived QC metrics.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellAdtQcMetricsResults} ADT-derived QC metrics,\n     * available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            automatic: true,\n            tag_id_column: null,\n            igg_prefix: \"IgG\",\n            nmads: 3,\n            min_detected_drop: 0.1\n        };\n    }\n\n    static configureFeatureParameters(lower_igg, annotations) {\n        let counter = val => {\n            let n = 0;\n            val.forEach(x => {\n                if (x.toLowerCase().startsWith(lower_igg)) {\n                    n++;\n                }\n            });\n            return n;\n        };\n\n        let best_key = null;\n        let best = 0;\n\n        let rn = annotations.rowNames();\n        if (rn !== null) {\n            best = counter(rn);\n        }\n\n        for (const key of annotations.columnNames()) {\n            let latest = counter(annotations.column(key));\n            if (latest > best) {\n                best_key = key;\n                best = latest;\n            }\n        }\n\n        return best_key;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * \n     * @param {object} parameters - Parameter object, equivalent to the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotations. \n     * Specifically, `tag_id_column` is set to the column with the most matches to `igg_prefix`.\n     * @param {?(string|number)} parameters.tag_id_column - Name or index of the column of the feature annotations that contains the tag identifiers.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.igg_prefix - Prefix of the identifiers for isotype controls.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * @param {number} parameters.min_detected_drop - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { igg_prefix, nmads, min_detected_drop } = parameters;\n        this.changed = false;\n\n        let automatic;\n        let tag_id_column; \n        if (\"automatic\" in parameters) {\n            automatic = parameters.automatic;\n            tag_id_column = parameters.tag_id_column;\n        } else {\n            automatic = true;\n            tag_id_column = null;\n        }\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            igg_prefix !== this.#parameters.igg_prefix ||\n            (!automatic && tag_id_column !== this.#parameters.tag_id_column)\n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var tag_info = this.#inputs.fetchFeatureAnnotations()[\"ADT\"];\n                var subsets = utils.allocateCachedArray(tag_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (igg_prefix !== null) {\n                    var lower_igg = igg_prefix.toLowerCase();\n                    let key = tag_id_column;\n                    if (automatic) {\n                        key = AdtQualityControlState.configureFeatureParameters(lower_igg, tag_info);\n                    }\n\n                    let val = (key == null ? tag_info.rowNames() : tag_info.column(key));\n                    if (val !== null) {\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => { \n                            if (x.toLowerCase().startsWith(lower_igg)) {\n                                sub_arr[i] = 1;                        \n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"ADT\");\n                this.#cache.metrics = scran.perCellAdtQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.tag_id_column = tag_id_column;\n        this.#parameters.igg_prefix = igg_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads || min_detected_drop !== this.#parameters.min_detected_drop) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestAdtQcFilters(this.#cache.metrics, { numberOfMADs: nmads, minDetectedDrop: min_detected_drop, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n            this.#parameters.min_detected_drop = min_detected_drop;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = AdtQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.igg_prefix = phandle.open(\"igg_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n        parameters.min_detected_drop = phandle.open(\"min_detected_drop\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellAdtQcMetricsResults(detected.length, 1);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n                let igg_total = mhandle.open(\"igg_total\", { load: true }).values;\n                cache.metrics.subsetTotals(0, { fillable: true }).set(igg_total);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n                let thresholds_igg_total = thandle.open(\"igg_total\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestAdtQcFiltersResults(1, thresholds_detected.length);\n                cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n                cache.filters.thresholdsSubsetTotals(0, { fillable: true }).set(thresholds_igg_total);\n            }\n\n            output = new AdtQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"crispr_quality_control\";\n\n/**\n * Results of computing per-cell CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellCrisprQcMetricsResults.html) for details.\n *\n * @external PerCellCrisprQcMetricsResults\n */\n\n/**\n * Suggested filters for the CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestCrisprQcFiltersResults.html) for details.\n *\n * @external SuggestCrisprQcFiltersResults\n */\n\n/**\n * This step applies quality control on the CRISPR guide count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellCrisprQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellCrisprQcMetrics)\n * and [`suggestCrisprQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestCrisprQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestCrisprQcFiltersResults} Result of filtering on the CRISPR-derived QC metrics.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellCrisprQcMetricsResults} CRISPR-derived QC metrics,\n     * available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            nmads: 3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold on the maximum count. \n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { nmads } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var mat = this.#inputs.fetchCountMatrix().get(\"CRISPR\");\n                this.#cache.metrics = scran.perCellCrisprQcMetrics(mat);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestCrisprQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = CrisprQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellCrisprQcMetricsResults(detected.length);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n\n                let max_prop = mhandle.open(\"max_proportion\", { load: true }).values;\n                cache.metrics.maxProportions({ fillable: true }).set(max_prop);\n\n                let max_index = mhandle.open(\"max_index\", { load: true }).values;\n                cache.metrics.maxIndex({ fillable: true }).set(max_index);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_max_count = thandle.open(\"max_count\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestCrisprQcFiltersResults(thresholds_max_count.length);\n                cache.filters.thresholdsMaxCount({ fillable: true }).set(thresholds_max_count);\n            }\n\n            output = new CrisprQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback if the results aren't available. \n        output = new CrisprQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as rna_qc_module from \"./rna_quality_control.js\";\nimport * as adt_qc_module from \"./adt_quality_control.js\";\nimport * as crispr_qc_module from \"./crispr_quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction find_usable_upstream_states(qc_states, in_use) {\n    let tmp = utils.findValidUpstreamStates(qc_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (in_use[k]) {\n            to_use.push(qc_states[k]);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells,\n * based on metrics and thresholds computed in {@linkplain RnaQualityControlState} and friends.\n * It wraps the [`filterCells`](https://kanaverse.github.io/scran.js/global.html#filterCells) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * For multi-modal datasets, this can combine quality calls from all valid modalities; \n * a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        if (!(qc_states.RNA instanceof rna_qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc_states.RNA' should be a RnaQualityControlState object\");\n        }\n        if (!(qc_states.ADT instanceof adt_qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc_states.ADT' should be a AdtQualityControlState object\");\n        }\n        if (!(qc_states.CRISPR instanceof crispr_qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc_states.CRISPR' should be a CrisprQualityControlState object\");\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing the filtered and normalized matrices for all modalities,\n     * available after running {@linkcode CellFilteringState#compute compute}.\n     */\n    fetchFilteredMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Int32WasmArray} Array of length equal to the number of cells after filtering, \n     * containing the block assignment for each cell.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    /**\n     * @return {?Uint8WasmArray} Combined discard vector, i.e., an array of length equal to the number of cells in the dataset,\n     * indicating whether each cell should be removed.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null`, if no upstream filtering steps were performed.\n     */\n    fetchDiscards() {\n        if (\"discard_buffer\" in this.#cache) {\n            return this.#cache.discard_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n\n        let inputs = this.#inputs.fetchCountMatrix();\n        for (const a of inputs.available()) {\n            let src = inputs.get(a);\n\n            let sub;\n            if (\"discard_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.discard_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"discard_buffer\" in this.#cache) {\n                // Filtering on the block. Might as well force a load of the\n                // matrix, it'll be needed once we have the blocks anyway.\n                let filtered_ncols = this.fetchFilteredMatrix().numberOfColumns();\n                let bcache = utils.allocateCachedArray(filtered_ncols, \"Int32Array\", this.#cache, \"block_buffer\");\n                scran.filterBlock(block, this.#cache.discard_buffer, { buffer: bcache });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.use_rna - Whether to use the RNA-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_adt - Whether to use the ADT-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_crispr - Whether to use the CRISPR-derived QC metrics for filtering.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { use_rna, use_adt, use_crispr } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        if (this.#parameters.use_rna !== use_rna || this.#parameters.use_adt !== use_adt || this.#parameters.use_crispr !== use_crispr) {\n            this.#parameters.use_rna = use_rna;\n            this.#parameters.use_adt = use_adt;\n            this.#parameters.use_crispr = use_crispr;\n            this.changed = true;\n        }\n\n        let to_use = find_usable_upstream_states(this.#qc_states, { RNA: use_rna, ADT: use_adt, CRISPR: use_crispr });\n        if (!this.changed) {\n            for (const u of to_use) {\n                if (u.changed) {\n                    this.changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.changed) {\n            if (to_use.length > 0) {\n                let first = to_use[0].fetchDiscards();\n\n                if (to_use.length > 1) {\n                    // A discard signal in any modality causes the cell to be removed. \n                    let disc_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"discard_buffer\");\n                    disc_buffer.fill(0);\n\n                    let disc_arr = disc_buffer.array();\n                    for (const u of to_use) {\n                        u.fetchDiscards().forEach((y, i) => { disc_arr[i] |= y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    utils.freeCache(this.#cache.discard_buffer);\n                    this.#cache.discard_buffer = first.view();\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.discard_buffer);\n                delete this.#cache.discard_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n    }\n\n    static defaults() {\n        return {\n            use_rna: true,\n            use_adt: true,\n            use_crispr: true\n        };\n    }\n\n    /**\n     * Apply the same filter to an array of data for each cell in the unfiltered dataset.\n     * Any calls to this method should be done after running {@linkcode CellFilteringState#compute compute}.\n     *\n     * @param {Array|TypedArray} Any array-like object of length equal to the number of cells in the unfiltered dataset.\n     * \n     * @return {Array|TypedArray} An array-like object of the same type as `x`,\n     * where all elements corresponding to low-quality cells have been discarded.\n     * This will have number of columns equal to that of {@linkcode CellFilteringState#fetchFilteredMatrix fetchFilteredMatrix}.\n     */\n    applyFilter(x) {\n        let expect_len = this.#inputs.fetchCountMatrix().numberOfColumns();\n        if (expect_len != x.length) {\n            throw new Error(\"length of 'x' should be equal to the number of cells in the unfiltered dataset\");\n        }\n\n        if (!(\"discard_buffer\" in this.#cache)) {\n            return x.slice(); // making a copy.\n        } else {\n            let discard = this.#cache.discard_buffer.array();\n            return x.filter((y, i) => !discard[i]);\n        }\n    }\n\n    /**\n     * Undo the effect of filtering on an array of indices.\n     * This is primarily useful for adjusting indices from downstream steps \n     * (e.g., {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices})\n     * so that it can be used in {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the unfiltered matrix.\n     */\n    undoFilter(indices) {\n        let max_index = this.fetchFilteredMatrix().numberOfColumns();\n        for (const x of indices) {\n            if (x < 0 || x >= max_index) {\n                throw new Error(\"entries of 'indices' should be less than the number of cells in the filtered dataset\");\n            }\n        }\n\n        if (!('discard_buffer' in this.#cache)) {\n            return;\n        }\n\n        let keep = [];\n        this.#cache.discard_buffer.forEach((x, i) => {\n            if (x == 0) {\n                keep.push(i);\n            }\n        });\n\n        indices.forEach((x, i) => {\n            indices[i] = keep[x];\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, qc_states) {\n    let parameters = CellFilteringState.defaults();\n    let cache = {};\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            if (\"parameters\" in ghandle.children) {\n                let phandle = ghandle.open(\"parameters\");\n                if (\"use_rna\" in phandle.children) {\n                    parameters.use_rna = phandle.open(\"use_rna\", { load: true }).values[0] > 0;\n                    parameters.use_adt = phandle.open(\"use_adt\", { load: true }).values[0] > 0;\n                    parameters.use_crispr = phandle.open(\"use_crispr\", { load: true }).values[0] > 0;\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"discards\" in rhandle.children) {\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n            }\n        } \n\n        if (!(\"discard_buffer\" in cache)) {\n            let to_use = find_usable_upstream_states(qc_states, { RNA: parameters.use_rna, ADT: parameters.use_adt, CRISPR: parameters.use_crispr });\n\n            if (to_use.length == 1) {\n                // We figure out which upstream QC state contains the discard vector\n                // and create a view on it so that our discard_buffer checks work properly.\n                // (v1 and earlier also implicitly falls in this category.)\n                cache.discard_buffer = to_use[0].fetchDiscards().view();\n            } else if (to_use.length == 0) {\n                // No-op; we don't need to define discard_buffer.\n                ;\n            } else {\n                throw new Error(\"no more than one upstream QC state should be valid if 'discards' is not available\");\n            }\n        }\n\n        output = new CellFilteringState(inputs, qc_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.discard_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as utils from \"./general.js\";\n\nexport function subsetSums(qc, filter, mat, cache, name) {\n    let output = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache, name);\n    let discards = filter.fetchDiscards();\n\n    // unsafe, so no more Wasm allocations past this point. \n    let sums = qc.fetchMetrics().sums({ copy: false }); \n\n    if (discards == null) {\n        output.set(sums);\n    } else {\n        let oarr = output.array();\n        var j = 0;\n        discards.forEach((x, i) => {\n            if (!x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                oarr[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./rna_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"rna_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaNormalizationState {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc' should be a RnaQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sum_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"RNA\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing normalized expression values,\n     * available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the RNA-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"RNA\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new RnaNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`groupedSizeFactors`](https://kanaverse.github.io/scran.js/global.html#groupedSizeFactors) \n * and [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.sf_buffer);\n        utils.freeCache(this.#cache.centered_sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"ADT\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized ADT values,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the ADT-derived size factor for each cell in the (QC-filtered) dataset.\n     * This is available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sf_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sf_buffer.length, \"Float64Array\", this.#cache, \"centered_sf_buffer\");\n            scran.centerSizeFactors(this.#cache.sf_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n        var block = this.#filter.fetchFilteredBlock();\n\n        var buffer = this.#cache.sf_buffer;\n        if (buffer.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.remove_bias - Whether to remove composition bias between cell subpopulations.\n     * This is done by clustering cells and computing median-based size factors between the average pseudo-cells for each cluster.\n     * Users can set this to `false` to speed up the compute.\n     * @param {number} parameters.num_pcs - Number of PCs to use for creating a low-dimensional embedding for clustering.\n     * Only used if `remove_bias = true`.\n     * @param {number} parameters.num_clusters - Number of clusters to create with k-means clustering.\n     * Only used if `remove_bias = true`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        const { num_pcs, num_clusters } = parameters;\n        let remove_bias = true;\n        if (\"remove_bias\" in parameters) {\n            remove_bias = parameters.remove_bias;\n        }\n\n        this.changed = false;\n\n        if (this.#qc.changed || \n            this.#filter.changed || \n            remove_bias !== this.#parameters.remove_bias ||\n            (\n                remove_bias &&\n                (\n                    num_pcs !== this.#parameters.num_pcs || \n                    num_clusters != this.#parameters.num_clusters\n                ) \n            )\n        ) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n                let total_buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"total_buffer\");\n                var block = this.#filter.fetchFilteredBlock();\n                var sf_buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"sf_buffer\");\n\n                if (remove_bias) {\n                    scran.quickAdtSizeFactors(mat, { \n                        totals: total_buffer, \n                        block: block, \n                        buffer: sf_buffer, \n                        numberOfPCs: num_pcs, \n                        numberOfClusters: num_clusters \n                    });\n                } else {\n                    scran.centerSizeFactors(total_buffer, { buffer: sf_buffer, block: block });\n                }\n\n                this.changed = true;\n            }\n\n        } \n\n        this.#parameters.remove_bias = remove_bias;\n        this.#parameters.num_pcs = num_pcs;\n        this.#parameters.num_clusters = num_clusters;\n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n           remove_bias: true,\n           num_pcs: 25,\n           num_clusters: 20\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    let cache = {};\n    let parameters = AdtNormalizationState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\");\n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.num_clusters = phandle.open(\"num_clusters\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n            \n            if (\"size_factors\" in rhandle.children) {\n                let sf = rhandle.open(\"size_factors\", { load: true }).values;\n                cache.sf_buffer = scran.createFloat64WasmArray(sf.length);\n                cache.sf_buffer.set(sf);\n            }\n\n            output = new AdtNormalizationState(qc, filter, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.sf_buffer);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtNormalizationState(qc, filter, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./crispr_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"crispr_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered CRISPR count matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc' should be a CrisprQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.centered_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized CRISPR abundances,\n     * available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the CRISPR-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"CRISPR\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n                this.changed = true;\n            }\n        } \n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        let rhandle = ghandle.createGroup(\"results\"); \n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new CrisprNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\n\n/**\n * Results of per-gene variance modelling,\n * see [here](https://kanaverse.github.io/scran.js/ModelGeneVarResults.html) for details.\n *\n * @external ModelGeneVarResults\n */\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the [`modelGeneVar`](https://kanaverse.github.io/scran.js/global.html#modelGeneVar) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:ModelGeneVarResults} Variance modelling results,\n     * available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.results;\n    }\n\n    /**\n     * @return {Float64Array} Array of length equal to the number of genes,\n     * containing the sorted residuals after fitting a mean-dependent trend to the variances.\n     * Available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n \n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { span } = parameters;\n        this.changed = false;\n        \n        if (this.#norm.changed || span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            if (this.valid()) {\n                let mat = this.#norm.fetchNormalizedMatrix();\n                let block = this.#filter.fetchFilteredBlock();\n                this.#cache.results = scran.modelGeneVar(mat, { span: span, block: block });\n\n                this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n                this.#cache.sorted_residuals.sort();\n\n                this.changed = true;\n            }\n\n            this.#parameters.span = span;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, permuter, filter, norm) {\n    let ghandle = handle.open(\"feature_selection\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            span: phandle.open(\"span\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"means\" in rhandle.children) {\n            // Possibly permuting it to match the new permutation order;\n            // see 'unserialize' in 'inputs.js'.\n            let reloaded = {};\n            for (const key of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n                let value = rhandle.open(key, { load: true }).values;\n                reloaded[key] = permuter(value);\n            }\n\n            cache.results = scran.emptyModelGeneVarResults(reloaded.means.length, 1);\n            cache.results.means({ fillable: true }).set(reloaded.means);\n            cache.results.variances({ fillable: true }).set(reloaded.vars);\n            cache.results.fitted({ fillable: true }).set(reloaded.fitted);\n            cache.results.residuals({ fillable: true }).set(reloaded.resids);\n\n            cache.sorted_residuals = cache.results.residuals({ copy: true });\n            cache.sorted_residuals.sort();\n        }\n    }\n\n    return new FeatureSelectionState(filter, norm, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"rna_pca\";\n\n/**\n * Results of running PCA on some input matrix,\n * see [here](https://kanaverse.github.io/scran.js/RunPCAResults.html) for details.\n *\n * @external RunPCAResults\n */\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaPcaState { \n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a FeatureSelectionState object\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized gene expression values.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {number} parameters.num_hvgs - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be one of:\n     *\n     * - `\"none\"`, in which case nothing is done using the sample information. \n     * - `\"regress\"`, where linear regression is applied to remove mean differences between samples.\n     * - `\"weight\"`, where samples are weighted so that they contribute equally regardless of the number of cells.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_hvgs, num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#feat.changed || num_hvgs !== this.#parameters.num_hvgs) {\n            if (this.valid()) {\n                choose_hvgs(num_hvgs, this.#feat, this.#cache);\n                this.changed = true;\n            }\n\n            this.#parameters.num_hvgs = num_hvgs;\n        }\n\n        if (this.changed || this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            utils.freeCache(this.#cache.pcs);\n\n            if (this.valid()) {\n                let sub = this.#cache.hvg_buffer;\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                this.#cache.pcs = scran.runPCA(mat, { features: sub, numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResults().residuals({ copy: false });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm, feat) {\n    let ghandle = handle.open(\"rna_pca\" in handle.children ? \"rna_pca\" : \"pca\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters = { \n            num_hvgs: phandle.open(\"num_hvgs\", { load: true }).values[0],\n            num_pcs: phandle.open(\"num_pcs\", { load: true }).values[0]\n        };\n\n        // For back-compatibility.\n        if (\"block_method\" in phandle.children) {\n            parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n            if (parameters.block_method == \"mnn\") {\n                parameters.block_method = \"weight\";\n            }\n        } else {\n            parameters.block_method = \"none\";\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        if (feat.valid()) {\n            choose_hvgs(parameters.num_hvgs, feat, cache);\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"pcs\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n        }\n\n        output = new RnaPcaState(filter, norm, feat, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.hvg_buffer);\n        utils.freeCache(cache.pcs);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized ADT matrix,\n     * available after running {@linkcode AdtPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = AdtPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new AdtPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new AdtPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"crispr_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise CRISPR abundance data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm' should be a CrisprNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized CRISPR abundance matrix,\n     * available after running {@linkcode CrisprPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = CrisprPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new CrisprPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new CrisprPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_pca_module from \"./rna_pca.js\";\nimport * as adt_pca_module from \"./adt_pca.js\";\nimport * as crispr_pca_module from \"./crispr_pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\nfunction find_nonzero_upstream_states(pca_states, weights) {\n    let tmp = utils.findValidUpstreamStates(pca_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (weights[k] > 0) {\n            to_use.push(k);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the [`scaleByNeighbors`](https://kanaverse.github.io/scran.js/global.html#scaleByNeighbors) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        if (!(pca_states.RNA instanceof rna_pca_module.RnaPcaState)) {\n            throw new Error(\"'pca_states.RNA' should be an RnaPcaState object\");\n        }\n        if (!(pca_states.ADT instanceof adt_pca_module.AdtPcaState)) {\n            throw new Error(\"'pca_states.ADT' should be an AdtPcaState object\");\n        }\n        if (!(pca_states.CRISPR instanceof crispr_pca_module.CrisprPcaState)) {\n            throw new Error(\"'pca_states.CRISPR' should be an CrisprPcaState object\");\n        }\n        this.#pca_states = pca_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the combined embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchCombined() {\n        return this.#cache.combined_buffer;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfCells() {\n        return this.#cache.num_cells;\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#cache.total_dims;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return { \n            rna_weight: 1,\n            adt_weight: 1,\n            crispr_weight: 0,\n            approximate: true\n        };\n    }\n\n    static createPcsView(cache, upstream) {\n        utils.freeCache(cache.combined_buffer);\n        cache.combined_buffer = upstream.principalComponents({ copy: \"view\" }).view();\n        cache.num_cells = upstream.numberOfCells();\n        cache.total_dims = upstream.numberOfPCs();\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.rna_weight - Relative weight of the RNA embeddings.\n     * @param {number} parameters.adt_weight - Relative weight of the ADT embeddings.\n     * @param {number} parameters.crispr_weight - Relative weight of the CRISPR embeddings.\n     * @param {boolean} parameters.approximate - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { rna_weight, adt_weight, crispr_weight, approximate } = parameters;\n        this.changed = false;\n\n        for (const v of Object.values(this.#pca_states)) {\n            if (v.changed) {\n                this.changed = true;\n                break;\n            }\n        }\n\n        if (approximate !== this.#parameters.approximate) {\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        if (rna_weight !== this.#parameters.rna_weight || adt_weight !== this.#parameters.adt_weight || crispr_weight !== this.#parameters.crispr_weight) {\n            this.#parameters.rna_weight = rna_weight;\n            this.#parameters.adt_weight = adt_weight;\n            this.#parameters.crispr_weight = crispr_weight;\n            this.changed = true;\n        }\n\n        if (this.changed) { \n            const weights = { RNA: rna_weight, ADT: adt_weight, CRISPR: crispr_weight };\n            let to_use = find_nonzero_upstream_states(this.#pca_states, weights);\n\n            if (to_use.length > 1) {\n                let weight_arr = to_use.map(x => weights[x]);\n                let collected = [];\n                let total = 0;\n                let ncells = null;\n\n                for (const k of to_use) {\n                    let curpcs = this.#pca_states[k].fetchPCs();\n                    collected.push(curpcs.principalComponents({ copy: \"view\" }));\n                    if (ncells == null) {\n                        ncells = curpcs.numberOfCells();\n                    } else if (ncells !== curpcs.numberOfCells()) {\n                        throw new Error(\"number of cells should be consistent across all embeddings\");\n                    }\n                    total += curpcs.numberOfPCs();\n                }\n\n                let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: approximate });\n                this.#cache.num_cells = ncells;\n                this.#cache.total_dims = total;\n\n            } else {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                this.constructor.createPcsView(this.#cache, pcs);\n            }\n        }\n\n        // Updating all parameters anyway. This requires us to take ownership\n        // of 'weights' to avoid pass-by-reference shenanigans.\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca_states) {\n    let cache = {};\n    let parameters = CombineEmbeddingsState.defaults();\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            {\n                let phandle = ghandle.open(\"parameters\");\n                parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n                if ('weights' in phandle.children) { // v2.0\n                    let whandle = phandle.open(\"weights\");\n                    if (\"RNA\" in whandle.children) {\n                        parameters.rna_weight = whandle.open(\"RNA\", { load: true }).values[0];\n                    }\n                    if (\"ADT\" in whandle.children) {\n                        parameters.adt_weight = whandle.open(\"ADT\", { load: true }).values[0];\n                    }\n                    if (\"CRISPR\" in whandle.children) {\n                        parameters.crispr_weight = whandle.open(\"CRISPR\", { load: true }).values[0];\n                    }\n                } else {\n                    parameters.rna_weight = phandle.open(\"rna_weight\", { load: true }).values[0];\n                    parameters.adt_weight = phandle.open(\"adt_weight\", { load: true }).values[0];\n                    parameters.crispr_weight = phandle.open(\"crispr_weight\", { load: true }).values[0];\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"combined\" in rhandle.children) {\n                let phandle = rhandle.open(\"combined\", { load: true });\n                cache.num_cells = phandle.shape[0];\n                cache.total_dims = phandle.shape[1];\n\n                let vals = phandle.values;\n                cache.combined_buffer = scran.createFloat64WasmArray(vals.length);\n                cache.combined_buffer.set(vals);\n            }\n        }\n\n        if (!(\"combined_buffer\" in cache)) {\n            // This only happens if there was only one upstream PCA state; in which case, \n            // we figure out which upstream PCA state contains the PC vector\n            // and create a view on it so that our fetchPCs() works properly.\n            // (v1 and earlier also implicitly falls in this category.)\n            const weights = { RNA: parameters.rna_weight, ADT: parameters.adt_weight, CRISPR: parameters.crispr_weight };\n            let to_use = find_nonzero_upstream_states(pca_states, weights);\n\n            if (to_use.length != 1) {\n                throw new Error(\"only one upstream PCA state should be valid with non-zero weight if 'combined' is not available\");\n            }\n\n            let pcs = pca_states[to_use[0]].fetchPCs();\n            CombineEmbeddingsState.createPcsView(cache, pcs);\n        }\n\n        output = new CombineEmbeddingsState(pca_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.combined_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the [`mnnCorrect`](https://kanaverse.github.io/scran.js/global.html#mnnCorrect) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the batch-corrected embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode BatchCorrectionState#compute compute}.\n     */\n    fetchCorrected() {\n        return this.#cache.corrected;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfCells() {\n        return this.#combined.fetchNumberOfCells();\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#combined.fetchNumberOfDimensions();\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `batch_correction` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * If `\"mnn\"`, it is recommended that upstream PCA steps (i.e., {@linkplain RnaPcaState} and {@linkplain AdtPcaState}) use `block_method = \"weight\"`.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use during MNN correction.\n     * @param {boolean} parameters.approximate - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { method, num_neighbors, approximate} = parameters;\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (method == \"mnn\" && block !== null);\n\n        if (this.changed || method !== this.#parameters.method || num_neighbors !== this.#parameters.num_neighbors || approximate !== this.#parameters.approximate) { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchCombined();\n                let corrected = utils.allocateCachedArray(pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs, block, { \n                    k: num_neighbors, \n                    buffer: corrected, \n                    numberOfCells: this.#combined.fetchNumberOfCells(), \n                    numberOfDims: this.#combined.fetchNumberOfDimensions(), \n                    approximate: approximate \n                });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                this.#cache.corrected = this.#combined.fetchCombined().view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters.method = method;\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, combined) {\n    let cache = {};\n    let parameters = BatchCorrectionState.defaults();\n    let output;\n    \n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.method = phandle.open(\"method\", { load: true }).values[0];\n        parameters.num_neighbors = phandle.open(\"num_neighbors\", { load: true }).values[0];\n        parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"corrected\" in rhandle.children) {\n                let corrected = rhandle.open(\"corrected\", { load: true }).values;\n                cache.corrected = scran.createFloat64WasmArray(corrected.length);\n                cache.corrected.set(corrected);\n            } else {\n                // Creating a view from the upstream combined state.\n                let pcs = combined.fetchCombined();\n                cache.corrected = pcs.view();\n            }\n\n            output = new BatchCorrectionState(filter, combined, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.corrected);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        let ghandle = handle.open(\"pca\");\n\n        let rhandle = ghandle.open(\"results\");\n        if (\"corrected\" in rhandle.children) {\n            let corrected = rhandle.open(\"corrected\", { load: true }).values;\n            let corbuffer = utils.allocateCachedArray(corrected.length, \"Float64Array\", cache, \"corrected\");\n            corbuffer.set(corrected);\n        } else {\n            cache.corrected = combined.fetchCombined().view();\n        }\n\n        output = new BatchCorrectionState(filter, combined, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the [`buildNeighborSearchIndex`](https://kanaverse.github.io/scran.js/global.html#buildNeighborSearchIndex) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {BuildNeighborSearchIndexResults} Index for a nearest-neighbor search,\n     * available after running {@linkcode NeighborIndexState#compute compute}.\n     */\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        this.#cache.raw = scran.buildNeighborSearchIndex(this.#correct.fetchCorrected(), { \n            approximate: approximate, \n            numberOfDims: this.#correct.fetchNumberOfDimensions(),\n            numberOfCells: this.#correct.fetchNumberOfCells()\n        });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.approximate - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { approximate } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(approximate);\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let ghandle = handle.open(\"neighbor_index\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            approximate: phandle.open(\"approximate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let cache = {};\n    return new NeighborIndexState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\nexport const step_name = \"snn_graph_cluster\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkplain NeighborIndexState}.\n * This wraps [`clusterSNNGraph`](https://kanaverse.github.io/scran.js/global.html#clusterSNNGraph) \n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode SnnGraphClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSNNGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterSNNGraph(this.#cache.graph, {\n            method: algorithm,\n            multiLevelResolution: multilevel_resolution,\n            leidenResolution: leiden_resolution,\n            leidenModularityObjective: true, // avoid problems with unstable interpretation of leidenResolution.\n            walktrapSteps: walktrap_steps\n        });\n        return;\n    }\n\n    static defaults() {\n        return { \n            k: 10,\n            scheme: \"rank\",\n            algorithm: \"multilevel\",\n            multilevel_resolution: 1,\n            leiden_resolution: 1,\n            walktrap_steps: 4\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of nearest neighbors used to construct the graph.\n     * @param {string} parameters.scheme - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {string} parameters.algorithm - Algorithm to use for community detection.\n     * This can be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n     * @param {number} parameters.multilevel_resolution - Resolution of the multi-level community detection.\n     * @param {number} parameters.leiden_resolution - Resolution of the Leiden community detection.\n     * @param {number} parameters.walktrap_steps - Number of merge steps for the Walktrap algorithm.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k, scheme, algorithm, multilevel_resolution, leiden_resolution, walktrap_steps } = parameters;\n        this.changed = false;\n\n        if (this.#index.changed || k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        if (this.changed || scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.#parameters.scheme = scheme;\n            this.changed = true \n        }\n\n        if (this.changed \n            || algorithm !== this.#parameters.algorithm \n            || multilevel_resolution !== this.#parameters.multilevel_resolution \n            || leiden_resolution !== this.#parameters.leiden_resolution \n            || walktrap_steps !== this.#parameters.walktrap_steps \n            || (!this.#valid() && run_me))\n        {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps);\n            } else {\n                delete this.#cache.clusters;\n            }\n\n            this.#parameters.algorithm = algorithm;\n            this.#parameters.multilevel_resolution = multilevel_resolution;\n            this.#parameters.leiden_resolution = leiden_resolution;\n            this.#parameters.walktrap_steps = walktrap_steps;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"snn_graph_cluster\");\n\n    let parameters = SnnGraphClusterState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters.k = phandle.open(\"k\", { load: true }).values[0];\n\n        parameters.scheme = phandle.open(\"scheme\", { load: true }).values[0];\n        if (typeof parameters.scheme !== \"string\") { // because I stuffed up and tried to save a string as an int in v1.0, oops.\n            parameters.scheme = \"rank\";\n        }\n\n        if (\"algorithm\" in phandle.children) {\n            // v3.0\n            parameters.algorithm = phandle.open(\"algorithm\", { load: true }).values[0];\n            parameters.multilevel_resolution = phandle.open(\"multilevel_resolution\", { load: true }).values[0];\n            parameters.leiden_resolution = phandle.open(\"leiden_resolution\", { load: true }).values[0];\n            parameters.walktrap_steps = phandle.open(\"walktrap_steps\", { load: true }).values[0];\n        } else {\n            // v2.0\n            parameters.multilevel_resolution = phandle.open(\"resolution\", { load: true }).values[0];\n        }\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        if (\"clusters\" in rhandle.children) {\n            let clusters = rhandle.open(\"clusters\", { load: true }).values;\n            cache.clusters = scran.emptyClusterSNNGraphResults(clusters.length, 1);\n            cache.clusters.setBest(0); // whatever.\n            cache.clusters.membership({ fillable: true }).set(clusters);\n        }\n    }\n\n    return new SnnGraphClusterState(index, parameters, cache);\n}\n\n\n","import * as scran from \"scran.js\";\n\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false, compute_auc = true } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = permuter(handle.open(x, { load: true }).values);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (i == \"auc\" && !compute_auc) {\n            continue;\n        }\n\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(rhandle.children)) {\n                current[j] = permuter(rhandle.open(j, { load: true }).values);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\nexport function fillGroupStats(object, i, vals) {\n    object.means(i, { copy: false }).set(vals.means);\n    object.detected(i, { copy: false }).set(vals.detected);\n\n    for (const [s, v] of Object.entries(vals.cohen)) {\n        object.cohen(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.lfc)) {\n        object.lfc(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.delta_detected)) {\n        object.deltaDetected(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    if (\"auc\" in vals) {\n        for (const [s, v] of Object.entries(vals.auc)) {\n            object.auc(i, { summary: summaries2int[s], copy: false }).set(v);\n        }\n    }\n}\n\n/**\n * Report marker results for a given group or cluster, ordered so that the strongest candidate markers appear first.\n *\n * @param {ScoreMarkersResults} results - The marker results object generated by the `scoreMarkers` function in **scran.js**.\n * @param {number} group - Integer specifying the group or cluster of interest.\n * Any number can be used if it was part of the `groups` passed to `scoreMarkers`.\n * @param {string} rankEffect - Summarized effect size to use for ranking markers.\n * This should follow the format of `<effect>-<summary>` where `<effect>` may be `lfc`, `cohen`, `auc` or `delta_detected`,\n * and `<summary>` may be `min`, `mean` or `min-rank`.\n *\n * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rankEffect`.\n * This contains:\n *   - `means`: a Float64Array of length equal to the number of genes, containing the mean expression within the selection.\n *   - `detected`: a Float64Array of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n *   - `lfc`: a Float64Array of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n *   - `delta_detected`: a Float64Array of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n */\nexport function formatMarkerResults(results, group, rankEffect) {\n    if (!rankEffect || rankEffect === undefined) {\n        rankEffect = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        let index = 1;\n        if (rankEffect.match(/-min$/)) {\n            index = 0;\n        } else if (rankEffect.match(/-min-rank$/)) {\n            increasing = true;\n            index = 4;\n        }\n\n        if (rankEffect.match(/^cohen-/)) {\n            ranking = results.cohen(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^lfc-/)) {\n            ranking = results.lfc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: index, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rankEffect + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.means(group, { copy: false }));\n    var stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n\nexport function locateVersusCache(left, right, cache) {\n    let left_small = left < right;\n\n    let bigg = (left_small ? right : left);\n    if (!(bigg in cache)) {\n        cache[bigg] = {};\n    }\n    let biggversus = cache[bigg];\n\n    let smal = (left_small ? left : right); \n    let rerun = !(smal in biggversus);\n    if (rerun) {\n        biggversus[smal] = {};\n    }\n\n    return { \n        cached: biggversus[smal],\n        run: rerun,\n        left_small: left_small\n    };\n}\n\nexport function freeVersusResults(cache) {\n    if (cache) {\n        for (const v of Object.values(cache)) {\n            for (const v2 of Object.values(v)) {\n                for (const m of Object.values(v2)) {\n                    scran.free(m);\n                }\n            }\n        }\n        for (const k of Object.keys(cache)) {\n            delete cache[k];\n        }\n    }\n}\n\nexport function computeVersusResults(matrices, clusters, block, keep, cache, lfc_threshold, compute_auc) {\n    let new_block = null;\n    if (block !== null) {\n        new_block = scran.subsetBlock(block, keep);\n        scran.dropUnusedBlock(new_block);\n    }\n\n    for (const modality of matrices.available()) {\n        let modmat = matrices.get(modality);\n        let sub;\n        try {\n            sub = scran.subsetColumns(modmat, keep);\n            cache[modality] = scran.scoreMarkers(sub, clusters, { block: new_block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        } finally {\n            scran.free(sub);\n        }\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\n/**\n * This step performs k-means clustering on the PCs, \n * wrapping the [`clusterKmeans`](https://kanaverse.github.io/scran.js/global.html#clusterKmeans) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode KmeansClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchCorrected();\n                this.#cache.raw = scran.clusterKmeans(pcs, k, { \n                    numberOfDims: this.#correct.fetchNumberOfDimensions(),\n                    numberOfCells: this.#correct.fetchNumberOfCells(),\n                    initMethod: \"pca-part\" \n                });\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let parameters = {\n        k: 10\n    };\n    let cache = {};\n\n    // Protect against old analysis states that don't have kmeans_cluster.\n    if (\"kmeans_cluster\" in handle.children) {\n        let ghandle = handle.open(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.k = phandle.open(\"k\", { load: true }).values[0];\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            if (\"clusters\" in rhandle.children) {\n                let clusters = rhandle.open(\"clusters\", { load: true }).values;\n                cache.raw = scran.emptyClusterKmeansResults(clusters.length, parameters.k, pca.fetchNumberOfDimensions());\n                cache.raw.clusters({ fillable: true }).set(clusters);\n            }\n        }\n    }\n\n    return new KmeansClusterState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings from {@linkplain KmeansClusterState} and {@linkplain SnnGraphClusterState}, respectively.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode ChooseClusteringState#compute compute}.\n     */\n    fetchClusters() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClusters();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClusters();\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - Clustering method to use, either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { method } = parameters;\n        this.changed = true;\n        \n        if (method == this.#parameters.method) {\n            if (method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters.method = method;\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, snn, kmeans) {\n    let ghandle = handle.open(\"choose_clustering\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            method: phandle.open(\"method\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    return new ChooseClusteringState(snn, kmeans, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * Results of marker detection,\n * see [here](https://www.kanaverse.github.io/scran.js/ScoreMarkersResults.html) for details.\n *\n * @external ScoreMarkersResults\n */\n\n/*********************\n ***** Internals *****\n *********************/\n\nfunction _free(cache) {\n    for (const v of Object.values(cache.raw)) {\n        utils.freeCache(v);\n    }\n    cache.raw = {};\n    markers.freeVersusResults(cache.versus);\n    delete cache.versus;\n}\n\nfunction _computeVersus(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n    let cache_info = markers.locateVersusCache(left, right, cache);\n    let left_index = (cache_info.left_small ? 0 : 1);\n    let right_index = (cache_info.left_small ? 1 : 0);\n\n    if (cache_info.run) {\n        let new_clusters = [];\n        let keep = [];\n        let leftfound = false, rightfound = false;\n        clusters.forEach((x, i) => {\n            if (x == left) {\n                new_clusters.push(left_index);\n                keep.push(i);\n                leftfound = true;\n            } else if (x == right) {\n                new_clusters.push(right_index);\n                keep.push(i);\n                rightfound = true;\n            }\n        });\n\n        if (!leftfound || !rightfound) {\n            throw new Error(\"non-zero entries should be present for both requested clusters in versus mode\");\n        }\n\n        markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n    }\n\n    return { \n        results: cache_info.cached,\n        left: left_index,\n        right: right_index\n    };\n}\n\n/*****************\n ***** State *****\n *****************/\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * The clustering is obtained from the upstream {@linkplain ChooseClusteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        _free(this.#cache);\n    }\n\n    /**\n     * Obtain the marker detection results for all modalities.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object where each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all clusters.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * Parameters used to compute the results.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `marker_detection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.lfc_threshold - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} parameters.compute_auc - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated with new results.\n     */\n    compute(parameters) {\n        let { lfc_threshold, compute_auc } = parameters;\n        this.changed = false;\n        let changed_params = (lfc_threshold !== this.#parameters.lfc_threshold || compute_auc !== this.#parameters.compute_auc);\n        \n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (this.#choice.changed || v.changed || changed_params) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClusters();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters.lfc_threshold = lfc_threshold;\n        this.#parameters.compute_auc = compute_auc;\n        if (this.changed) {\n            markers.freeVersusResults(this.#cache.versus);\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode MarkerDetectionCore#compute compute}.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    // Soft-deprecated.\n    static computeVersusCustom(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n        return computeVersus(left, right, matrices, clusters, { cache, block, lfc_threshold, compute_auc });\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two clusters for more detailed examination of the differences between them.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @param {number} left - Index of one cluster in which to find upregulated markers.\n     * @param {number} right - Index of another cluster to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` cluster in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` cluster in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        var clusters = this.#choice.fetchClusters();\n        var block = this.#filter.fetchFilteredBlock();\n\n        // No need to free this afterwards; we don't own the normalized matrices anyway.\n        let matrices = new scran.MultiMatrix;\n        for (const [modality, state] of Object.entries(this.#norm_states)) {\n            if (!state.valid()) {\n                continue;\n            }\n            matrices.add(modality, state.fetchNormalizedMatrix());\n        }\n\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n\n        return _computeVersus(left, right, matrices, clusters, { \n            cache: this.#cache.versus, \n            block: block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**********************\n ***** Standalone *****\n **********************/\n\n/**\n * Standalone version of {@linkplain MarkerDetectionState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices, groups and blocking factor to compute the various marker statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed MarkerDetectionStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class MarkerDetectionStandalone {\n    #matrices;\n\n    #groups;\n    #group_levels;\n    #block;\n    #block_levels;\n\n    #cache;\n    #parameters;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {Array|TypedArray} groups - Array of length equal to the number of columns in any value of `normalized`, containing the group assignments for each column. \n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, groups, { block = null } = {}) {\n        // Checking dimensions.\n        let N = groups.length;\n\n        for (const k of normalized.available()) {\n            let v = normalized.get(k);\n            if (v.numberOfColumns() != N) {\n                throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n            }\n        }\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as 'groups' if not null\");\n            }\n        }\n\n        let arrays = [ groups ];\n        if (block !== null) {\n            arrays.push(block);\n        }\n        let dump = utils.subsetInvalidFactors(arrays);\n\n        // Maybe taking a subset to eliminate invalid entries.\n        let new_matrices;\n        if (dump.retain !== null) {\n            new_matrices = new scran.MultiMatrix;\n            let temp = scran.createInt32WasmArray(dump.retain.length);\n            try {\n                temp.set(dump.retain);\n                for (const k of normalized.available()) {\n                    new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                }\n            } catch (e) {\n                new_matrices.free();\n                throw e;\n            } finally {\n                scran.free(temp);\n            }\n        } else {\n            new_matrices = normalized.clone();\n        }\n\n        this.#matrices = new_matrices;\n        this.#groups = dump.arrays[0].ids;\n        this.#group_levels = dump.arrays[0].levels;\n\n        if (block !== null) {\n            this.#block = dump.arrays[1].ids;\n            this.#block_levels = dump.arrays[1].levels;\n        } else {\n            this.#block = null;\n            this.#block_levels = null;\n        }\n\n        this.#cache = { raw: {}, init: true };\n        this.#parameters = MarkerDetectionState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#groups);\n        scran.free(this.#block);\n        scran.free(this.#matrices);\n        _free(this.#cache);\n    }\n\n    /**\n     * @return {object} Marker detection results for the all modalities.\n     * Each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all groups.\n     * This is available after running {@linkcode MarkerDetectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the grouping factor.\n     * Group indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchGroupLevels({ copy = true } = {}) {\n        let ret = this.#group_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#matrices;\n    }\n\n    _peekGroups() {\n        return this.#groups;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode MarkerDetectionState#defaults MarkerDetectionState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode MarkerDetectionState#compute MarkerDetectionState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     */\n    setParameters(parameters) {\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            this.free();\n        }\n        this.#parameters = { ...parameters };\n        return;\n    }\n\n    /**\n     * Compute markers for all groups.\n     *\n     * @return The state is updated with new results.\n     */\n    computeAll() {\n        let { lfc_threshold, compute_auc } = this.#parameters;\n        for (const k of this.#matrices.available()) {\n            var mat = this.#matrices.get(k);\n            utils.freeCache(this.#cache.raw[k]);\n            this.#cache.raw[k] = scran.scoreMarkers(mat, this.#groups, { block: this.#block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        }\n        return;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two groups, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {number} left - Index of one group in which to find upregulated markers.\n     * @param {number} right - Index of another group to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two groups.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` group in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` group in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n        return _computeVersus(left, right, this.#matrices, this.#groups, { \n            cache: this.#cache.versus, \n            block: this.#block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction fill_results(stats, num_blocks) {\n    let keys = Object.keys(stats);\n    let first = stats[keys[0]];\n    let ngenes = first.means.length;\n    let object = scran.emptyScoreMarkersResults(ngenes, keys.length, num_blocks, { computeAuc: (\"auc\" in first) });\n\n    for (const k of keys) {\n        let i = Number(k);\n        let vals = stats[k];\n        object.means(i, { fillable: true }).set(vals.means);\n        object.detected(i, { fillable: true }).set(vals.detected);\n\n        for (const [s, v] of Object.entries(vals.cohen)) {\n            object.cohen(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.lfc)) {\n            object.lfc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.delta_detected)) {\n            object.deltaDetected(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        if (\"auc\" in vals) {\n            for (const [s, v] of Object.entries(vals.auc)) {\n                object.auc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n            }\n        }\n    }\n\n    return object;\n}\n\nexport function unserialize(handle, permuters, filter, norm_states, choice) {\n    let ghandle = handle.open(\"marker_detection\");\n\n    let parameters = MarkerDetectionState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        if (\"lfc_threshold\" in phandle.children) {\n            parameters.lfc_threshold = phandle.open(\"lfc_threshold\", { load: true }).values[0];\n        }\n        if (\"compute_auc\" in phandle.children) {\n            parameters.compute_auc = phandle.open(\"compute_auc\", { load: true }).values[0] > 0;\n        }\n    }\n\n    // Figure out the number of blocks.\n    let num_blocks = 1;\n    {\n        let filtered = filter.fetchFilteredBlock();\n        if (filtered != null) {\n            filtered.forEach(x => {\n                if (x + 1 > num_blocks) {\n                    num_blocks = x + 1;\n                }\n            });\n        }\n    }\n\n    // Set up the marker detection statistics.\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        cache.raw = {};\n\n        if (\"clusters\" in rhandle.children) { \n            // below v2.0\n            let chandle = rhandle.open(\"clusters\");\n            let clusters = {};\n            for (const cl of Object.keys(chandle.children)) {\n                clusters[Number(cl)] = markers.unserializeGroupStats(chandle.open(cl), permuters[\"RNA\"], { compute_auc: parameters.compute_auc });\n            }\n            cache.raw.RNA = fill_results(clusters, num_blocks);\n        } else {\n            // after v2.0.\n            let chandle = rhandle.open(\"per_cluster\");\n            for (const a of Object.keys(chandle.children)) {\n                let clusters = {};\n                let ahandle = chandle.open(a);\n                for (const cl of Object.keys(ahandle.children)) {\n                    clusters[Number(cl)] = markers.unserializeGroupStats(ahandle.open(cl), permuters[a], { compute_auc: parameters.compute_auc });\n                }\n                cache.raw[a] = fill_results(clusters, num_blocks);\n            }\n        }\n \n    }\n\n    return new MarkerDetectionState(filter, norm_states, choice, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as rutils from \"../readers/index.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as markers_module from \"./marker_detection.js\";\n\nconst baseUrl = \"https://github.com/LTLA/singlepp-references/releases/download/v2.0.0\";\n\nexport const step_name = \"cell_labelling\";\n\n/**\n * Cell labelling involves assigning cell type labels to clusters using the [**SingleR** algorithm](https://github.com/LTLA/CppSingleR),\n * based on [pre-formatted reference expression profiles](https://github.com/clusterfork/singlepp-references).\n * This wraps [`labelCells`](https://kanaverse.github.io/scran.js/global.html#labelCells)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * In theory, we could do this at the single-cell level, but we use clusters instead to expedite the computation and simplify interpretation.\n * If multiple references are requested, we will use each for assignment before attempting to choose the best label for each cluster across references.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellLabellingState {\n    #inputs;\n    #markers;\n    #parameters;\n    #cache;\n\n    constructor(inputs, markers, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        if (!(markers instanceof markers_module.MarkerDetectionState)) {\n            throw new Error(\"'markers' should be a State object from './marker_detection.js'\");\n        }\n        this.#markers = markers;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    #flush_prepared() {\n        if (\"prepared\" in this.#cache) {\n            for (const v of Object.values(this.#cache.prepared)) {\n                v.built.raw.free();\n            }\n            delete this.#cache.prepared;\n        }\n    }\n\n    free() {\n        utils.freeCache(this.#cache.buffer);\n        this.#flush_prepared();\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let mat = this.#inputs.fetchCountMatrix();\n        return mat.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        let out = { ...this.#parameters };\n        out.references = bioc.CLONE(out.references);\n        out.species = bioc.CLONE(out.species);\n        return out;\n    }\n\n    /**\n     * @return {object} An object containing:\n     *\n     * - `per_reference`: an object where keys are the reference names and the values are arrays of strings.\n     *   Each array is of length equal to the number of clusters and contains the cell type classification for each cluster.\n     * - `integrated`: an array of length equal to the number of clusters.\n     *   Each element is a string specifying the name of the reference with the best label for each cluster.\n     *   Only available if multiple references are requested.\n     *\n     * This is available after running {@linkcode CellLabellingState#compute compute}.\n     */\n    fetchResults() {\n        // No real need to clone these, they're string arrays\n        // so they can't be transferred anyway.\n        let perref = {};\n        for (const [key, val] of Object.entries(this.#cache.results)) {\n            perref[key] = val;\n        }\n\n        let output = { \"per_reference\": perref };\n        if (\"integrated_results\" in this.#cache) {\n            output.integrated = this.#cache.integrated_results;\n        }\n\n        return output;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a reference and each value is the number of shared features between the test and reference daatasets.\n     */\n    fetchNumberOfSharedFeatures() {\n        let output = {};\n        for (const key of Object.keys(this.#cache.results)) {\n            output[key] = this.#cache.prepared[key].built.raw.sharedFeatures();\n        }\n        return output;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            references: [],\n            automatic: true,\n            species: [],\n            gene_id_column: null,\n            gene_id_type: \"ENSEMBL\"\n        };\n    }\n\n    static configureFeatureParameters(guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n           if (val.confidence > best.confidence) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Available references for each species.\n     * Each key is a taxonomy ID and each value is an array of strings containing the names of references for that species.\n     * @type {object}\n     */\n    static availableReferences = {\n        \"9606\": [ \"BlueprintEncode\", \"DatabaseImmuneCellExpression\", \"HumanPrimaryCellAtlas\", \"MonacoImmune\", \"NovershternHematopoietic\" ],\n        \"10090\": [ \"ImmGen\", \"MouseRNAseq\" ]\n    };\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #load_reference(name) {\n        let all_loaded = CellLabellingState.#all_loaded;\n        if (name in all_loaded) {\n            return;\n        }\n\n        const suffixes = [ \n            \"genes.csv.gz\",\n            \"labels_fine.csv.gz\",\n            \"label_names_fine.csv.gz\",\n            \"markers_fine.gmt.gz\",\n            \"matrix.csv.gz\"\n        ];\n\n        let contents = await Promise.all(\n            suffixes.map(\n                async suffix => {\n                    let full = name + \"_\" + suffix;\n                    let b = await CellLabellingState.#downloadFun(baseUrl + \"/\" + full);\n                    return new rutils.SimpleFile(b, { name: full })\n                }\n            )\n        );\n\n        let loaded;\n        try {\n            loaded = scran.loadLabelledReferenceFromBuffers(\n                contents[4].buffer(), // rank matrix\n                contents[3].buffer(), // markers\n                contents[1].buffer()  // label per sample\n            );\n\n            let gene_lines = await rutils.readLines2(contents[0].content(), { compression: \"gz\" }); // gene names\n            let ensembl = [];\n            let symbol = [];\n            let entrez = [];\n            let empty2null = x => (x == \"\" ? null : x);\n\n            gene_lines.forEach(x => {\n                let fields = x.split(\",\");\n                ensembl.push(empty2null(fields[0]));\n                symbol.push(empty2null(fields[1]));\n                entrez.push(empty2null(fields[2]));\n            });\n\n            let labels = await rutils.readLines2(contents[2].content(), { compression: \"gz\" }); // full label names\n            all_loaded[name] = { \n                \"raw\": loaded, \n                \"genes\": {\n                    \"ENSEMBL\": ensembl,\n                    \"SYMBOL\": symbol,\n                    \"ENTREZ\": entrez\n                },\n                \"labels\": labels\n            };\n\n        } catch (e) {\n            utils.freeCache(loaded);\n            throw e;\n        }\n    }\n\n    static #all_loaded = {};\n\n    /**\n     * Flush all cached references.\n     *\n     * By default, {@linkcode CellLabellingState#compute compute} will cache the loaded references in a static member for re-use across {@linkplain CellLabellingState} instances.\n     * These cached references are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        for (const [k, v] of Object.entries(CellLabellingState.#all_loaded)) {\n            v.raw.free();\n        }\n        CellLabellingState.#all_loaded = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download references for the cell labelling step.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = CellLabellingState.#downloadFun;\n        CellLabellingState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #build_reference(name, gene_ids, gene_id_type) {\n        let built;\n        let output;\n        try {\n            let current = CellLabellingState.#all_loaded[name];\n            let loaded = current.raw;\n\n            if (!(gene_id_type in current.genes)) {\n                throw new Error(\"unknown gene type '\" + gene_id_type + \"'\");\n            }\n            let chosen_ids = current.genes[gene_id_type];\n\n            built = scran.buildLabelledReference(gene_ids, loaded, chosen_ids); \n            output = {\n                \"loaded\": current,\n                \"built\": {\n                    \"features\": chosen_ids,\n                    \"raw\": built\n                }\n            };\n\n        } catch (e) {\n            utils.freeCache(built);\n            throw e;\n        }\n\n        return output;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_labelling` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {Array} parameters.references - Array of strings specifying the names of the reference datasets, see {@linkcode CellLabellingState.availableReferences availableReferences} for more details.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If `true`, the column of the annotation that best matches human/mouse Ensembl/symbols is identified and used to set `species`, `gene_id_column` and `gene_id_type`.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species involved in this dataset.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode CellLabellingState.availableReferences availableReferences}.\n     * This is used internally to filter `references` to the entries relevant to these species. \n     * Ignored if `automatic = true`.\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the RNA entry of {@linkcode InputsState#fetchFeatureAnnotations InputsState.fetchFeatureAnnotations} containing the identity of each gene. \n     * If `null`, identifiers are taken from the row names.\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Type of feature identifier in `gene_id_column`.\n     * This should be one of `\"ENSEMBL\"`, `\"SYMBOL\"` or `\"ENTREZ\"`\n     * Ignored if `automatic = true`.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let references;\n        let automatic;\n        let species;\n        let gene_id_column;\n        let gene_id_type;\n\n        if (\"references\" in parameters) {\n            references = parameters.references;\n            automatic = parameters.automatic;\n            species = parameters.species;\n            gene_id_column = parameters.gene_id_column;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            references = [ ...(parameters.human_references), ...(parameters.mouse_references) ];\n            automatic = true;\n            let def = CellLabellingState.defaults();\n            species = def.species;\n            gene_id_column = def.gene_id_column;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (this.valid()) {\n            // Gathering the references.\n            if (\n                this.#inputs.changed ||\n                automatic !== this.#parameters.automatic ||\n                utils.changedParameters(references, this.#parameters.references) ||\n                (\n                    !automatic &&\n                    (\n                        species !== this.#parameters.species ||\n                        gene_id_column !== this.#parameters.gene_id_column ||\n                        gene_id_type !== this.#parameters.gene_id_type\n                    )\n                )\n            ) {\n                let species2 = species;\n                let gene_id_column2 = gene_id_column;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let auto = CellLabellingState.configureFeatureParameters(guesses);\n                    species2 = auto.species;\n                    gene_id_column2 = auto.gene_id_column;\n                    gene_id_type2 = auto.gene_id_type;\n                }\n\n                let allowable = new Set;\n                for (const s of species2) {\n                    if (s in CellLabellingState.availableReferences) {\n                        CellLabellingState.availableReferences[s].forEach(x => { allowable.add(x); });\n                    }\n                }\n\n                // Building each individual reference.\n                let feats = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let gene_ids = (gene_id_column2 == null ? feats.rowNames() : feats.column(gene_id_column2));\n                this.#cache.gene_ids = gene_ids;\n\n                let valid = {};\n                if (gene_ids !== null) {\n                    for (const ref of references) {\n                        if (allowable.has(ref)) {\n                            await this.#load_reference(ref);\n                            valid[ref] = this.#build_reference(ref, gene_ids, gene_id_type2);\n                        }\n                    }\n                }\n\n                this.#flush_prepared();\n                this.#cache.prepared = valid;\n\n                // Building an integrated reference, if necessary.\n                let used_refs = Object.keys(valid);\n                if (used_refs.length > 1) {\n                    let arr = Object.values(valid);\n                    let loaded = arr.map(x => x.loaded.raw);\n                    let feats = arr.map(x => x.built.features);\n                    let built = arr.map(x => x.built.raw);\n\n                    utils.freeCache(this.#cache.integrated);\n                    this.#cache.integrated = scran.integrateLabelledReferences(gene_ids, loaded, feats, built);\n                } else {\n                    utils.freeCache(this.#cache.integrated);\n                    delete this.#cache.integrated;\n                }\n                this.#cache.used_refs = used_refs;\n\n                this.changed = true;\n            }\n\n            let marker_results = this.#markers.fetchResults()[\"RNA\"];\n            let ngroups = marker_results.numberOfGroups();\n            let ngenes = (this.#cache.gene_ids !== null ? this.#cache.gene_ids.length : null);\n            let cluster_means = this.#cache.buffer;\n\n            if (this.#markers.changed) {\n                if (ngenes !== null) {\n                    // Creating a column-major array of mean vectors for each cluster.\n                    cluster_means = utils.allocateCachedArray(ngroups * ngenes, \"Float64Array\", this.#cache);\n                    for (var g = 0; g < ngroups; g++) {\n                        let means = marker_results.means(g, { copy: false }); // Warning: direct view in wasm space - be careful.\n                        let cluster_array = cluster_means.array();\n                        cluster_array.set(means, g * ngenes);\n                    }\n                }\n                this.changed = true;\n            }\n\n            if (this.changed) {\n                // Running classifications on the cluster means. This is a\n                // no-op if gene_ids = null as 'valid' should be empty.\n                let valid = this.#cache.prepared;\n\n                this.#cache.results = {};\n                for (const [key, ref] of Object.entries(valid)) {\n                    let output = scran.labelCells(cluster_means, ref.built.raw, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let labels = [];\n                    for (const o of output) {\n                        labels.push(ref.loaded.labels[o]);\n                    }\n                    this.#cache.results[key] = labels;\n                }\n\n                // Performing additional integration, if necessary. \n                if (\"integrated\" in this.#cache) {\n                    let results = [];\n                    for (const key of this.#cache.used_refs) {\n                        results.push(this.#cache.results[key]);\n                    }\n\n                    let out = scran.integrateCellLabels(cluster_means, results, this.#cache.integrated, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let as_names = [];\n                    out.forEach(i => {\n                        as_names.push(this.#cache.used_refs[i]);\n                    });\n                    this.#cache.integrated_results = as_names;\n                } else {\n                    delete this.#cache.integrated_results;\n                }\n            }\n        } else {\n            this.#cache.results = {};\n            delete this.#cache.integrated_results;\n        }\n\n        this.#parameters.references = bioc.CLONE(references); // make a copy to avoid pass-by-reference behavior.\n        this.#parameters.automatic = automatic;\n        this.#parameters.species = bioc.CLONE(species);\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.gene_id_type = gene_id_type;\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, markers) {\n    let parameters =  {\n        mouse_references: [],\n        human_references: []\n    };\n    let cache = { results: {} };\n\n    // Protect against old analysis states that don't have cell_labelling.\n    if (\"cell_labelling\" in handle.children) {\n        let ghandle = handle.open(\"cell_labelling\");\n        \n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.mouse_references = phandle.open(\"mouse_references\", { load: true }).values;\n            parameters.human_references = phandle.open(\"human_references\", { load: true }).values;\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"per_reference\" in rhandle.children) {\n                let perhandle = rhandle.open(\"per_reference\");\n                for (const key of Object.keys(perhandle.children)) {\n                    cache.results[key] = perhandle.open(key, { load: true }).values;\n                }\n                if (\"integrated\" in rhandle.children) {\n                    cache.integrated_results = rhandle.open(\"integrated\", { load: true }).values;\n                }\n            }\n        }\n    }\n\n    return new CellLabellingState(inputs, markers, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as bioc from \"bioconductor\";\n\n// Monkey-patching these methods so that we can use these WasmArrays\n// as columns in a bioc.DataFrame.\nwa.Uint8WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\nwa.Int32WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\nwa.Float64WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\n\nexport function writeHdf5DataFrame(x, path, { group = \"data\", forceBuffer = false } = {}) {\n    let metadata = {\n        \"path\": path + \"/simple.h5\",\n        \"$schema\": \"hdf5_data_frame/v1.json\",\n        \"data_frame\": {\n            \"dimensions\": [ x.numberOfRows(), x.numberOfColumns() ],\n            \"columns\": [],\n            \"row_names\": false\n        },\n        \"hdf5_data_frame\": {\n            \"group\": group\n        }\n    };\n\n    let temppath = scran.chooseTemporaryPath({ extension: \".csv.gz\" });\n    let contents = temppath;\n    let children = [];\n\n    let fhandle = scran.createNewHDF5File(temppath);\n    try {\n        let ghandle = fhandle.createGroup(group);\n\n        ghandle.writeDataSet(\"column_names\", \"String\", null, x.columnNames());\n        let rn = x.rowNames();\n        if (rn !== null) {\n            metadata.data_frame.row_names = true;\n            ghandle.writeDataSet(\"row_names\", \"String\", null, rn);\n        }\n\n        let dhandle = ghandle.createGroup(\"data\");\n        let coltypes = metadata.data_frame.columns;\n\n        for (var i = 0; i < x.numberOfColumns(); i++) {\n            const curcol = x.column(i);\n            const colname = x.columnNames()[i];\n\n            if (curcol instanceof Array) {\n                let all_types = new Set;\n                let has_null = false;\n                for (const y of curcol) {\n                    if (y === null) {\n                        has_null = true;\n                    } else {\n                        all_types.add(typeof y);\n                    }\n                }\n\n                if (all_types.size > 1) {\n                    throw new Error(\"column '\" + colname + \"' has multiple types\");\n                }\n\n                if (all_types.has(\"string\")) {\n                    coltypes.push({ name: colname, type: \"string\" });\n                    if (!has_null) {\n                        dhandle.writeDataSet(String(i), \"String\", null, curcol);\n                    } else {\n                        let contents = new Set(curcol);\n                        let placeholder = \"NA\";\n                        while (contents.has(placeholder)) {\n                            placeholder = placeholder + \"_\";\n                        }\n\n                        let copy = curcol.slice();\n                        for (var i = 0; i < copy.length; i++) {\n                            if (copy[i] === null) {\n                                copy[i] = placeholder;\n                            }\n                        }\n\n                        let shandle = dhandle.writeDataSet(String(i), \"String\", null, copy);\n                        shandle.writeAttribute(\"missing-value-placeholder\", \"String\", null, placeholder);\n                    }\n\n                } else if (all_types.has(\"number\")) {\n                    coltypes.push({ name: colname, type: \"number\" });\n                    let temp = scran.createFloat64WasmArray(curcol.length);\n                    try {\n                        if (!has_null) {\n                            temp.set(curcol);\n                        } else {\n                            let temparr = temp.array();\n                            for (var i = 0; i < curcol.length; i++) {\n                                if (curcol[i] === null) {\n                                    temparr[i] = Number.NaN;\n                                } else {\n                                    temparr[i] = curcol[i];\n                                }\n                            }\n                        }\n                        dhandle.writeDataSet(String(i), \"Float64\", null, temp);\n                    } finally {\n                        temp.free();\n                    }\n\n                } else if (all_types.size == 0 || all_types.has(\"boolean\")) {\n                    coltypes.push({ name: colname, type: \"boolean\" });\n                    if (has_null) {\n                        let temp = scran.createInt32WasmArray(curcol.length);\n                        try {\n                            for (var i = 0; i < curcol.length; i++) {\n                                if (curcol[i] === null) {\n                                    temparr[i] = -2147483648;\n                                } else {\n                                    temparr[i] = curcol[i];\n                                }\n                            }\n                            dhandle.writeDataSet(String(i), \"Int32\", null, temp);\n                        } finally {\n                            temp.free();\n                        }\n                    } else {\n                        let temp = scran.createUint8WasmArray(curcol.length);\n                        try {\n                            temp.fill(curcol);\n                            dhandle.writeDataSet(String(i), \"Uint8\", null, temp);\n                        } finally {\n                            temp.free();\n                        }\n                    }\n\n                } else {\n                    throw new Error(\"unknown type '\" + Array.from(all_types)[0] + \"' for column '\" + colname + \"'\");\n                }\n\n            } else if (curcol instanceof Uint8Array || curcol instanceof wa.Uint8WasmArray) {\n                coltypes.push({ name: colname, type: \"boolean\" });\n                dhandle.writeDataSet(String(i), \"Uint8\", null, curcol);\n                \n            } else if (curcol instanceof Int32Array || curcol instanceof wa.Int32WasmArray) {\n                coltypes.push({ name: colname, type: \"integer\" });\n                dhandle.writeDataSet(String(i), \"Int32\", null, curcol);\n\n            } else if (curcol instanceof Float64Array || curcol instanceof wa.Float64WasmArray) {\n                coltypes.push({ name: colname, type: \"number\" });\n                dhandle.writeDataSet(String(i), \"Float64\", null, curcol);\n\n            } else if (curcol instanceof bioc.DataFrame) {\n                let subpath = path + \"/column\" + String(i);\n                let child = writeHdf5DataFrame(curcol, subpath, { group, forceBuffer });\n                coltypes.push({ name: colname, type: \"other\", resource: { type: \"local\", path: child.self.metadata.path } });\n                child.self.metadata.is_child = true;\n                children.push(child.self);\n                for (const x of child.children) {\n                    children.push(x);\n                }\n\n            } else {\n                throw new Error(\"unknown type for column '\" + colname + \"'\");\n            }\n        }\n\n        if (forceBuffer) {\n            contents = scran.readFile(temppath);\n            scran.removeFile(temppath);\n        }\n    } catch (e) {\n        scran.removeFile(temppath);\n        throw e;\n    }\n\n    return {\n        self: {\n            metadata: metadata,\n            contents: contents\n        },\n        children: children\n    };\n}\n","import * as bioc from \"bioconductor\";\n\nexport function cloneCached(x, cached) {\n    return (cached ? bioc.CLONE(x) : x);\n}\n\n/**\n * A representation of a matrix of expression values, where the values are hosted on the Wasm heap for easier compute via [**scran.js**](https://github.com/jkanche/scran.js).\n * See [here](https://jkanche.github.io/scran.js/ScranMatrix.html) for more details.\n *\n * @external ScranMatrix\n */ \n\n/**\n * A representation of multiple {@linkplain external:ScranMatrix ScranMatrix} objects, where each object contains data for the same cells but across a different feature space, e.g., for different data modalities.\n * See [here](https://jkanche.github.io/scran.js/MultiMatrix.html) for more details.\n *\n * @external MultiMatrix\n */ \n\n\n/**\n * A DataFrame from the [**bioconductor**](https://github.com/LTLA/bioconductor.js) package, where each column is represented by some arbitrary vector-like object.\n * See [here](https://ltla.github.io/bioconductor.js/DataFrame.html) for more details.\n *\n * @external DataFrame\n */ \n\n/**\n * Representation of a file that is agnostic to the environment (Node.js or browser) or the nature of the contents (buffer or file path).\n * See [here](https://ltla.github.io/bakana/SimpleFile.html) for more details.\n *\n * @external SimpleFile\n */ \n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as bakana from \"bakana\";\nimport * as utils from \"./utils.js\";\n\nconst baseUrl = \"https://experimenthub.bioconductor.org/fetch\";\n\nconst registry = {\n    \"zeisel-brain\": { \"counts\": \"2596\", \"coldata\": \"2598\", \"rowdata\": \"2597\" }, // corresponding to EH2580, 2582 and 2581, for whatever reason.\n    \"segerstolpe-pancreas\": { \"counts\": \"2591\", \"coldata\": \"2593\", \"rowdata\": \"2592\" }, // corresponding to EH2575, 2577 and 2576.\n    \"nestorowa-hsc\": { \"counts\": \"2710\", \"ncol\": 1920 }, // corresponding to EH2694; the coldata doesn't contain much that's useful here.\n    \"aztekin-tail\": { \"counts\": \"3124\", \"coldata\": \"3125\" }, // corresponding to EH3108 and 3109.\n    \"wu-kidney\": { \"counts\": \"3594\", \"coldata\": \"3595\" }, // corresponding to EH3558 and 3559.\n    \"zilionis-mouse-lung\": { \"counts\": \"3478\", \"coldata\": \"3479\" } // corresponding to EH3462 and 3463.\n};\n\nfunction check_class(handle, accepted, base) {\n    if (!(handle instanceof scran.RdsS4Object)) {\n        throw new Error(\"expected an S4 object\");\n    }\n\n    for (const [k, v] of Object.entries(accepted)) {\n        if (handle.className() == k && handle.packageName() == v) {\n            return;\n        }\n    }\n    throw new Error(\"object is not a \" + base + \" or one of its recognized subclasses\");\n}\n\nfunction load_listData_names(lhandle) {\n    let ndx = lhandle.findAttribute(\"names\");\n    if (ndx < 0) {\n        return null;\n    }\n\n    let nhandle;\n    let names;\n    try {\n        nhandle = lhandle.attribute(ndx);\n        names = nhandle.values();\n    } catch(e) {\n        throw new Error(\"failed to load listData names; \" + e.message);\n    } finally {\n        scran.free(nhandle);\n    }\n\n    if (names.length != lhandle.length()) {\n        throw new Error(\"expected names to have same length as listData\");\n    }\n    return names;\n}\n\nfunction populate_list_columns(lhandle, output) {\n    let colnames = load_listData_names(lhandle);\n    if (colnames == null) {\n        throw new Error(\"expected the listData list to be named\");\n    }\n    let columns = {};\n\n    for (var i = 0; i < lhandle.length(); i++) {\n        let curhandle;\n        try {\n            curhandle = lhandle.load(i);\n            if (curhandle instanceof scran.RdsVector && !(curhandle instanceof scran.RdsGenericVector)) {\n                let curcol = curhandle.values();\n                columns[colnames[i]] = curcol;\n                output.nrow = curcol.length;\n            }\n        } finally {\n            scran.free(curhandle);\n        }\n    }\n\n    output.columns = columns;\n    return;\n}\n\nfunction load_data_frame(handle) {\n    let output = {};\n\n    if (handle.type() == \"S4\") {\n        check_class(handle, { \"DFrame\": \"S4Vectors\", \"DataFrame\": \"S4Vectors\" }, \"DFrame\");\n\n        // Loading the atomic columns.\n        let lhandle;\n        try {\n            lhandle = handle.attribute(\"listData\");\n            if (!(lhandle instanceof scran.RdsGenericVector)) {\n                throw new Error(\"listData slot should be a generic list\");\n            }\n            populate_list_columns(lhandle, output);\n        } catch(e) {\n            throw new Error(\"failed to retrieve data from DataFrame's listData; \" + e.message);\n        } finally {\n            scran.free(lhandle);\n        }\n    } else {\n        if (handle.type() != \"vector\") {\n            throw new Error(\"expected a data.frame or DataFrame instance\");\n        }\n        populate_list_columns(handle, output);\n    }\n\n    // Loading the row names.\n    let rnhandle;\n    try {\n        let rndx = handle.findAttribute(\"rownames\");\n        if (rndx >= 0) {\n            rnhandle = handle.attribute(rndx);\n            if (rnhandle instanceof scran.RdsStringVector) {\n                output.row_names = rnhandle.values();\n                output.nrow = output.row_names.length;\n            }\n        }\n    } catch(e) {\n        throw new Error(\"failed to retrieve row names from DataFrame; \" + e.message);\n    } finally {\n        scran.free(rnhandle);\n    }\n\n    // Loading the number of rows.\n    if (!(\"nrow\" in output)) {\n        let nrhandle;\n        try {\n            nrhandle = handle.attribute(\"nrows\");\n            if (!(nrhandle instanceof scran.RdsIntegerVector)) {\n                throw new Error(\"expected an integer vector as the 'nrows' slot\");\n            }\n            let NR = nrhandle.values();\n            if (NR.length != 1) {\n                throw new Error(\"expected an integer vector of length 1 as the 'nrows' slot\");\n            }\n            output.nrow = NR[0];\n        } catch (e) {\n            throw new Error(\"failed to retrieve nrows from DataFrame; \" + e.message);\n        } finally {\n            scran.free(nrhandle);\n        }\n    }\n\n    return output;\n}\n\nfunction extract_matrix_rownames(handle) {\n    let idx;\n\n    if (handle.type() == \"S4\") {\n        check_class(handle, { \"dgCMatrix\": \"Matrix\", \"dgTMatrix\": \"Matrix\" }, \"Matrix\");\n        idx = handle.findAttribute(\"Dimnames\");\n    } else {\n        idx = handle.findAttribute(\"dimnames\");\n    }\n\n    if (idx < 0) {\n        throw new Error(\"count matrix does not have dimnames\");\n    }\n\n    let dimhandle;\n    let firsthandle;\n    let output;\n    \n    try {\n        dimhandle = handle.attribute(idx);\n        if (dimhandle.type() != \"vector\" && dimhandle.size() != 2) {\n            throw new Error(\"dimnames of the count matrix should be a list of length 2\");\n        }\n\n        firsthandle = dimhandle.load(0);\n        if (firsthandle.type() != \"string\") {\n            throw new Error(\"expected a character vector in the first dimnames\");\n        }\n\n        output = firsthandle.values();\n    } finally {\n        scran.free(dimhandle);\n        scran.free(firsthandle);\n    }\n\n    return output;\n}\n\n/**\n * Dataset derived from a SummarizedExperiment-like representation on Bioconductor's [ExperimentHub](https://bioconductor.org/packages/ExperimentHub).\n */\nexport class ExperimentHubDataset {\n    #id;\n\n    #rowdata;\n    #coldata;\n\n    #counts_handle;\n    #counts_loaded;\n\n    // We should _know_ which experiments correspond to which modality for each\n    // dataset in our registry, so there's no need to provide options for that.\n    // However, we might not know how to choose an appropriate primary\n    // identifier for combining datasets, hence these options.\n    #options;\n\n    /****************************************\n     ****************************************/\n\n    static #downloadFun = async url => {\n        let resp = await fetch(url);\n        if (!resp.ok) {\n            throw new Error(\"failed to fetch content at \" + url + \" (\" + resp.status + \")\");\n        }\n        return new Uint8Array(await resp.arrayBuffer());\n    }\n\n    /** \n     * @param {function} fun - Function that accepts a URL string and downloads the resource,\n     * returning a Uint8Array of its contents.\n     * Alternatively, on Node.js, the funciton may return a string containing the path to the downloaded resource.\n     * @return {function} Previous setting of the download function.\n     */\n    static setDownloadFun(fun) {\n        let previous = ExperimentHubDataset.#downloadFun;\n        ExperimentHubDataset.#downloadFun = fun;\n        return previous;\n    }\n\n    /****************************************\n     ****************************************/\n\n    /**\n     * @return {Array} Array of strings containing identifiers of available datasets.\n     * @static\n     */\n    static availableDatasets() {\n        return Object.keys(registry);\n    }\n\n    /**\n     * @param {string} id - Identifier of a dataset to load.\n     * This should be a string in {@linkcode ExperimentHubDataset.availableDatasets availableDatasets}.\n     */\n    constructor(id) {\n        this.#id = id;\n        if (!(this.#id in registry)) {\n            throw new Error(\"unrecognized identifier '\" + this.#id + \"' for ExperimentHub-based datasets\");\n        }\n\n        this.#options = ExperimentHubDataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode ExperimentHubDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            primaryRnaFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode ExperimentHubDataset#load load} (but not {@linkcode ExperimentHubDataset#summary summary}).\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"ExperimentHub\";\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode ExperimentHubDataset#load load} or {@linkcodeExperimentHubDataset#annotations annotations}. \n     */\n    clear() {\n        scran.free(this.#counts_handle);\n        scran.free(this.#counts_loaded);\n        this.#counts_handle = null;\n        this.#counts_loaded = null;\n        this.#rowdata = null;\n        this.#coldata = null;\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return { \"id\": this.#id, \"options\": this.options() };\n    }\n\n    async #counts() {\n        if (this.#counts_handle !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n        let counts_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.counts);\n        try {\n            this.#counts_loaded = scran.readRds(counts_deets);\n            this.#counts_handle = this.#counts_loaded.value();\n        } catch(e) {\n            scran.free(this.#counts_handle);\n            scran.free(this.#counts_loaded);\n            throw e;\n        }\n    }\n\n    async #features() {\n        if (this.#rowdata !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n\n        if (\"rowdata\" in details) {\n            let rowdata_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.rowdata);\n\n            let rowdata_load;\n            let rowdata_handle;\n            try {\n                rowdata_load = scran.readRds(rowdata_deets);\n                rowdata_handle = rowdata_load.value();\n                let rowdata = load_data_frame(rowdata_handle);\n                let names = rowdata.row_names;\n\n                let output = {};\n                if (names) {\n                    output.id = names;\n                }\n\n                for (const [k, v] of Object.entries(rowdata.columns)) {\n                    if (k.match(/^sym/)) {\n                        output[k] = v;\n                    }\n                }\n\n                if (Object.keys(output).length == 0) {\n                    throw new Error(\"no acceptable feature identifiers found in the rowData DataFrame\");\n                }\n                this.#rowdata = new bioc.DataFrame(output);\n            } finally {\n                scran.free(rowdata_handle);\n                scran.free(rowdata_load);\n            }\n            return;\n        }\n\n        // Otherwise we pull the details from the counts.\n        await this.#counts();\n        let ids = extract_matrix_rownames(this.#counts_handle);\n        this.#rowdata = new bioc.DataFrame({ id: ids });\n    }\n\n    async #cells() {\n        if (this.#coldata !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n        if (\"coldata\" in details) {\n            let coldata_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.coldata);\n\n            let coldata_load;\n            let coldata_handle; \n            let cd_df;\n            try {\n                coldata_load = scran.readRds(coldata_deets);\n                coldata_handle = coldata_load.value();\n                cd_df = load_data_frame(coldata_handle);\n            } finally {\n                scran.free(coldata_handle);\n                scran.free(coldata_load);\n            }\n\n            this.#coldata = new bioc.DataFrame(cd_df.columns, { numberOfRows: cd_df.nrow });\n        } else {\n            this.#coldata = new bioc.DataFrame({}, { numberOfRows: details.ncol });\n        }\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode ExperimentHubDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { cells: utils.cloneCached(this.#coldata, cache) };\n        let my_rd = utils.cloneCached(this.#rowdata, cache);\n        output.modality_features = { \"RNA\": my_rd };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #fetchPrimaryId(curfeat) {\n        let id = this.#options.primaryRnaFeatureIdColumn;\n        if ((typeof id == \"string\" && curfeat.hasColumn(id)) || (typeof id == \"number\" && id < curfeat.numberOfColumns())) {\n            return { RNA: curfeat.column(id) };\n        } else {\n            return { RNA: curfeat.rowNames() };\n        }\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode ExperimentHubDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n        let preview = this.#fetchPrimaryId(this.#rowdata);\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an integer array containing the feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode ExperimentHubDataset#defaults defaults} or with {@linkcode ExperimentHubDataset#setOptions setOptions}.\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#counts();\n\n        let output = {\n            cells: utils.cloneCached(this.#coldata, cache)\n        };\n\n        // Hard-coding the fact that we're dealing with RNA here, as all\n        // registry entries are currently RNA-only anyway.\n        let details = registry[this.#id];\n        try {\n            output.matrix = new scran.MultiMatrix;\n            let counts = scran.initializeSparseMatrixFromRds(this.#counts_handle, { consume: !cache });\n\n            output.matrix.add(\"RNA\", counts.matrix);\n            output.row_ids = { \"RNA\": counts.row_ids };\n\n            let perm_features = bioc.SLICE(this.#rowdata, counts.row_ids);\n            output.features = { \"RNA\": perm_features };\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        output.primary_ids = this.#fetchPrimaryId(output.features.RNA);\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        const enc = new TextEncoder;\n        let buffer = enc.encode(this.#id);\n\n        // Storing it as a string in the buffer.\n        let output = {\n            type: \"id\",\n            file: new bakana.SimpleFile(buffer, { name: \"id\" })\n        };\n\n        return {\n            files: [ output ],\n            options: this.options()\n        }\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode ExperimentHubDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {ExperimentHubDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        let args = {};\n\n        // This should contain 'id'.\n        for (const x of files) {\n            const dec = new TextDecoder;\n            args[x.type] = dec.decode(x.file.buffer());\n        }\n\n        if (!(\"id\" in args)) {\n            throw new Error(\"expected a file of type 'id' when unserializing ExperimentHub dataset\"); \n        }\n        return new ExperimentHubDataset(args.id, options);\n    }\n}\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * Representation of a HTTP response error.\n * The error message is captured in `message` as usual, but the HTTP status code may also be retrieved via the `statusCode` property.\n */\nexport class HttpError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.statusCode = code;\n    }\n}\n\nexport async function checkHttpResponse(res, msg) {\n    if (res.ok) {\n        return;\n    }\n\n    let info = await res.json();\n    if (info.status == \"error\") {\n        throw new HttpError(msg + \"; \" + info.reason, res.status);\n    } \n\n    throw new HttpError(msg, res.status);\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X HDF5 feature-barcode matrix format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices) for details.\n */\nexport class TenxHdf5Dataset { \n    #h5_file;\n    #h5_path;\n    #h5_flush;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"h5\", file: fun(this.#h5_file) }];\n        let options = this.options();\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} h5File - Contents of a HDF5 file in the 10X feature-barcode format.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     */\n    constructor(h5File) {\n        if (h5File instanceof afile.SimpleFile) {\n            this.#h5_file = h5File;\n        } else {\n            this.#h5_file = new afile.SimpleFile(h5File);\n        }\n\n        this.#options = TenxHdf5Dataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxHdf5Dataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxHdf5Dataset#load load} (but not {@linkcode TenxHdf5Dataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * If `null` or the string is not present among the feature types, no RNA features are to be loaded.\n     *\n     * If no feature type information is available in the dataset, all features are considered to be genes by default.\n     * This behavior can also be explicitly requested by setting this argument to the only non-`null` value among all `featureType*Name` parameters.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * If `null` or the string is not present among the feature types, no ADT features are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be ADTs.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * If `null` or the string is not present among the feature types, no guides are to be loaded.\n     * \n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be guides.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #instantiate() {\n        if (this.#h5_path !== null) {\n            return;\n        }\n\n        let info = scran.realizeFile(this.#h5_file.content());\n        this.#h5_path = info.path;\n        this.#h5_flush = info.flush;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxHdf5Dataset#load load} or {@linkcodeTenxHdf5Dataset#summary summary}. \n     */\n    clear() {\n        if (typeof this.#h5_flush == \"function\") {\n            this.#h5_flush();\n        }\n        this.#h5_flush = null;\n        this.#h5_path = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"10X\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let handle = new scran.H5File(this.#h5_path);\n        if (!(\"matrix\" in handle.children) || handle.children[\"matrix\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix' group at the top level of the file\");\n        }\n        let mhandle = handle.open(\"matrix\");\n\n        if (!(\"features\" in mhandle.children) || mhandle.children[\"features\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix/features' group containing the feature annotation\");\n        }\n        let fhandle = mhandle.open(\"features\");\n\n        let ids = eutils.extractHDF5Strings(fhandle, \"id\");\n        if (ids == null) {\n            throw new Error(\"expected a 'matrix/features/id' string dataset containing the feature IDs\");\n        }\n        let feats = new bioc.DataFrame({ id: ids }); // build it piece-by-piece for a well-defined ordering.\n\n        let names = eutils.extractHDF5Strings(fhandle, \"name\");\n        if (names !== null) {\n            feats.$setColumn(\"name\", names);\n        }\n\n        let ftype = eutils.extractHDF5Strings(fhandle, \"feature_type\");\n        if (ftype !== null) {\n            feats.$setColumn(\"type\", ftype);\n        }\n\n        this.#raw_features = feats;\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let details = scran.extractHDF5MatrixDetails(this.#h5_path, \"matrix\");\n        this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: details.columns });\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    summary({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxHdf5Dataset#load load} but the order of values may be different.\n     */\n    previewPrimaryIds({ cache = false } = {}) {\n        this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxHdf5Dataset#defaults defaults} or with {@linkcode TenxHdf5Dataset#setOptions setOptions}.\n     *\n     * If the feature annotation lacks information about the feature types, it is assumed that all features are genes, i.e., only the RNA modality is present.\n     */\n    load({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let loaded = scran.initializeSparseMatrixFromHDF5(this.#h5_path, \"matrix\"); // collection gets handled inside splitScranMatrixAndFeatures.\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\");\n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxHdf5Dataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxHdf5Dataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"h5\") {\n            throw new Error(\"expected exactly one file of type 'h5' for 10X HDF5 unserialization\");\n        }\n        return new TenxHdf5Dataset(files[0].file, options);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**\n * Any class that satisfies the ArtifactdbProjectNavigator contract, so called as it is intended to \"navigate\" an ArtifactDB project directory.\n * This should provide the following methods:\n * \n * - `metadata(p)`, a (possibly async) method that accepts a string `p` containing a relative path to a resource inside an ArtifactDB project directory,\n *   and returns an object containing the metadata for that object.\n *   Any redirections should be resolved by this method.\n *\n *   Note that {@linkplain AbstractArtifactdbDataset} will automatically cache the outputs of all `metadata()` calls between any invocations of {@linkcode AbstractArtifactdbDataset#clear clear},\n *   to improve efficiency when repeatedly accessing the same metadata.\n *   The same applies to {@linkplain AbstractArtifactdbResult}.\n * - `file(p)`, a (possibly async) method that accepts a string `p` containing a relative path inside a project directory and returns the contents of the file at that path.\n *   The return value should typically be a Uint8Array; on Node.js, methods may alternatively return a string containing a path to the file on the local file system.\n *   The method does not need to handle redirections from `p`.\n *\n * Optionally, the ArtifactdbProjectNavigator class may implement a `clear()` method to remove any cached content.\n * This will be called by {@linkcode AbstractArtifactdbDataset#clear AbstractArtifactdbDataset.clear} and  {@linkcode AbstractArtifactdbResult#clear AbstractArtifactdbResult.clear}.\n *\n * @typedef ArtifactdbProjectNavigator\n */\n\n/**************************\n ******* Internals ********\n **************************/\n\nasync function load_data_frame(info, navigator) {\n    if (typeof info == \"string\") {\n        info = await navigator.metadata(info);\n    }\n    let contents = await navigator.file(info.path);\n\n    let colnames;\n    let columns;\n    let rownames = null;\n\n    if (info[\"$schema\"].startsWith(\"csv_data_frame/\")) {\n        // TODO: replace with comservatory parser.\n        let parsed = await eutils.readTable2(contents, { delim: \",\" });\n        colnames = parsed.shift();\n\n        columns = new Array(colnames.length);\n        for (var i = 0; i < columns.length; i++) {\n            let current = [];\n            for (const x of parsed) {\n                current.push(x[i]);\n            }\n            columns[i] = current;\n        }\n\n        if (info.data_frame.row_names) {\n            rownames = columns.shift();\n            colnames.shift();\n        }\n\n        // Mutating the type... this doesn't quite handle NAs and NaNs properly, but whatever.\n        for (var i = 0; i < columns.length; i++) {\n            let type = info.data_frame.columns[i].type;\n            if (type == \"integer\") {\n                columns[i] = new Int32Array(columns[i]);\n            } else if (type == \"number\") {\n                columns[i] = new Float64Array(columns[i]);\n            } else if (type == \"boolean\") {\n                columns[i] = columns[i].map(x => x == \"true\");\n            }\n        }\n\n    } else if (info[\"$schema\"].startsWith(\"hdf5_data_frame/\")) {\n        let out = scran.realizeFile(contents);\n        try {\n            let handle = new scran.H5File(out.path);\n            let ghandle = handle.open(info.hdf5_data_frame.group);\n\n            colnames = ghandle.open(\"column_names\", { load: true }).values;\n            if (info.data_frame.row_names) {\n                rownames = ghandle.open(\"row_names\", { load: true }).values;\n            }\n\n            columns = [];\n            let chandle = ghandle.open(\"data\");\n            for (var i = 0; i < colnames.length; i++) {\n                if (!(String(i) in chandle.children)) {\n                    columns.push(null);\n                    continue;\n                }\n\n                let dhandle = chandle.open(String(i), { load: true });\n                let current = dhandle.values;\n\n                let type = info.data_frame.columns[i];\n                if (type == \"integer\") {\n                    if (current instanceof Float64Array || current instanceof Float32Array) {\n                        current = new Int32Array(current);\n                    }\n\n                } else if (type == \"number\") {\n                    if (!(current instanceof Float64Array) && !(current instanceof Float32Array)) {\n                        current = new Float64Array(current);\n                    }\n\n                } else if (type == \"boolean\") {\n                    let replacement = new Array(current.length);\n                    for (var i = 0; i < current.length; i++) {\n                        if (current[i] == -2147483648) {\n                            replacement[i] = null;\n                        } else {\n                            replacement[i] = current[i] != 0\n                        }\n                    }\n                    current = replacement;\n\n                } else if (type == \"string\" || type == \"date\") {\n                    if (\"missing-value-placeholder\" in dhandle.attributes) {\n                        let placeholder = dhandle.readAttribute(\"missing-value-placeholder\").values[0];\n                        for (var i = 0; i < current.length; i++) {\n                            if (current[i] == placeholder) {\n                                current[i] = null;\n                            }\n                        }\n                    }\n                }\n\n                columns.push(current);\n            }\n        } finally {\n            out.flush();\n        }\n\n    } else {\n        throw new Error(\"unknown data_frame schema type '\" + info[\"$schema\"] + \"'\");\n    }\n\n    let new_columns = {};\n    let new_colnames = [];\n    for (var i = 0; i < columns.length; i++) {\n        if (info.data_frame.columns[i].type === \"other\") {\n            let nest_meta = await navigator.metadata(info.data_frame.columns[i].resource.path);\n            try {\n                new_columns[colnames[i]] = await load_data_frame(nest_meta, navigator);\n                new_colnames.push(colnames[i]);\n            } catch (e) {\n                console.warn(e);\n            }\n        } else {\n            new_columns[colnames[i]] = columns[i];\n            new_colnames.push(colnames[i]);\n        }\n    }\n\n    return new bioc.DataFrame(new_columns, { \n        columnOrder: new_colnames, \n        rowNames: rownames, \n        numberOfRows: info.data_frame.dimensions[0] \n    });\n}\n\nconst main_experiment_name = \"\";\n\nasync function extract_all_features(path, navigator) {\n    let extract_features = async se_meta => {\n        if (\"row_data\" in se_meta.summarized_experiment) {\n            let row_path = se_meta.summarized_experiment.row_data.resource.path;\n            return await load_data_frame(row_path, navigator);\n        } else {\n            return new bioc.DataFrame({}, { numberOfRows: se_meta.summarized_experiment.dimensions[0] });\n        }\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let output = {};\n    output[main_experiment_name] = await extract_features(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                output[alt.name] = await extract_features(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return output;\n}\n\nasync function extract_all_assay_names(path, navigator) {\n    let extract_assay_names = se_meta => {\n        let output = [];\n        for (const ass of se_meta.summarized_experiment.assays) {\n            output.push(ass.name);\n        }\n        return output;\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let assays = {};\n    assays[main_experiment_name] = extract_assay_names(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                assays[alt.name] = extract_assay_names(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return assays;\n}\n\n// This specifically loads the log-counts created by the dumper.\n// TODO: replace this with chihaya.js.\nasync function extract_logcounts(handle, navigator) {\n    if (handle.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (handle.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (Math.abs(handle.open(\"value\", { load: true }).values[0] - Math.log(2)) > 0.00000001) {\n        return null;\n    }\n    if (handle.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (handle.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n\n    let ghandle2 = handle.open(\"seed\");\n    if (ghandle2.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle2.readAttribute(\"delayed_operation\").values[0] !== \"unary math\") {\n        return null;\n    }\n    if (ghandle2.open(\"method\", { load: true }).values[0] !== \"log1p\") {\n        return null;\n    }\n\n    let ghandle3 = ghandle2.open(\"seed\");\n    if (ghandle3.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle3.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (ghandle3.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (ghandle3.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n    if (ghandle3.open(\"along\", { load: true }).values[0] !== 1) {\n        return null;\n    }\n    let sf = ghandle3.open(\"value\", { load: true }).values;\n\n    let ahandle = ghandle3.open(\"seed\");\n    if (ahandle.readAttribute(\"delayed_type\").values[0] !== \"array\") {\n        return null;\n    }\n    if (ahandle.readAttribute(\"delayed_array\").values[0] !== \"custom alabaster local array\") {\n        return null;\n    }\n    let path = ahandle.open(\"path\", { load: true }).values[0];\n\n    let mat;\n    let output = {};\n    try {\n        mat = await extract_assay_raw(path, navigator, false); // don't force it to be integer, but we don't mind if it is.\n        output.matrix = scran.logNormCounts(mat.matrix, { sizeFactors: sf, center: false });\n        output.row_ids = mat.row_ids;\n    } finally {\n        scran.free(mat.matrix);\n    }\n                \n    return output;\n}\n\nasync function extract_assay(meta, assay, navigator, forceInteger) {\n    if (typeof assay == \"string\") {\n        var counter = 0;\n        for (const ass of meta.summarized_experiment.assays) {\n            if (ass.name == assay) {\n                assay = counter;\n                break;\n            }\n            counter++;\n        }\n        if (counter == meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay '\" + assay + \"' not found\");\n        }\n    } else {\n        if (assay >= meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay \" + String(assay) + \" out of range\");\n        }\n    }\n\n    let asspath = meta.summarized_experiment.assays[assay].resource.path;\n    return extract_assay_raw(asspath, navigator, forceInteger);\n}\n\nasync function extract_assay_raw(asspath, navigator, forceInteger) {\n    let assmeta = await navigator.metadata(asspath);\n    let contents = await navigator.file(assmeta.path);\n    let output;\n\n    let schema = assmeta[\"$schema\"];\n    let is_dense = schema.startsWith(\"hdf5_dense_array/\");\n    let is_sparse = schema.startsWith(\"hdf5_sparse_matrix/\");\n\n    if (is_dense || is_sparse) {\n        let name = (is_sparse ?  assmeta.hdf5_sparse_matrix.group : assmeta.hdf5_dense_array.dataset);\n        let stuff = scran.realizeFile(contents);\n        try {\n            output = scran.initializeSparseMatrixFromHDF5(stuff.path, name, { forceInteger });\n        } finally {\n            stuff.flush();\n        }\n\n    } else if (assmeta[\"$schema\"].startsWith(\"hdf5_delayed_array/\")) {\n        let stuff = scran.realizeFile(contents);\n        try {\n            let fhandle = new scran.H5File(stuff.path);\n            let ghandle = fhandle.open(assmeta.hdf5_delayed_array.group);\n\n            // TODO: replace with calls to chihaya.js.\n            output = await extract_logcounts(ghandle, navigator);\n            if (output == null) {\n                throw new Error(\"currently only supporting bakana-generated log-counts for delayed arrays\");\n            }\n        } finally {\n            stuff.flush();\n        }\n\n    } else {\n        throw new Error(\"array schema '\" + assmeta[\"$schema\"] + \"' is currently not supported\");\n    }\n\n    return output;\n}\n\nasync function extract_other_data(other_path, navigator) {\n    let othermeta = await navigator.metadata(other_path);\n    if (!othermeta[\"$schema\"].startsWith(\"json_simple_list/\")) {\n        throw new Error(\"currently only support JSON-formatted lists in the 'other_data'\");\n    }\n\n    let contents = await navigator.file(othermeta.path);\n    let ofile = new afile.SimpleFile(contents, { name: \"list.json\" });\n    let unpacked = eutils.unpackText(ofile.buffer(), { compression: (othermeta.json_simple_list.compression == \"gzip\" ? \"gz\" : \"none\") });\n    let parsed = JSON.parse(unpacked);\n    return extract_list_data_internal(parsed);\n}\n\nfunction extract_list_data_internal(obj) {\n    if (!(\"type\" in obj)) {\n        throw new Error(\"non-standard JSON object for 'json_simple_list' schema\");\n    }\n\n    if (obj.type == \"number\") {\n        if (obj.values instanceof Array) {\n            let output = new Float64Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? Number.NaN : x) \n            });\n            return output;\n        } else {\n            return (obj.values == null ? Number.NaN : obj.values);\n        }\n\n    } else if (obj.type == \"integer\") {\n        if (obj.values instanceof Array) {\n            let output = new Int32Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? -2147483648 : x) \n            });\n            return output;\n        } else {\n            return obj.values;\n        }\n\n    } else if (obj.type == \"boolean\" || obj.type == \"string\") {\n        return obj.values;\n\n    } else if (obj.type == \"list\") {\n        if (\"names\" in obj) {\n            let output = {};\n            for (var i = 0; i < obj.values.length; i++) {\n                output[obj.names[i]] = extract_list_data_internal(obj.values[i]);\n            }\n            return output;\n        } else {\n            let output = [];\n            for (var i = 0; i < obj.values.length; i++) {\n                output.push(extract_list_data_internal(obj.values[i]));\n            }\n            return output;\n        }\n\n    } else if (obj.type == \"nothing\") {\n        return null;\n\n    } else {\n        console.warn(\"JSON simple list containing type '\" + obj.type + \"' is not yet supported\");\n        return null;\n    }\n}\n\n/***********************\n ******* Cacher ********\n ***********************/\n\n// As we'll be using the metadata often, we cache it at this level. This\n// removes the burden of caching on the implementation of the navigator. \nclass MetadataCacheWrapper {\n    #navigator;\n    #metadata_cache;\n\n    constructor(nav) {\n        this.#navigator = nav;\n        this.#metadata_cache = {};\n    }\n\n    clear() {\n        this.#metadata_cache = {};\n        if (\"clear\" in this.#navigator) {\n            this.#navigator.clear();\n        }\n    }\n\n    async metadata(path) {\n        if (path in this.#metadata_cache) {\n            return this.#metadata_cache[path];\n        } else {\n            let content = await this.#navigator.metadata(path);\n            this.#metadata_cache[path] = content;\n            return content;\n        }\n    }\n\n    file(path) {\n        return this.#navigator.file(path);\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n * Subclasses should define `abbreviate()` and `serialize()` methods, as well as the static `format()` and `unserialize()` methods - \n * see the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md) for more details.\n */\nexport class AbstractArtifactdbDataset {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbDataset.defaults();\n\n        // Don't call this.clear() here. We don't want to clear the navigator's\n        // cache at this point, as the navigator might contain some cached\n        // values when passed to the constructor. We should respect any caches\n        // until we're specifically told to discard it with clear() or cache =\n        // false in load() or summary().\n        this.#reset_local_caches();\n        return;\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            rnaCountAssay: 0, \n            adtCountAssay: 0, \n            crisprCountAssay: 0,\n            rnaExperiment: \"\", \n            adtExperiment: \"Antibody Capture\", \n            crisprExperiment: \"CRISPR Guide Capture\",\n            primaryRnaFeatureIdColumn: null, \n            primaryAdtFeatureIdColumn: null,\n            primaryCrisprFeatureIdColumn: null \n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbDataset#load load} (but not {@linkcode AbstractArtifactdbDataset#summary summary}).\n     * @param {string|number} [options.rnaCountAssay] - Name or index of the assay containing the RNA count matrix.\n     * @param {string|number} [options.adtCountAssay] - Name or index of the assay containing the ADT count matrix.\n     * @param {string|number} [options.crisprCountAssay] - Name or index of the assay containing the CRISPR count matrix.\n     * @param {?(string|number)} [options.rnaExperiment] - Name or index of the alternative experiment containing gene expression data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     * @param {?(string|number)} [options.adtExperiment] - Name or index of the alternative experiment containing ADT data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     * @param {?(string|number)} [options.crisprExperiment] - Name or index of the alternative experiment containing CRISPR guide data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     * @param {?(string|number)} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbDataset#load load} or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator)\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode AbstractArtifactdbDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n\n        let fmapping = {\n            RNA: this.#options.rnaExperiment, \n            ADT: this.#options.adtExperiment, \n            CRISPR: this.#options.crisprExperiment \n        };\n\n        let preview = futils.extractRemappedPrimaryIds(this.#raw_features, fmapping, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode AbstractArtifactdbDataset#defaults defaults} or with {@linkcode AbstractArtifactdbDataset#setOptions setOptions}.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            row_ids: {},\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#options.rnaExperiment, assay: this.#options.rnaCountAssay },\n            ADT: { exp: this.#options.adtExperiment, assay: this.#options.adtCountAssay },\n            CRISPR: { exp: this.#options.crisprExperiment, assay: this.#options.crisprCountAssay }\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let altmap = {};\n        let alts = [];\n        if (\"single_cell_experiment\" in full_meta) {\n            alts = full_meta.single_cell_experiment.alternative_experiments;\n            for (const alt of alts) {\n                altmap[alt.name] = alt.resource.path;\n            }\n        }\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let meta = null;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        meta = full_meta;\n                    } else {\n                        if (!(v.exp in altmap)) {\n                            continue;\n                        }\n                        meta = await this.#navigator.metadata(altmap[v.exp]);\n                    }\n                } else {\n                    if (v.exp >= alts.length) {\n                        continue;\n                    }\n                    name = alts[v.exp].name;\n                    meta = await this.#navigator.metadata(alts[v.exp].resource.path);\n                }\n\n                let loaded = await extract_assay(meta, v.assay, this.#navigator, true);\n                output.matrix.add(k, loaded.matrix);\n                let out_ids = loaded.row_ids;\n                output.row_ids[k] = out_ids;\n                output.features[k] = bioc.SLICE(this.#raw_features[name], out_ids);\n            }\n\n            output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentDatasetBase = AbstractArtifactdbDataset;\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n */\nexport class AbstractArtifactdbResult {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n    #raw_other;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbResult.defaults();\n\n        // Don't call clear() here, see comments above in the Dataset constructor.\n        this.#reset_local_caches();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbResults#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return { \n            primaryAssay: 0,\n            isPrimaryNormalized: true,\n            reducedDimensionNames: null\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbResult#load load} (but not {@linkcode AbstractArtifactdbResult#summary summary}.\n     * @param {object|string|number} [options.primaryAssay] - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     * @param {object|boolean} [options.isPrimaryNormalized] - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     * @param {?Array} [options.reducedDimensionNames] - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setOptions(options) {\n        // Cloning to avoid pass-by-reference links.\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = bioc.CLONE(v);\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#raw_other = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbResult#load load} or {@linkcode AbstractArtifactdbResult#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    async #other() {\n        if (this.#raw_other !== null) {\n            return;\n        }\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"other_data\" in full_meta.summarized_experiment) {\n            let other_path = full_meta.summarized_experiment.other_data.resource.path;\n            this.#raw_other = await extract_other_data(other_path, this.#navigator);\n        } else {\n            this.#raw_other = {};\n        }\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async \n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator),\n            reduced_dimension_names: [],\n            other_metadata: this.#raw_other\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta) {\n            for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                let redmeta = await this.#navigator.metadata(red.resource.path);\n                if (redmeta[\"$schema\"].startsWith(\"hdf5_dense_array/\") && redmeta.array.dimensions.length == 2) {\n                    output.reduced_dimension_names.push(red.name);\n                }\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {},\n            other_metadata: this.#raw_other\n        };\n\n        // Fetch the reduced dimensions first.\n        {\n            let reddims = this.#options.reducedDimensionNames;\n            if (reddims == null) {\n                reddims = [];\n                if (\"single_cell_experiment\" in full_meta) {\n                    for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                        reddims.push(red.name);\n                    }\n                }\n            }\n\n            if (reddims.length > 0) {\n                let redmap = {};\n                for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                    redmap[red.name] = red.resource.path;\n                }\n\n                for (const k of reddims) {\n                    let redmeta = await this.#navigator.metadata(redmap[k]); // this should be only HDF5 dense matrices.\n                    let dims = redmeta.array.dimensions;\n                    let redcontents = await this.#navigator.file(redmeta.path); \n\n                    let realized = scran.realizeFile(redcontents);\n                    let acquired = [];\n                    try {\n                        let fhandle = new scran.H5File(realized.path);\n                        let dhandle = fhandle.open(redmeta.hdf5_dense_array.dataset, { load: true });\n                        let contents = dhandle.values;\n                        for (var d = 0; d < dims[1]; d++) {\n                            acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n                        }\n                    } finally {\n                        realized.flush();\n                    }\n\n                    output.reduced_dimensions[k] = acquired;\n                }\n            }\n        }\n\n        // Now fetching the assay matrix.\n        {\n            let altmap = {};\n            if (\"single_cell_experiment\" in full_meta) {\n                for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n                    altmap[alt.name] = alt.resource.path;\n                }\n            }\n\n            try {\n                for (const [k, v] of Object.entries(this.#raw_features)) {\n                    let curassay = this.#options.primaryAssay;\n                    if (typeof curassay == \"object\") {\n                        if (k in curassay) {\n                            curassay = curassay[k];\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    let curnormalized = this.#options.isPrimaryNormalized;\n                    if (typeof curnormalized == \"object\") {\n                        if (k in curnormalized) {\n                            curnormalized = curnormalized[k];\n                        } else {\n                            curnormalized = true;\n                        }\n                    }\n\n                    let meta;\n                    if (k === \"\") {\n                        meta = full_meta;\n                    } else {\n                        meta = await this.#navigator.metadata(altmap[k]);\n                    }\n\n                    let loaded = await extract_assay(meta, curassay, this.#navigator, !curnormalized);\n                    output.matrix.add(k, loaded.matrix);\n\n                    if (!curnormalized) {\n                        let normed = scran.logNormCounts(loaded.matrix, { allowZeros: true });\n                        output.matrix.add(k, normed);\n                    }\n\n                    if (loaded.row_ids !== null) {\n                        output.features[k] = bioc.SLICE(this.#raw_features[k], loaded.row_ids);\n                    } else {\n                        output.features[k] = this.#raw_features[k];\n                    }\n                }\n\n            } catch (e) {\n                scran.free(output.matrix);\n                throw e;\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentResultBase = AbstractArtifactdbResult;\n","export class SimpleFile {\n    #mode;\n    #buffer;\n    #file;\n    #name;\n\n    constructor(x, { name = null } = {}) {\n        if (x instanceof File) {\n            this.#mode = \"file\";\n            this.#file = x;\n            if (name === null) {\n                name = x.name;\n            }\n            this.#name = name;\n        } else if (x instanceof Uint8Array) {\n            this.#mode = \"buffer\";\n            this.#buffer = x; \n            if (name === null) {\n                throw new Error(\"'name' must be provided for Uint8Array inputs in SimpleFile constructor\");\n            }\n            this.#name = name;\n        } else {\n            throw new Error(\"unknown type '\" + typeof(x) + \"' for SimpleFile constructor\");\n        }\n    }\n\n    buffer({ copy = false } = {}) {\n        if (this.#mode == \"file\") {\n            let reader = new FileReaderSync();\n            let b = reader.readAsArrayBuffer(this.#file);\n            return new Uint8Array(b);\n        } else {\n            if (copy) {\n                return this.#buffer.slice();\n            } else {\n                return this.#buffer;\n            }\n        }\n    }\n\n    size() {\n        if (this.#mode == \"file\") {\n            return this.#file.size;\n        } else {\n            return this.#buffer.length;\n        }\n    }\n\n    name() {\n        return this.#name;\n    }\n\n    content({ copy = false } = {}) {\n        return this.buffer({ copy: copy });\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X Matrix Market format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/matrices) for details.\n */\nexport class TenxMatrixMarketDataset {\n    #matrix_file;\n    #feature_file;\n    #barcode_file;\n\n    #dimensions;\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"mtx\", file: fun(this.#matrix_file) }];\n\n        if (this.#feature_file !== null) {\n            files.push({ type: \"genes\", file: fun(this.#feature_file) });\n        }\n\n        if (this.#barcode_file !== null) {\n            files.push({ type: \"annotations\", file: fun(this.#barcode_file) });\n        }\n\n        let options = this.options(); \n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} matrixFile - A Matrix Market file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {?(SimpleFile|string|Uint8Array|File)} featureFile - Contents of a feature annotation file.\n     * If `null`, it is assumed that no file was available.\n     * @param {?(SimpleFile|string|Uint8Array|File)} barcodeFile - Contents of a barcode annotation file.\n     * If `null`, it is assumed that no file was available.\n     */\n    constructor(matrixFile, featureFile, barcodeFile, { \n        featureTypeRnaName = \"Gene Expression\", \n        featureTypeAdtName = \"Antibody Capture\", \n        featureTypeCrisprName = \"CRISPR Guide Capture\", \n        primaryRnaFeatureIdColumn = 0, \n        primaryAdtFeatureIdColumn = 0,\n        primaryCrisprFeatureIdColumn = 0\n    } = {}) {\n        if (matrixFile instanceof afile.SimpleFile) {\n            this.#matrix_file = matrixFile;\n        } else {\n            this.#matrix_file = new afile.SimpleFile(matrixFile);\n        }\n\n        if (featureFile instanceof afile.SimpleFile || featureFile == null) {\n            this.#feature_file = featureFile;\n        } else {\n            this.#feature_file = new afile.SimpleFile(featureFile);\n        }\n\n        if (barcodeFile instanceof afile.SimpleFile || barcodeFile == null) {\n            this.#barcode_file = barcodeFile;\n        } else {\n            this.#barcode_file = new afile.SimpleFile(barcodeFile);\n        }\n\n        this.#options = TenxMatrixMarketDataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxMatrixMarketDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxMatrixMarketDataset#load load} (but not {@linkcode TenxMatrixMarketDataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * If `null` or the string is not present among the feature types, no RNA features are to be loaded.\n     *\n     * If no feature type information is available in the dataset, all features are considered to be genes by default.\n     * This behavior can be explicitly requested by setting this argument to the only non-`null` value among all `featureType*Name` parameters.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * If `null` or the string is not present among the feature types, no ADT features are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be ADTs.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * If `null` or the string is not present among the feature types, no guides are to be loaded.\n     *\n     * If no feature type information is available in the dataset and this argument is set to the only non-`null` value among all `featureType*Name` parameters, all features are considered to be guides.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxMatrixMarketDataset#load load} or {@linkcodeTenxMatrixMarketDataset#summary summary}. \n     */\n    clear() {\n        this.#dimensions = null;\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"MatrixMarket\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate(args) {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #fetch_dimensions() {\n        if (this.#dimensions !== null) {\n            return;\n        }\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let headers = scran.extractMatrixMarketDimensions(this.#matrix_file.content(), { \"compressed\": is_gz });\n        this.#dimensions = [headers.rows, headers.columns];\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        let NR = this.#dimensions[0];\n        if (this.#feature_file == null) {\n            this.#raw_features = new bioc.DataFrame({}, { numberOfRows: NR });\n            return;\n        }\n\n        let fname = this.#feature_file.name();\n        var is_gz = fname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#feature_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        if (parsed.length == NR + 1) {\n            // If it seems to have a header, we just use that directly.\n            let output = {};\n            let headers = parsed.shift();\n            headers.forEach((x, i) => {\n                output[x] = parsed.map(y => y[i]);\n            });\n            this.#raw_features = output;\n            return;\n        }\n\n        // Otherwise, we assume it's standard 10X CellRanger output, without a header.\n        if (parsed.length !== NR) {\n            throw new Error(\"number of matrix rows is not equal to the number of rows in '\" + fname + \"'\");\n        } \n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        let output = new bioc.DataFrame({}, { numberOfRows: NR }); // build it piece-by-piece for a well-defined order.\n        output.$setColumn(\"id\", ids);\n        output.$setColumn(\"name\", symb);\n\n        if (parsed[0].length > 2) {\n            let types = [];\n            parsed.forEach(x => { types.push(x[2]); });\n            output.$setColumn(\"type\", types);\n        }\n\n        this.#raw_features = output;\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        if (this.#barcode_file == null) {\n            this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: this.#dimensions[1] });\n            return;\n        }\n\n        let bname = this.#barcode_file.name();\n        var is_gz = bname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#barcode_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        // Check if a header is present or not. Standard 10X output doesn't have a \n        // header but we'd like to support some kind of customization.\n        let diff = this.#dimensions[1] - parsed.length;\n        let headers;\n        if (diff == 0) {\n            headers = parsed[0]; // whatever, just using the first row. Hope it's unique enough!\n        } else if (diff == -1) {\n            headers = parsed.shift();\n        } else {\n            throw new Error(\"number of matrix columns is not equal to the number of rows in '\" + bname + \"'\");\n        }\n\n        let annotations = {}\n        headers.forEach((x, i) => {\n            annotations[x] = parsed.map(y => y[i]);\n        });\n\n        for (const [k, v] of Object.entries(annotations)) {\n            let conv = eutils.promoteToNumber(v);\n            if (conv !== null) {\n                annotations[k] = conv;\n            }\n        }\n\n        this.#raw_cells = new bioc.DataFrame(annotations);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxMatrixMarketDataset#load load} but the order of values may be different.\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRIPSR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxMatrixMarketDataset#defaults defaults} or with {@linkcode TenxMatrixMarketDataset#setOptions setOptions}.\n     *\n     * If the feature annotation file is absent or if it lacks a third column for the feature types,\n     * `load()` will assume that all features are genes (i.e., only the RNA modality is present).\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let loaded = scran.initializeSparseMatrixFromMatrixMarket(this.#matrix_file.content(), { \"compressed\": is_gz });\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\"); \n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    async serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxMatrixMarketDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxMatrixMarketDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        let args = {};\n        for (const x of files) {\n            if (x.type in args) {\n                throw new Error(\"duplicate file of type '\" + x.type + \"' detected during MatrixMarket unserialization\");\n            }\n            args[x.type] = x.file;\n        }\n\n        if (!(\"mtx\" in args)) {\n            throw new Error(\"expected file of type 'mtx' for during MatrixMarket unserialization\");\n        }\n\n        let feat = null;\n        if (\"genes\" in args) {\n            feat = args.genes;\n        }\n\n        let barcode = null;\n        if (\"annotations\" in args) {\n            barcode = args.annotations;\n        }\n\n        return new TenxMatrixMarketDataset(args.mtx, feat, barcode, options);\n    }\n}\n","export function stream(file, chunkSize, callback, resolve, reject) {\n    reject(\"no support for file paths in the browser context\");\n}\n\nexport function peek(file, n) {\n    throw new Error(\"no support for file paths in the browser context\");\n}\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\nimport * as astream from \"./abstract/stream.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function extractHDF5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (content.type !== \"String\") {\n        return null;\n    }\n\n    return content.load();\n}\n\n/**\n * Summarize an array, typically corresponding to a single column of per-cell annotation.\n * This can be used as part of a preflight response in a Reader.\n *\n * @param {Array|TypedArray} array - Per-cell annotation array of length equal to the number of cells for a given matrix.\n * An Array is treated as categorical data and should contain strings, while TypedArrays are treated as continuous data.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.limit=50] - Maximum number of unique values to report for categorical `x`.\n *\n * @return {object} Object containing `type`, a string indicating whether `array` was categorical or continuous.\n *\n * If `\"categorical\"`, the object will contain `values`, an array of unique values up to the length specified by `limit`.\n * It will also contain `truncated`, a boolean indicating whether the actual number of unique values exceeds `limit`.\n *\n * If `\"continuous\"`, the object will contain the numbers `min` and `max` specifying the minimum and maximum value in `x`, respectively.\n * `min` or `max` may be negative or positive infinity, respectively, if there is no bound on one or both ends.\n * If `min > max`, all values in `array` are `NaN`s such that no bound can be found.\n */\nexport function summarizeArray(array, { limit = 50 } = {}) {\n    if (array instanceof Array) {\n        let chosen = Array.from(new Set(array));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        array.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\nfunction guess_compression(x, compression) {\n    if (compression !== null) {\n        return compression;\n    }\n\n    let buffer;\n    if (x instanceof Uint8Array) {\n        buffer = x;\n    } else {\n        buffer = astream.peek(x, 3);\n    }\n\n    // Compare against magic words for auto-detection.\n    if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n        return 'gz';\n    }\n\n    return 'none';\n}\n\nexport function unpackText(buffer, { compression = null } = {}) {\n    compression = guess_compression(buffer, compression);\n    let txt = (compression === \"gz\" ? pako.ungzip(buffer) : buffer);\n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\nfunction merge_bytes(leftovers, decoder) {\n    let total = 0;\n    for (const x of leftovers) {\n        total += x.length;\n    }\n\n    let combined = new Uint8Array(total);\n    total = 0;\n    for (const x of leftovers) {\n        combined.set(x, total);\n        total += x.length;\n    }\n\n    return decoder.decode(combined);\n}\n\nasync function stream_callback(x, compression, chunkSize, callback) {\n    // Force the input to be either a Uint8Array or a file path string.\n    if (typeof x == \"string\") {\n        ;\n    } else if (x instanceof Uint8Array) {\n        ;\n    } else if (x instanceof afile.SimpleFile) {\n        x = x.content();\n    } else {\n        x = (new afile.SimpleFile(x, { name: \"dummy\" })).content();\n    }\n\n    if (guess_compression(x, compression) == \"gz\") {\n        await (new Promise((resolve, reject) => {\n            let gz = new pako.Inflate({ chunkSize: chunkSize });\n            gz.onData = callback;\n            gz.onEnd = status => {\n                if (status) {\n                    reject(\"gzip decompression failed; \" + gz.msg);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            if (typeof x == \"string\") {\n                astream.stream(x, chunkSize, chunk => gz.push(chunk), null, reject);\n            } else {\n                gz.push(x);\n            }\n        }));\n        return;\n    }\n\n    // Remaining possibilities are uncompressed.\n    if (typeof x == \"string\") {\n        await (new Promise((resolve, reject) => astream.stream(x, chunkSize, callback, resolve, reject)));\n        return;\n    }\n\n    callback(x);\n    return;\n}\n\n/**\n * Read lines of text from a file, possibly with decompression.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {number} [options.chunkSize=65536] - Chunk size in bytes to use for file reading (if `x` is a file path) and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string.\n * @async \n */\nexport async function readLines2(x, { compression = null, chunkSize = 65536 } = {}) {\n    const dec = new TextDecoder;\n    let leftovers = [];\n    let lines = [];\n\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk[i] == 10) { // i.e., ASCII newline.\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    lines.push(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    lines.push(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        lines.push(merge_bytes(leftovers, dec));\n    }\n\n    return lines;    \n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readTable(buffer, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n * This assumes that newlines represent the end of each row of the table, i.e., there cannot be newlines inside quoted strings.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {string} [options.delim=\"\\t\"] - Delimiter between fields.\n * @param {number} [options.chunkSize=1048576] - Chunk size in bytes to use for file reading (if `x` is a path), parsing of rows, and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of length equal to the number of lines in `buffer`.\n * Each entry is an array of strings, containing the `delim`-separated fields for its corresponding line.\n *\n * @async\n */\nexport async function readTable2(x, { compression = null, delim = \"\\t\", chunkSize = 1048576 } = {}) {\n    const dec = new TextDecoder;\n\n    let rows = [];\n    let parse = (str) => {\n        let out = ppp.parse(str, { delimiter: delim });\n        if (out.meta.aborted) {\n            let msg = \"failed to parse delimited file\";\n            for (const e of out.errors) {\n                msg += \"; \" + e.message;\n            }\n            throw new Error(msg);\n        }\n        for (const x of out.data) {\n            rows.push(x);\n        }\n    };\n\n    let leftovers = [];\n    let size_left = 0;\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            // We assume that all newlines are end-of-rows, i.e., there are no\n            // newlines inside quoted strings. Under this assumption, we can\n            // safely chunk the input stream based on newlines, parse each\n            // chunk, and then combine the parsing results together. To avoid\n            // too many parsing calls, we accumulate buffers until we hit \n            // the chunkSize and then we decode + parse them altogether.\n            if (chunk[i] == 10 && (i - last) + size_left >= chunkSize) {\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    parse(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    parse(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n                size_left = 0;\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n            size_left += chunk.length - last;\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        let combined = merge_bytes(leftovers, dec);\n        parse(combined);\n        if (combined[combined.length - 1] == \"\\n\") { // guaranteed to have non-zero length, by virtue of how 'leftovers' is filled.\n            rows.pop();            \n        }\n    }\n\n    return rows;    \n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\n\nfunction create_solo_default_object(value, modality) {\n    let output = {};\n    output[modality] = value;\n    return output;\n}\n\nexport function reportFeatures(rawFeatures, typeField) {\n    if (rawFeatures.hasColumn(typeField)) {\n        let by_type = bioc.presplitFactor(rawFeatures.column(typeField));\n        let copy = rawFeatures.removeColumn(typeField);\n        return bioc.SPLIT(copy, by_type);\n    } else {\n        return create_solo_default_object(rawFeatures, \"\");\n    }\n}\n\nfunction is_subset_noop(indices, full_length) {\n    if (indices.length != full_length) {\n        return false;\n    }\n    for (var i = 0; i < full_length; i++) {\n        if (i !== indices[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction renameByModality(input, featureTypeMapping) {\n    let output = {};\n    for (const [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null && v in input) {\n            output[k] = input[v];\n        }\n    }\n    return output;\n}\n\nfunction splitByModality(features, typeField, featureTypeMapping) {\n    let by_type = bioc.presplitFactor(features.column(typeField));\n    if (featureTypeMapping === null) {\n        return by_type;\n    }\n    return renameByModality(by_type, featureTypeMapping);\n}\n\nfunction findUnnamedDefault(featureTypeMapping, featureTypeDefault) {\n    let found = null;\n    let multiple = false;\n    for (const [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null) {\n            if (found !== null) {\n                multiple = true;\n            }\n            found = k;\n        }\n    }\n\n    if (found === null || multiple) {\n        return featureTypeDefault;\n    } else {\n        return found;\n    }\n}\n\nexport function extractSplitPrimaryIds(features, typeField, featureTypeMapping, featureTypeDefault, primary) {\n    if (typeField !== null && features.hasColumn(typeField)) {\n        let by_type = splitByModality(features, typeField, featureTypeMapping);\n        for (const [k, v] of Object.entries(by_type)) {\n            let col = extractPrimaryIdColumn(k, features, primary);\n            by_type[k] = bioc.SLICE(col, v);\n        }\n        return by_type;\n    }\n\n    // Seeing if any featureTypeMapping is set to the unnamed string.\n    let new_default = findUnnamedDefault(featureTypeMapping, featureTypeDefault);\n    let output = {};\n    output[new_default] = extractPrimaryIdColumn(new_default, features, primary);\n    return output;\n}\n\nexport function splitScranMatrixAndFeatures(loaded, rawFeatures, typeField, featureTypeMapping, featureTypeDefault) {\n    let output = { matrix: new scran.MultiMatrix };\n\n    try {\n        let out_mat = loaded.matrix;\n        let out_ids = loaded.row_ids;\n        output.matrix.add(\"\", out_mat);\n\n        let current_features;\n        if (out_ids !== null) {\n            current_features = bioc.SLICE(rawFeatures, out_ids);\n        } else {\n            current_features = bioc.CLONE(rawFeatures, { deepCopy: false }); // because we're deleting a column.\n            out_ids = new Int32Array(out_mat.numberOfRows());\n            out_ids.forEach((x, i) => { out_ids[i] = i });\n        }\n\n        if (typeField !== null && current_features.hasColumn(typeField)) {\n            let by_type = splitByModality(current_features, typeField, featureTypeMapping);\n            let type_keys = Object.keys(by_type);\n            let skip_subset = is_subset_noop(type_keys[0], out_mat.numberOfRows());\n\n            if (type_keys.length > 1 || !skip_subset) {\n                let replacement = new scran.MultiMatrix({ store: scran.splitRows(out_mat, by_type) });\n                scran.free(output.matrix);\n                output.matrix = replacement;\n            } else {\n                output.matrix.rename(\"\", type_keys[0]);\n            }\n\n            delete current_features[typeField];\n            output.features = bioc.SPLIT(current_features, by_type);\n            output.row_ids = bioc.SPLIT(out_ids, by_type);\n\n        } else {\n            output.matrix.rename(\"\", featureTypeDefault);\n            output.row_ids = create_solo_default_object(out_ids, featureTypeDefault);\n            output.features = create_solo_default_object(current_features, featureTypeDefault);\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction extractPrimaryIdColumn(modality, modality_features, primary) {\n    if (!(modality in primary)) {\n        throw new Error(\"modality '\" + modality + \"' has no primary key identifier\");  \n    }\n    let id = primary[modality];\n\n    if ((typeof id == \"string\" && modality_features.hasColumn(id)) || (typeof id == \"number\" && id < modality_features.numberOfColumns())) {\n        return modality_features.column(id);\n    } \n\n    return modality_features.rowNames();\n}\n\nexport function extractPrimaryIds(features, primary) {\n    let output = {};\n    for (const [k, v] of Object.entries(features)) {\n        output[k] = extractPrimaryIdColumn(k, v, primary);\n    }\n    return output;\n}\n\nexport function extractRemappedPrimaryIds(features, featureTypeMapping, primary) {\n    let renamed = renameByModality(features, featureTypeMapping);\n    return extractPrimaryIds(renamed, primary);\n}\n","/**\n * Webpack (or something in kana's build system) specifically recognizes the\n * hard-coded path in this 'new Worker(new URL(...))' pattern. This is why we\n * have hard-coded creators for the workers rather than allowing callers to\n * pass in the URL as a variable, as that doesn't pack the worker's JS.\n */\n\nexport function createTsneWorker() {\n    return new Worker(new URL(\"../tsne.worker.js\", import.meta.url), { type: \"module\" });\n}\n\nexport function createUmapWorker() {\n    return new Worker(new URL(\"../umap.worker.js\", import.meta.url), { type: \"module\" });\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`groupedSizeFactors`](https://kanaverse.github.io/scran.js/global.html#groupedSizeFactors) \n * and [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.sf_buffer);\n        utils.freeCache(this.#cache.centered_sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"ADT\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized ADT values,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the ADT-derived size factor for each cell in the (QC-filtered) dataset.\n     * This is available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sf_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sf_buffer.length, \"Float64Array\", this.#cache, \"centered_sf_buffer\");\n            scran.centerSizeFactors(this.#cache.sf_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n        var block = this.#filter.fetchFilteredBlock();\n\n        var buffer = this.#cache.sf_buffer;\n        if (buffer.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.remove_bias - Whether to remove composition bias between cell subpopulations.\n     * This is done by clustering cells and computing median-based size factors between the average pseudo-cells for each cluster.\n     * Users can set this to `false` to speed up the compute.\n     * @param {number} parameters.num_pcs - Number of PCs to use for creating a low-dimensional embedding for clustering.\n     * Only used if `remove_bias = true`.\n     * @param {number} parameters.num_clusters - Number of clusters to create with k-means clustering.\n     * Only used if `remove_bias = true`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        const { num_pcs, num_clusters } = parameters;\n        let remove_bias = true;\n        if (\"remove_bias\" in parameters) {\n            remove_bias = parameters.remove_bias;\n        }\n\n        this.changed = false;\n\n        if (this.#qc.changed || \n            this.#filter.changed || \n            remove_bias !== this.#parameters.remove_bias ||\n            (\n                remove_bias &&\n                (\n                    num_pcs !== this.#parameters.num_pcs || \n                    num_clusters != this.#parameters.num_clusters\n                ) \n            )\n        ) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n                let total_buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"total_buffer\");\n                var block = this.#filter.fetchFilteredBlock();\n                var sf_buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"sf_buffer\");\n\n                if (remove_bias) {\n                    scran.quickAdtSizeFactors(mat, { \n                        totals: total_buffer, \n                        block: block, \n                        buffer: sf_buffer, \n                        numberOfPCs: num_pcs, \n                        numberOfClusters: num_clusters \n                    });\n                } else {\n                    scran.centerSizeFactors(total_buffer, { buffer: sf_buffer, block: block });\n                }\n\n                this.changed = true;\n            }\n\n        } \n\n        this.#parameters.remove_bias = remove_bias;\n        this.#parameters.num_pcs = num_pcs;\n        this.#parameters.num_clusters = num_clusters;\n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n           remove_bias: true,\n           num_pcs: 25,\n           num_clusters: 20\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    let cache = {};\n    let parameters = AdtNormalizationState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\");\n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.num_clusters = phandle.open(\"num_clusters\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n            \n            if (\"size_factors\" in rhandle.children) {\n                let sf = rhandle.open(\"size_factors\", { load: true }).values;\n                cache.sf_buffer = scran.createFloat64WasmArray(sf.length);\n                cache.sf_buffer.set(sf);\n            }\n\n            output = new AdtNormalizationState(qc, filter, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.sf_buffer);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtNormalizationState(qc, filter, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized ADT matrix,\n     * available after running {@linkcode AdtPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = AdtPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new AdtPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new AdtPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * Results of computing per-cell ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellAdtQcMetricsResults.html) for details.\n *\n * @external PerCellAdtQcMetricsResults\n */\n\n/**\n * Suggested filters for the ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestAdtQcFiltersResults.html) for details.\n *\n * @external SuggestAdtQcFiltersResults\n */\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellAdtQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellAdtQcMetrics)\n * and [`suggestAdtQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestAdtQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"ADT\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestAdtQcFiltersResults} Result of filtering on the ADT-derived QC metrics.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellAdtQcMetricsResults} ADT-derived QC metrics,\n     * available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            automatic: true,\n            tag_id_column: null,\n            igg_prefix: \"IgG\",\n            nmads: 3,\n            min_detected_drop: 0.1\n        };\n    }\n\n    static configureFeatureParameters(lower_igg, annotations) {\n        let counter = val => {\n            let n = 0;\n            val.forEach(x => {\n                if (x.toLowerCase().startsWith(lower_igg)) {\n                    n++;\n                }\n            });\n            return n;\n        };\n\n        let best_key = null;\n        let best = 0;\n\n        let rn = annotations.rowNames();\n        if (rn !== null) {\n            best = counter(rn);\n        }\n\n        for (const key of annotations.columnNames()) {\n            let latest = counter(annotations.column(key));\n            if (latest > best) {\n                best_key = key;\n                best = latest;\n            }\n        }\n\n        return best_key;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * \n     * @param {object} parameters - Parameter object, equivalent to the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotations. \n     * Specifically, `tag_id_column` is set to the column with the most matches to `igg_prefix`.\n     * @param {?(string|number)} parameters.tag_id_column - Name or index of the column of the feature annotations that contains the tag identifiers.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.igg_prefix - Prefix of the identifiers for isotype controls.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * @param {number} parameters.min_detected_drop - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { igg_prefix, nmads, min_detected_drop } = parameters;\n        this.changed = false;\n\n        let automatic;\n        let tag_id_column; \n        if (\"automatic\" in parameters) {\n            automatic = parameters.automatic;\n            tag_id_column = parameters.tag_id_column;\n        } else {\n            automatic = true;\n            tag_id_column = null;\n        }\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            igg_prefix !== this.#parameters.igg_prefix ||\n            (!automatic && tag_id_column !== this.#parameters.tag_id_column)\n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var tag_info = this.#inputs.fetchFeatureAnnotations()[\"ADT\"];\n                var subsets = utils.allocateCachedArray(tag_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (igg_prefix !== null) {\n                    var lower_igg = igg_prefix.toLowerCase();\n                    let key = tag_id_column;\n                    if (automatic) {\n                        key = AdtQualityControlState.configureFeatureParameters(lower_igg, tag_info);\n                    }\n\n                    let val = (key == null ? tag_info.rowNames() : tag_info.column(key));\n                    if (val !== null) {\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => { \n                            if (x.toLowerCase().startsWith(lower_igg)) {\n                                sub_arr[i] = 1;                        \n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"ADT\");\n                this.#cache.metrics = scran.perCellAdtQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.tag_id_column = tag_id_column;\n        this.#parameters.igg_prefix = igg_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads || min_detected_drop !== this.#parameters.min_detected_drop) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestAdtQcFilters(this.#cache.metrics, { numberOfMADs: nmads, minDetectedDrop: min_detected_drop, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n            this.#parameters.min_detected_drop = min_detected_drop;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = AdtQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.igg_prefix = phandle.open(\"igg_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n        parameters.min_detected_drop = phandle.open(\"min_detected_drop\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellAdtQcMetricsResults(detected.length, 1);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n                let igg_total = mhandle.open(\"igg_total\", { load: true }).values;\n                cache.metrics.subsetTotals(0, { fillable: true }).set(igg_total);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n                let thresholds_igg_total = thandle.open(\"igg_total\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestAdtQcFiltersResults(1, thresholds_detected.length);\n                cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n                cache.filters.thresholdsSubsetTotals(0, { fillable: true }).set(thresholds_igg_total);\n            }\n\n            output = new AdtQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the [`mnnCorrect`](https://kanaverse.github.io/scran.js/global.html#mnnCorrect) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the batch-corrected embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode BatchCorrectionState#compute compute}.\n     */\n    fetchCorrected() {\n        return this.#cache.corrected;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfCells() {\n        return this.#combined.fetchNumberOfCells();\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#combined.fetchNumberOfDimensions();\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `batch_correction` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * If `\"mnn\"`, it is recommended that upstream PCA steps (i.e., {@linkplain RnaPcaState} and {@linkplain AdtPcaState}) use `block_method = \"weight\"`.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use during MNN correction.\n     * @param {boolean} parameters.approximate - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { method, num_neighbors, approximate} = parameters;\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (method == \"mnn\" && block !== null);\n\n        if (this.changed || method !== this.#parameters.method || num_neighbors !== this.#parameters.num_neighbors || approximate !== this.#parameters.approximate) { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchCombined();\n                let corrected = utils.allocateCachedArray(pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs, block, { \n                    k: num_neighbors, \n                    buffer: corrected, \n                    numberOfCells: this.#combined.fetchNumberOfCells(), \n                    numberOfDims: this.#combined.fetchNumberOfDimensions(), \n                    approximate: approximate \n                });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                this.#cache.corrected = this.#combined.fetchCombined().view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters.method = method;\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, combined) {\n    let cache = {};\n    let parameters = BatchCorrectionState.defaults();\n    let output;\n    \n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.method = phandle.open(\"method\", { load: true }).values[0];\n        parameters.num_neighbors = phandle.open(\"num_neighbors\", { load: true }).values[0];\n        parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"corrected\" in rhandle.children) {\n                let corrected = rhandle.open(\"corrected\", { load: true }).values;\n                cache.corrected = scran.createFloat64WasmArray(corrected.length);\n                cache.corrected.set(corrected);\n            } else {\n                // Creating a view from the upstream combined state.\n                let pcs = combined.fetchCombined();\n                cache.corrected = pcs.view();\n            }\n\n            output = new BatchCorrectionState(filter, combined, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.corrected);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        let ghandle = handle.open(\"pca\");\n\n        let rhandle = ghandle.open(\"results\");\n        if (\"corrected\" in rhandle.children) {\n            let corrected = rhandle.open(\"corrected\", { load: true }).values;\n            let corbuffer = utils.allocateCachedArray(corrected.length, \"Float64Array\", cache, \"corrected\");\n            corbuffer.set(corrected);\n        } else {\n            cache.corrected = combined.fetchCombined().view();\n        }\n\n        output = new BatchCorrectionState(filter, combined, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as rna_qc_module from \"./rna_quality_control.js\";\nimport * as adt_qc_module from \"./adt_quality_control.js\";\nimport * as crispr_qc_module from \"./crispr_quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction find_usable_upstream_states(qc_states, in_use) {\n    let tmp = utils.findValidUpstreamStates(qc_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (in_use[k]) {\n            to_use.push(qc_states[k]);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells,\n * based on metrics and thresholds computed in {@linkplain RnaQualityControlState} and friends.\n * It wraps the [`filterCells`](https://kanaverse.github.io/scran.js/global.html#filterCells) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * For multi-modal datasets, this can combine quality calls from all valid modalities; \n * a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        if (!(qc_states.RNA instanceof rna_qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc_states.RNA' should be a RnaQualityControlState object\");\n        }\n        if (!(qc_states.ADT instanceof adt_qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc_states.ADT' should be a AdtQualityControlState object\");\n        }\n        if (!(qc_states.CRISPR instanceof crispr_qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc_states.CRISPR' should be a CrisprQualityControlState object\");\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing the filtered and normalized matrices for all modalities,\n     * available after running {@linkcode CellFilteringState#compute compute}.\n     */\n    fetchFilteredMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Int32WasmArray} Array of length equal to the number of cells after filtering, \n     * containing the block assignment for each cell.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    /**\n     * @return {?Uint8WasmArray} Combined discard vector, i.e., an array of length equal to the number of cells in the dataset,\n     * indicating whether each cell should be removed.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null`, if no upstream filtering steps were performed.\n     */\n    fetchDiscards() {\n        if (\"discard_buffer\" in this.#cache) {\n            return this.#cache.discard_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n\n        let inputs = this.#inputs.fetchCountMatrix();\n        for (const a of inputs.available()) {\n            let src = inputs.get(a);\n\n            let sub;\n            if (\"discard_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.discard_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"discard_buffer\" in this.#cache) {\n                // Filtering on the block. Might as well force a load of the\n                // matrix, it'll be needed once we have the blocks anyway.\n                let filtered_ncols = this.fetchFilteredMatrix().numberOfColumns();\n                let bcache = utils.allocateCachedArray(filtered_ncols, \"Int32Array\", this.#cache, \"block_buffer\");\n                scran.filterBlock(block, this.#cache.discard_buffer, { buffer: bcache });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.use_rna - Whether to use the RNA-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_adt - Whether to use the ADT-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_crispr - Whether to use the CRISPR-derived QC metrics for filtering.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { use_rna, use_adt, use_crispr } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        if (this.#parameters.use_rna !== use_rna || this.#parameters.use_adt !== use_adt || this.#parameters.use_crispr !== use_crispr) {\n            this.#parameters.use_rna = use_rna;\n            this.#parameters.use_adt = use_adt;\n            this.#parameters.use_crispr = use_crispr;\n            this.changed = true;\n        }\n\n        let to_use = find_usable_upstream_states(this.#qc_states, { RNA: use_rna, ADT: use_adt, CRISPR: use_crispr });\n        if (!this.changed) {\n            for (const u of to_use) {\n                if (u.changed) {\n                    this.changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.changed) {\n            if (to_use.length > 0) {\n                let first = to_use[0].fetchDiscards();\n\n                if (to_use.length > 1) {\n                    // A discard signal in any modality causes the cell to be removed. \n                    let disc_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"discard_buffer\");\n                    disc_buffer.fill(0);\n\n                    let disc_arr = disc_buffer.array();\n                    for (const u of to_use) {\n                        u.fetchDiscards().forEach((y, i) => { disc_arr[i] |= y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    utils.freeCache(this.#cache.discard_buffer);\n                    this.#cache.discard_buffer = first.view();\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.discard_buffer);\n                delete this.#cache.discard_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n    }\n\n    static defaults() {\n        return {\n            use_rna: true,\n            use_adt: true,\n            use_crispr: true\n        };\n    }\n\n    /**\n     * Apply the same filter to an array of data for each cell in the unfiltered dataset.\n     * Any calls to this method should be done after running {@linkcode CellFilteringState#compute compute}.\n     *\n     * @param {Array|TypedArray} Any array-like object of length equal to the number of cells in the unfiltered dataset.\n     * \n     * @return {Array|TypedArray} An array-like object of the same type as `x`,\n     * where all elements corresponding to low-quality cells have been discarded.\n     * This will have number of columns equal to that of {@linkcode CellFilteringState#fetchFilteredMatrix fetchFilteredMatrix}.\n     */\n    applyFilter(x) {\n        let expect_len = this.#inputs.fetchCountMatrix().numberOfColumns();\n        if (expect_len != x.length) {\n            throw new Error(\"length of 'x' should be equal to the number of cells in the unfiltered dataset\");\n        }\n\n        if (!(\"discard_buffer\" in this.#cache)) {\n            return x.slice(); // making a copy.\n        } else {\n            let discard = this.#cache.discard_buffer.array();\n            return x.filter((y, i) => !discard[i]);\n        }\n    }\n\n    /**\n     * Undo the effect of filtering on an array of indices.\n     * This is primarily useful for adjusting indices from downstream steps \n     * (e.g., {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices})\n     * so that it can be used in {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the unfiltered matrix.\n     */\n    undoFilter(indices) {\n        let max_index = this.fetchFilteredMatrix().numberOfColumns();\n        for (const x of indices) {\n            if (x < 0 || x >= max_index) {\n                throw new Error(\"entries of 'indices' should be less than the number of cells in the filtered dataset\");\n            }\n        }\n\n        if (!('discard_buffer' in this.#cache)) {\n            return;\n        }\n\n        let keep = [];\n        this.#cache.discard_buffer.forEach((x, i) => {\n            if (x == 0) {\n                keep.push(i);\n            }\n        });\n\n        indices.forEach((x, i) => {\n            indices[i] = keep[x];\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, qc_states) {\n    let parameters = CellFilteringState.defaults();\n    let cache = {};\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            if (\"parameters\" in ghandle.children) {\n                let phandle = ghandle.open(\"parameters\");\n                if (\"use_rna\" in phandle.children) {\n                    parameters.use_rna = phandle.open(\"use_rna\", { load: true }).values[0] > 0;\n                    parameters.use_adt = phandle.open(\"use_adt\", { load: true }).values[0] > 0;\n                    parameters.use_crispr = phandle.open(\"use_crispr\", { load: true }).values[0] > 0;\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"discards\" in rhandle.children) {\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n            }\n        } \n\n        if (!(\"discard_buffer\" in cache)) {\n            let to_use = find_usable_upstream_states(qc_states, { RNA: parameters.use_rna, ADT: parameters.use_adt, CRISPR: parameters.use_crispr });\n\n            if (to_use.length == 1) {\n                // We figure out which upstream QC state contains the discard vector\n                // and create a view on it so that our discard_buffer checks work properly.\n                // (v1 and earlier also implicitly falls in this category.)\n                cache.discard_buffer = to_use[0].fetchDiscards().view();\n            } else if (to_use.length == 0) {\n                // No-op; we don't need to define discard_buffer.\n                ;\n            } else {\n                throw new Error(\"no more than one upstream QC state should be valid if 'discards' is not available\");\n            }\n        }\n\n        output = new CellFilteringState(inputs, qc_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.discard_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as rutils from \"../readers/index.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as markers_module from \"./marker_detection.js\";\n\nconst baseUrl = \"https://github.com/LTLA/singlepp-references/releases/download/v2.0.0\";\n\nexport const step_name = \"cell_labelling\";\n\n/**\n * Cell labelling involves assigning cell type labels to clusters using the [**SingleR** algorithm](https://github.com/LTLA/CppSingleR),\n * based on [pre-formatted reference expression profiles](https://github.com/clusterfork/singlepp-references).\n * This wraps [`labelCells`](https://kanaverse.github.io/scran.js/global.html#labelCells)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * In theory, we could do this at the single-cell level, but we use clusters instead to expedite the computation and simplify interpretation.\n * If multiple references are requested, we will use each for assignment before attempting to choose the best label for each cluster across references.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellLabellingState {\n    #inputs;\n    #markers;\n    #parameters;\n    #cache;\n\n    constructor(inputs, markers, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        if (!(markers instanceof markers_module.MarkerDetectionState)) {\n            throw new Error(\"'markers' should be a State object from './marker_detection.js'\");\n        }\n        this.#markers = markers;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    #flush_prepared() {\n        if (\"prepared\" in this.#cache) {\n            for (const v of Object.values(this.#cache.prepared)) {\n                v.built.raw.free();\n            }\n            delete this.#cache.prepared;\n        }\n    }\n\n    free() {\n        utils.freeCache(this.#cache.buffer);\n        this.#flush_prepared();\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let mat = this.#inputs.fetchCountMatrix();\n        return mat.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        let out = { ...this.#parameters };\n        out.references = bioc.CLONE(out.references);\n        out.species = bioc.CLONE(out.species);\n        return out;\n    }\n\n    /**\n     * @return {object} An object containing:\n     *\n     * - `per_reference`: an object where keys are the reference names and the values are arrays of strings.\n     *   Each array is of length equal to the number of clusters and contains the cell type classification for each cluster.\n     * - `integrated`: an array of length equal to the number of clusters.\n     *   Each element is a string specifying the name of the reference with the best label for each cluster.\n     *   Only available if multiple references are requested.\n     *\n     * This is available after running {@linkcode CellLabellingState#compute compute}.\n     */\n    fetchResults() {\n        // No real need to clone these, they're string arrays\n        // so they can't be transferred anyway.\n        let perref = {};\n        for (const [key, val] of Object.entries(this.#cache.results)) {\n            perref[key] = val;\n        }\n\n        let output = { \"per_reference\": perref };\n        if (\"integrated_results\" in this.#cache) {\n            output.integrated = this.#cache.integrated_results;\n        }\n\n        return output;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a reference and each value is the number of shared features between the test and reference daatasets.\n     */\n    fetchNumberOfSharedFeatures() {\n        let output = {};\n        for (const key of Object.keys(this.#cache.results)) {\n            output[key] = this.#cache.prepared[key].built.raw.sharedFeatures();\n        }\n        return output;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            references: [],\n            automatic: true,\n            species: [],\n            gene_id_column: null,\n            gene_id_type: \"ENSEMBL\"\n        };\n    }\n\n    static configureFeatureParameters(guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n           if (val.confidence > best.confidence) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Available references for each species.\n     * Each key is a taxonomy ID and each value is an array of strings containing the names of references for that species.\n     * @type {object}\n     */\n    static availableReferences = {\n        \"9606\": [ \"BlueprintEncode\", \"DatabaseImmuneCellExpression\", \"HumanPrimaryCellAtlas\", \"MonacoImmune\", \"NovershternHematopoietic\" ],\n        \"10090\": [ \"ImmGen\", \"MouseRNAseq\" ]\n    };\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #load_reference(name) {\n        let all_loaded = CellLabellingState.#all_loaded;\n        if (name in all_loaded) {\n            return;\n        }\n\n        const suffixes = [ \n            \"genes.csv.gz\",\n            \"labels_fine.csv.gz\",\n            \"label_names_fine.csv.gz\",\n            \"markers_fine.gmt.gz\",\n            \"matrix.csv.gz\"\n        ];\n\n        let contents = await Promise.all(\n            suffixes.map(\n                async suffix => {\n                    let full = name + \"_\" + suffix;\n                    let b = await CellLabellingState.#downloadFun(baseUrl + \"/\" + full);\n                    return new rutils.SimpleFile(b, { name: full })\n                }\n            )\n        );\n\n        let loaded;\n        try {\n            loaded = scran.loadLabelledReferenceFromBuffers(\n                contents[4].buffer(), // rank matrix\n                contents[3].buffer(), // markers\n                contents[1].buffer()  // label per sample\n            );\n\n            let gene_lines = await rutils.readLines2(contents[0].content(), { compression: \"gz\" }); // gene names\n            let ensembl = [];\n            let symbol = [];\n            let entrez = [];\n            let empty2null = x => (x == \"\" ? null : x);\n\n            gene_lines.forEach(x => {\n                let fields = x.split(\",\");\n                ensembl.push(empty2null(fields[0]));\n                symbol.push(empty2null(fields[1]));\n                entrez.push(empty2null(fields[2]));\n            });\n\n            let labels = await rutils.readLines2(contents[2].content(), { compression: \"gz\" }); // full label names\n            all_loaded[name] = { \n                \"raw\": loaded, \n                \"genes\": {\n                    \"ENSEMBL\": ensembl,\n                    \"SYMBOL\": symbol,\n                    \"ENTREZ\": entrez\n                },\n                \"labels\": labels\n            };\n\n        } catch (e) {\n            utils.freeCache(loaded);\n            throw e;\n        }\n    }\n\n    static #all_loaded = {};\n\n    /**\n     * Flush all cached references.\n     *\n     * By default, {@linkcode CellLabellingState#compute compute} will cache the loaded references in a static member for re-use across {@linkplain CellLabellingState} instances.\n     * These cached references are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        for (const [k, v] of Object.entries(CellLabellingState.#all_loaded)) {\n            v.raw.free();\n        }\n        CellLabellingState.#all_loaded = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download references for the cell labelling step.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = CellLabellingState.#downloadFun;\n        CellLabellingState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #build_reference(name, gene_ids, gene_id_type) {\n        let built;\n        let output;\n        try {\n            let current = CellLabellingState.#all_loaded[name];\n            let loaded = current.raw;\n\n            if (!(gene_id_type in current.genes)) {\n                throw new Error(\"unknown gene type '\" + gene_id_type + \"'\");\n            }\n            let chosen_ids = current.genes[gene_id_type];\n\n            built = scran.buildLabelledReference(gene_ids, loaded, chosen_ids); \n            output = {\n                \"loaded\": current,\n                \"built\": {\n                    \"features\": chosen_ids,\n                    \"raw\": built\n                }\n            };\n\n        } catch (e) {\n            utils.freeCache(built);\n            throw e;\n        }\n\n        return output;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_labelling` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {Array} parameters.references - Array of strings specifying the names of the reference datasets, see {@linkcode CellLabellingState.availableReferences availableReferences} for more details.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If `true`, the column of the annotation that best matches human/mouse Ensembl/symbols is identified and used to set `species`, `gene_id_column` and `gene_id_type`.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species involved in this dataset.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode CellLabellingState.availableReferences availableReferences}.\n     * This is used internally to filter `references` to the entries relevant to these species. \n     * Ignored if `automatic = true`.\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the RNA entry of {@linkcode InputsState#fetchFeatureAnnotations InputsState.fetchFeatureAnnotations} containing the identity of each gene. \n     * If `null`, identifiers are taken from the row names.\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Type of feature identifier in `gene_id_column`.\n     * This should be one of `\"ENSEMBL\"`, `\"SYMBOL\"` or `\"ENTREZ\"`\n     * Ignored if `automatic = true`.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let references;\n        let automatic;\n        let species;\n        let gene_id_column;\n        let gene_id_type;\n\n        if (\"references\" in parameters) {\n            references = parameters.references;\n            automatic = parameters.automatic;\n            species = parameters.species;\n            gene_id_column = parameters.gene_id_column;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            references = [ ...(parameters.human_references), ...(parameters.mouse_references) ];\n            automatic = true;\n            let def = CellLabellingState.defaults();\n            species = def.species;\n            gene_id_column = def.gene_id_column;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (this.valid()) {\n            // Gathering the references.\n            if (\n                this.#inputs.changed ||\n                automatic !== this.#parameters.automatic ||\n                utils.changedParameters(references, this.#parameters.references) ||\n                (\n                    !automatic &&\n                    (\n                        species !== this.#parameters.species ||\n                        gene_id_column !== this.#parameters.gene_id_column ||\n                        gene_id_type !== this.#parameters.gene_id_type\n                    )\n                )\n            ) {\n                let species2 = species;\n                let gene_id_column2 = gene_id_column;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let auto = CellLabellingState.configureFeatureParameters(guesses);\n                    species2 = auto.species;\n                    gene_id_column2 = auto.gene_id_column;\n                    gene_id_type2 = auto.gene_id_type;\n                }\n\n                let allowable = new Set;\n                for (const s of species2) {\n                    if (s in CellLabellingState.availableReferences) {\n                        CellLabellingState.availableReferences[s].forEach(x => { allowable.add(x); });\n                    }\n                }\n\n                // Building each individual reference.\n                let feats = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let gene_ids = (gene_id_column2 == null ? feats.rowNames() : feats.column(gene_id_column2));\n                this.#cache.gene_ids = gene_ids;\n\n                let valid = {};\n                if (gene_ids !== null) {\n                    for (const ref of references) {\n                        if (allowable.has(ref)) {\n                            await this.#load_reference(ref);\n                            valid[ref] = this.#build_reference(ref, gene_ids, gene_id_type2);\n                        }\n                    }\n                }\n\n                this.#flush_prepared();\n                this.#cache.prepared = valid;\n\n                // Building an integrated reference, if necessary.\n                let used_refs = Object.keys(valid);\n                if (used_refs.length > 1) {\n                    let arr = Object.values(valid);\n                    let loaded = arr.map(x => x.loaded.raw);\n                    let feats = arr.map(x => x.built.features);\n                    let built = arr.map(x => x.built.raw);\n\n                    utils.freeCache(this.#cache.integrated);\n                    this.#cache.integrated = scran.integrateLabelledReferences(gene_ids, loaded, feats, built);\n                } else {\n                    utils.freeCache(this.#cache.integrated);\n                    delete this.#cache.integrated;\n                }\n                this.#cache.used_refs = used_refs;\n\n                this.changed = true;\n            }\n\n            let marker_results = this.#markers.fetchResults()[\"RNA\"];\n            let ngroups = marker_results.numberOfGroups();\n            let ngenes = (this.#cache.gene_ids !== null ? this.#cache.gene_ids.length : null);\n            let cluster_means = this.#cache.buffer;\n\n            if (this.#markers.changed) {\n                if (ngenes !== null) {\n                    // Creating a column-major array of mean vectors for each cluster.\n                    cluster_means = utils.allocateCachedArray(ngroups * ngenes, \"Float64Array\", this.#cache);\n                    for (var g = 0; g < ngroups; g++) {\n                        let means = marker_results.means(g, { copy: false }); // Warning: direct view in wasm space - be careful.\n                        let cluster_array = cluster_means.array();\n                        cluster_array.set(means, g * ngenes);\n                    }\n                }\n                this.changed = true;\n            }\n\n            if (this.changed) {\n                // Running classifications on the cluster means. This is a\n                // no-op if gene_ids = null as 'valid' should be empty.\n                let valid = this.#cache.prepared;\n\n                this.#cache.results = {};\n                for (const [key, ref] of Object.entries(valid)) {\n                    let output = scran.labelCells(cluster_means, ref.built.raw, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let labels = [];\n                    for (const o of output) {\n                        labels.push(ref.loaded.labels[o]);\n                    }\n                    this.#cache.results[key] = labels;\n                }\n\n                // Performing additional integration, if necessary. \n                if (\"integrated\" in this.#cache) {\n                    let results = [];\n                    for (const key of this.#cache.used_refs) {\n                        results.push(this.#cache.results[key]);\n                    }\n\n                    let out = scran.integrateCellLabels(cluster_means, results, this.#cache.integrated, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let as_names = [];\n                    out.forEach(i => {\n                        as_names.push(this.#cache.used_refs[i]);\n                    });\n                    this.#cache.integrated_results = as_names;\n                } else {\n                    delete this.#cache.integrated_results;\n                }\n            }\n        } else {\n            this.#cache.results = {};\n            delete this.#cache.integrated_results;\n        }\n\n        this.#parameters.references = bioc.CLONE(references); // make a copy to avoid pass-by-reference behavior.\n        this.#parameters.automatic = automatic;\n        this.#parameters.species = bioc.CLONE(species);\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.gene_id_type = gene_id_type;\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, markers) {\n    let parameters =  {\n        mouse_references: [],\n        human_references: []\n    };\n    let cache = { results: {} };\n\n    // Protect against old analysis states that don't have cell_labelling.\n    if (\"cell_labelling\" in handle.children) {\n        let ghandle = handle.open(\"cell_labelling\");\n        \n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.mouse_references = phandle.open(\"mouse_references\", { load: true }).values;\n            parameters.human_references = phandle.open(\"human_references\", { load: true }).values;\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"per_reference\" in rhandle.children) {\n                let perhandle = rhandle.open(\"per_reference\");\n                for (const key of Object.keys(perhandle.children)) {\n                    cache.results[key] = perhandle.open(key, { load: true }).values;\n                }\n                if (\"integrated\" in rhandle.children) {\n                    cache.integrated_results = rhandle.open(\"integrated\", { load: true }).values;\n                }\n            }\n        }\n    }\n\n    return new CellLabellingState(inputs, markers, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings from {@linkplain KmeansClusterState} and {@linkplain SnnGraphClusterState}, respectively.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode ChooseClusteringState#compute compute}.\n     */\n    fetchClusters() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClusters();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClusters();\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - Clustering method to use, either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { method } = parameters;\n        this.changed = true;\n        \n        if (method == this.#parameters.method) {\n            if (method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters.method = method;\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, snn, kmeans) {\n    let ghandle = handle.open(\"choose_clustering\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            method: phandle.open(\"method\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    return new ChooseClusteringState(snn, kmeans, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_pca_module from \"./rna_pca.js\";\nimport * as adt_pca_module from \"./adt_pca.js\";\nimport * as crispr_pca_module from \"./crispr_pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\nfunction find_nonzero_upstream_states(pca_states, weights) {\n    let tmp = utils.findValidUpstreamStates(pca_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (weights[k] > 0) {\n            to_use.push(k);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the [`scaleByNeighbors`](https://kanaverse.github.io/scran.js/global.html#scaleByNeighbors) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        if (!(pca_states.RNA instanceof rna_pca_module.RnaPcaState)) {\n            throw new Error(\"'pca_states.RNA' should be an RnaPcaState object\");\n        }\n        if (!(pca_states.ADT instanceof adt_pca_module.AdtPcaState)) {\n            throw new Error(\"'pca_states.ADT' should be an AdtPcaState object\");\n        }\n        if (!(pca_states.CRISPR instanceof crispr_pca_module.CrisprPcaState)) {\n            throw new Error(\"'pca_states.CRISPR' should be an CrisprPcaState object\");\n        }\n        this.#pca_states = pca_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the combined embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchCombined() {\n        return this.#cache.combined_buffer;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfCells() {\n        return this.#cache.num_cells;\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#cache.total_dims;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return { \n            rna_weight: 1,\n            adt_weight: 1,\n            crispr_weight: 0,\n            approximate: true\n        };\n    }\n\n    static createPcsView(cache, upstream) {\n        utils.freeCache(cache.combined_buffer);\n        cache.combined_buffer = upstream.principalComponents({ copy: \"view\" }).view();\n        cache.num_cells = upstream.numberOfCells();\n        cache.total_dims = upstream.numberOfPCs();\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.rna_weight - Relative weight of the RNA embeddings.\n     * @param {number} parameters.adt_weight - Relative weight of the ADT embeddings.\n     * @param {number} parameters.crispr_weight - Relative weight of the CRISPR embeddings.\n     * @param {boolean} parameters.approximate - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { rna_weight, adt_weight, crispr_weight, approximate } = parameters;\n        this.changed = false;\n\n        for (const v of Object.values(this.#pca_states)) {\n            if (v.changed) {\n                this.changed = true;\n                break;\n            }\n        }\n\n        if (approximate !== this.#parameters.approximate) {\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        if (rna_weight !== this.#parameters.rna_weight || adt_weight !== this.#parameters.adt_weight || crispr_weight !== this.#parameters.crispr_weight) {\n            this.#parameters.rna_weight = rna_weight;\n            this.#parameters.adt_weight = adt_weight;\n            this.#parameters.crispr_weight = crispr_weight;\n            this.changed = true;\n        }\n\n        if (this.changed) { \n            const weights = { RNA: rna_weight, ADT: adt_weight, CRISPR: crispr_weight };\n            let to_use = find_nonzero_upstream_states(this.#pca_states, weights);\n\n            if (to_use.length > 1) {\n                let weight_arr = to_use.map(x => weights[x]);\n                let collected = [];\n                let total = 0;\n                let ncells = null;\n\n                for (const k of to_use) {\n                    let curpcs = this.#pca_states[k].fetchPCs();\n                    collected.push(curpcs.principalComponents({ copy: \"view\" }));\n                    if (ncells == null) {\n                        ncells = curpcs.numberOfCells();\n                    } else if (ncells !== curpcs.numberOfCells()) {\n                        throw new Error(\"number of cells should be consistent across all embeddings\");\n                    }\n                    total += curpcs.numberOfPCs();\n                }\n\n                let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: approximate });\n                this.#cache.num_cells = ncells;\n                this.#cache.total_dims = total;\n\n            } else {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                this.constructor.createPcsView(this.#cache, pcs);\n            }\n        }\n\n        // Updating all parameters anyway. This requires us to take ownership\n        // of 'weights' to avoid pass-by-reference shenanigans.\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca_states) {\n    let cache = {};\n    let parameters = CombineEmbeddingsState.defaults();\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            {\n                let phandle = ghandle.open(\"parameters\");\n                parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n                if ('weights' in phandle.children) { // v2.0\n                    let whandle = phandle.open(\"weights\");\n                    if (\"RNA\" in whandle.children) {\n                        parameters.rna_weight = whandle.open(\"RNA\", { load: true }).values[0];\n                    }\n                    if (\"ADT\" in whandle.children) {\n                        parameters.adt_weight = whandle.open(\"ADT\", { load: true }).values[0];\n                    }\n                    if (\"CRISPR\" in whandle.children) {\n                        parameters.crispr_weight = whandle.open(\"CRISPR\", { load: true }).values[0];\n                    }\n                } else {\n                    parameters.rna_weight = phandle.open(\"rna_weight\", { load: true }).values[0];\n                    parameters.adt_weight = phandle.open(\"adt_weight\", { load: true }).values[0];\n                    parameters.crispr_weight = phandle.open(\"crispr_weight\", { load: true }).values[0];\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"combined\" in rhandle.children) {\n                let phandle = rhandle.open(\"combined\", { load: true });\n                cache.num_cells = phandle.shape[0];\n                cache.total_dims = phandle.shape[1];\n\n                let vals = phandle.values;\n                cache.combined_buffer = scran.createFloat64WasmArray(vals.length);\n                cache.combined_buffer.set(vals);\n            }\n        }\n\n        if (!(\"combined_buffer\" in cache)) {\n            // This only happens if there was only one upstream PCA state; in which case, \n            // we figure out which upstream PCA state contains the PC vector\n            // and create a view on it so that our fetchPCs() works properly.\n            // (v1 and earlier also implicitly falls in this category.)\n            const weights = { RNA: parameters.rna_weight, ADT: parameters.adt_weight, CRISPR: parameters.crispr_weight };\n            let to_use = find_nonzero_upstream_states(pca_states, weights);\n\n            if (to_use.length != 1) {\n                throw new Error(\"only one upstream PCA state should be valid with non-zero weight if 'combined' is not available\");\n            }\n\n            let pcs = pca_states[to_use[0]].fetchPCs();\n            CombineEmbeddingsState.createPcsView(cache, pcs);\n        }\n\n        output = new CombineEmbeddingsState(pca_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.combined_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./crispr_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"crispr_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered CRISPR count matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc' should be a CrisprQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.centered_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized CRISPR abundances,\n     * available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the CRISPR-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"CRISPR\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n                this.changed = true;\n            }\n        } \n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        let rhandle = ghandle.createGroup(\"results\"); \n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new CrisprNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"crispr_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise CRISPR abundance data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm' should be a CrisprNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized CRISPR abundance matrix,\n     * available after running {@linkcode CrisprPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = CrisprPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new CrisprPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new CrisprPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"crispr_quality_control\";\n\n/**\n * Results of computing per-cell CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellCrisprQcMetricsResults.html) for details.\n *\n * @external PerCellCrisprQcMetricsResults\n */\n\n/**\n * Suggested filters for the CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestCrisprQcFiltersResults.html) for details.\n *\n * @external SuggestCrisprQcFiltersResults\n */\n\n/**\n * This step applies quality control on the CRISPR guide count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellCrisprQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellCrisprQcMetrics)\n * and [`suggestCrisprQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestCrisprQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestCrisprQcFiltersResults} Result of filtering on the CRISPR-derived QC metrics.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellCrisprQcMetricsResults} CRISPR-derived QC metrics,\n     * available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            nmads: 3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold on the maximum count. \n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { nmads } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var mat = this.#inputs.fetchCountMatrix().get(\"CRISPR\");\n                this.#cache.metrics = scran.perCellCrisprQcMetrics(mat);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestCrisprQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = CrisprQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellCrisprQcMetricsResults(detected.length);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n\n                let max_prop = mhandle.open(\"max_proportion\", { load: true }).values;\n                cache.metrics.maxProportions({ fillable: true }).set(max_prop);\n\n                let max_index = mhandle.open(\"max_index\", { load: true }).values;\n                cache.metrics.maxIndex({ fillable: true }).set(max_index);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_max_count = thandle.open(\"max_count\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestCrisprQcFiltersResults(thresholds_max_count.length);\n                cache.filters.thresholdsMaxCount({ fillable: true }).set(thresholds_max_count);\n            }\n\n            output = new CrisprQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback if the results aren't available. \n        output = new CrisprQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\n\n/**\n * Results of per-gene variance modelling,\n * see [here](https://kanaverse.github.io/scran.js/ModelGeneVarResults.html) for details.\n *\n * @external ModelGeneVarResults\n */\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the [`modelGeneVar`](https://kanaverse.github.io/scran.js/global.html#modelGeneVar) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:ModelGeneVarResults} Variance modelling results,\n     * available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.results;\n    }\n\n    /**\n     * @return {Float64Array} Array of length equal to the number of genes,\n     * containing the sorted residuals after fitting a mean-dependent trend to the variances.\n     * Available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n \n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { span } = parameters;\n        this.changed = false;\n        \n        if (this.#norm.changed || span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            if (this.valid()) {\n                let mat = this.#norm.fetchNormalizedMatrix();\n                let block = this.#filter.fetchFilteredBlock();\n                this.#cache.results = scran.modelGeneVar(mat, { span: span, block: block });\n\n                this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n                this.#cache.sorted_residuals.sort();\n\n                this.changed = true;\n            }\n\n            this.#parameters.span = span;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, permuter, filter, norm) {\n    let ghandle = handle.open(\"feature_selection\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            span: phandle.open(\"span\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"means\" in rhandle.children) {\n            // Possibly permuting it to match the new permutation order;\n            // see 'unserialize' in 'inputs.js'.\n            let reloaded = {};\n            for (const key of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n                let value = rhandle.open(key, { load: true }).values;\n                reloaded[key] = permuter(value);\n            }\n\n            cache.results = scran.emptyModelGeneVarResults(reloaded.means.length, 1);\n            cache.results.means({ fillable: true }).set(reloaded.means);\n            cache.results.variances({ fillable: true }).set(reloaded.vars);\n            cache.results.fitted({ fillable: true }).set(reloaded.fitted);\n            cache.results.residuals({ fillable: true }).set(reloaded.resids);\n\n            cache.sorted_residuals = cache.results.residuals({ copy: true });\n            cache.sorted_residuals.sort();\n        }\n    }\n\n    return new FeatureSelectionState(filter, norm, parameters, cache);\n}\n\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\n/**\n * This step performs k-means clustering on the PCs, \n * wrapping the [`clusterKmeans`](https://kanaverse.github.io/scran.js/global.html#clusterKmeans) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode KmeansClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchCorrected();\n                this.#cache.raw = scran.clusterKmeans(pcs, k, { \n                    numberOfDims: this.#correct.fetchNumberOfDimensions(),\n                    numberOfCells: this.#correct.fetchNumberOfCells(),\n                    initMethod: \"pca-part\" \n                });\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let parameters = {\n        k: 10\n    };\n    let cache = {};\n\n    // Protect against old analysis states that don't have kmeans_cluster.\n    if (\"kmeans_cluster\" in handle.children) {\n        let ghandle = handle.open(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.k = phandle.open(\"k\", { load: true }).values[0];\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            if (\"clusters\" in rhandle.children) {\n                let clusters = rhandle.open(\"clusters\", { load: true }).values;\n                cache.raw = scran.emptyClusterKmeansResults(clusters.length, parameters.k, pca.fetchNumberOfDimensions());\n                cache.raw.clusters({ fillable: true }).set(clusters);\n            }\n        }\n    }\n\n    return new KmeansClusterState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * Results of marker detection,\n * see [here](https://www.kanaverse.github.io/scran.js/ScoreMarkersResults.html) for details.\n *\n * @external ScoreMarkersResults\n */\n\n/*********************\n ***** Internals *****\n *********************/\n\nfunction _free(cache) {\n    for (const v of Object.values(cache.raw)) {\n        utils.freeCache(v);\n    }\n    cache.raw = {};\n    markers.freeVersusResults(cache.versus);\n    delete cache.versus;\n}\n\nfunction _computeVersus(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n    let cache_info = markers.locateVersusCache(left, right, cache);\n    let left_index = (cache_info.left_small ? 0 : 1);\n    let right_index = (cache_info.left_small ? 1 : 0);\n\n    if (cache_info.run) {\n        let new_clusters = [];\n        let keep = [];\n        let leftfound = false, rightfound = false;\n        clusters.forEach((x, i) => {\n            if (x == left) {\n                new_clusters.push(left_index);\n                keep.push(i);\n                leftfound = true;\n            } else if (x == right) {\n                new_clusters.push(right_index);\n                keep.push(i);\n                rightfound = true;\n            }\n        });\n\n        if (!leftfound || !rightfound) {\n            throw new Error(\"non-zero entries should be present for both requested clusters in versus mode\");\n        }\n\n        markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n    }\n\n    return { \n        results: cache_info.cached,\n        left: left_index,\n        right: right_index\n    };\n}\n\n/*****************\n ***** State *****\n *****************/\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * The clustering is obtained from the upstream {@linkplain ChooseClusteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        _free(this.#cache);\n    }\n\n    /**\n     * Obtain the marker detection results for all modalities.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object where each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all clusters.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * Parameters used to compute the results.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `marker_detection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.lfc_threshold - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} parameters.compute_auc - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated with new results.\n     */\n    compute(parameters) {\n        let { lfc_threshold, compute_auc } = parameters;\n        this.changed = false;\n        let changed_params = (lfc_threshold !== this.#parameters.lfc_threshold || compute_auc !== this.#parameters.compute_auc);\n        \n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (this.#choice.changed || v.changed || changed_params) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClusters();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters.lfc_threshold = lfc_threshold;\n        this.#parameters.compute_auc = compute_auc;\n        if (this.changed) {\n            markers.freeVersusResults(this.#cache.versus);\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode MarkerDetectionCore#compute compute}.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    // Soft-deprecated.\n    static computeVersusCustom(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n        return computeVersus(left, right, matrices, clusters, { cache, block, lfc_threshold, compute_auc });\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two clusters for more detailed examination of the differences between them.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @param {number} left - Index of one cluster in which to find upregulated markers.\n     * @param {number} right - Index of another cluster to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` cluster in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` cluster in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        var clusters = this.#choice.fetchClusters();\n        var block = this.#filter.fetchFilteredBlock();\n\n        // No need to free this afterwards; we don't own the normalized matrices anyway.\n        let matrices = new scran.MultiMatrix;\n        for (const [modality, state] of Object.entries(this.#norm_states)) {\n            if (!state.valid()) {\n                continue;\n            }\n            matrices.add(modality, state.fetchNormalizedMatrix());\n        }\n\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n\n        return _computeVersus(left, right, matrices, clusters, { \n            cache: this.#cache.versus, \n            block: block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**********************\n ***** Standalone *****\n **********************/\n\n/**\n * Standalone version of {@linkplain MarkerDetectionState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices, groups and blocking factor to compute the various marker statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed MarkerDetectionStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class MarkerDetectionStandalone {\n    #matrices;\n\n    #groups;\n    #group_levels;\n    #block;\n    #block_levels;\n\n    #cache;\n    #parameters;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {Array|TypedArray} groups - Array of length equal to the number of columns in any value of `normalized`, containing the group assignments for each column. \n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, groups, { block = null } = {}) {\n        // Checking dimensions.\n        let N = groups.length;\n\n        for (const k of normalized.available()) {\n            let v = normalized.get(k);\n            if (v.numberOfColumns() != N) {\n                throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n            }\n        }\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as 'groups' if not null\");\n            }\n        }\n\n        let arrays = [ groups ];\n        if (block !== null) {\n            arrays.push(block);\n        }\n        let dump = utils.subsetInvalidFactors(arrays);\n\n        // Maybe taking a subset to eliminate invalid entries.\n        let new_matrices;\n        if (dump.retain !== null) {\n            new_matrices = new scran.MultiMatrix;\n            let temp = scran.createInt32WasmArray(dump.retain.length);\n            try {\n                temp.set(dump.retain);\n                for (const k of normalized.available()) {\n                    new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                }\n            } catch (e) {\n                new_matrices.free();\n                throw e;\n            } finally {\n                scran.free(temp);\n            }\n        } else {\n            new_matrices = normalized.clone();\n        }\n\n        this.#matrices = new_matrices;\n        this.#groups = dump.arrays[0].ids;\n        this.#group_levels = dump.arrays[0].levels;\n\n        if (block !== null) {\n            this.#block = dump.arrays[1].ids;\n            this.#block_levels = dump.arrays[1].levels;\n        } else {\n            this.#block = null;\n            this.#block_levels = null;\n        }\n\n        this.#cache = { raw: {}, init: true };\n        this.#parameters = MarkerDetectionState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#groups);\n        scran.free(this.#block);\n        scran.free(this.#matrices);\n        _free(this.#cache);\n    }\n\n    /**\n     * @return {object} Marker detection results for the all modalities.\n     * Each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all groups.\n     * This is available after running {@linkcode MarkerDetectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the grouping factor.\n     * Group indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchGroupLevels({ copy = true } = {}) {\n        let ret = this.#group_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#matrices;\n    }\n\n    _peekGroups() {\n        return this.#groups;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode MarkerDetectionState#defaults MarkerDetectionState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode MarkerDetectionState#compute MarkerDetectionState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     */\n    setParameters(parameters) {\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            this.free();\n        }\n        this.#parameters = { ...parameters };\n        return;\n    }\n\n    /**\n     * Compute markers for all groups.\n     *\n     * @return The state is updated with new results.\n     */\n    computeAll() {\n        let { lfc_threshold, compute_auc } = this.#parameters;\n        for (const k of this.#matrices.available()) {\n            var mat = this.#matrices.get(k);\n            utils.freeCache(this.#cache.raw[k]);\n            this.#cache.raw[k] = scran.scoreMarkers(mat, this.#groups, { block: this.#block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        }\n        return;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two groups, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {number} left - Index of one group in which to find upregulated markers.\n     * @param {number} right - Index of another group to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two groups.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` group in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` group in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n        return _computeVersus(left, right, this.#matrices, this.#groups, { \n            cache: this.#cache.versus, \n            block: this.#block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction fill_results(stats, num_blocks) {\n    let keys = Object.keys(stats);\n    let first = stats[keys[0]];\n    let ngenes = first.means.length;\n    let object = scran.emptyScoreMarkersResults(ngenes, keys.length, num_blocks, { computeAuc: (\"auc\" in first) });\n\n    for (const k of keys) {\n        let i = Number(k);\n        let vals = stats[k];\n        object.means(i, { fillable: true }).set(vals.means);\n        object.detected(i, { fillable: true }).set(vals.detected);\n\n        for (const [s, v] of Object.entries(vals.cohen)) {\n            object.cohen(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.lfc)) {\n            object.lfc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.delta_detected)) {\n            object.deltaDetected(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        if (\"auc\" in vals) {\n            for (const [s, v] of Object.entries(vals.auc)) {\n                object.auc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n            }\n        }\n    }\n\n    return object;\n}\n\nexport function unserialize(handle, permuters, filter, norm_states, choice) {\n    let ghandle = handle.open(\"marker_detection\");\n\n    let parameters = MarkerDetectionState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        if (\"lfc_threshold\" in phandle.children) {\n            parameters.lfc_threshold = phandle.open(\"lfc_threshold\", { load: true }).values[0];\n        }\n        if (\"compute_auc\" in phandle.children) {\n            parameters.compute_auc = phandle.open(\"compute_auc\", { load: true }).values[0] > 0;\n        }\n    }\n\n    // Figure out the number of blocks.\n    let num_blocks = 1;\n    {\n        let filtered = filter.fetchFilteredBlock();\n        if (filtered != null) {\n            filtered.forEach(x => {\n                if (x + 1 > num_blocks) {\n                    num_blocks = x + 1;\n                }\n            });\n        }\n    }\n\n    // Set up the marker detection statistics.\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        cache.raw = {};\n\n        if (\"clusters\" in rhandle.children) { \n            // below v2.0\n            let chandle = rhandle.open(\"clusters\");\n            let clusters = {};\n            for (const cl of Object.keys(chandle.children)) {\n                clusters[Number(cl)] = markers.unserializeGroupStats(chandle.open(cl), permuters[\"RNA\"], { compute_auc: parameters.compute_auc });\n            }\n            cache.raw.RNA = fill_results(clusters, num_blocks);\n        } else {\n            // after v2.0.\n            let chandle = rhandle.open(\"per_cluster\");\n            for (const a of Object.keys(chandle.children)) {\n                let clusters = {};\n                let ahandle = chandle.open(a);\n                for (const cl of Object.keys(ahandle.children)) {\n                    clusters[Number(cl)] = markers.unserializeGroupStats(ahandle.open(cl), permuters[a], { compute_auc: parameters.compute_auc });\n                }\n                cache.raw[a] = fill_results(clusters, num_blocks);\n            }\n        }\n \n    }\n\n    return new MarkerDetectionState(filter, norm_states, choice, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the [`buildNeighborSearchIndex`](https://kanaverse.github.io/scran.js/global.html#buildNeighborSearchIndex) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {BuildNeighborSearchIndexResults} Index for a nearest-neighbor search,\n     * available after running {@linkcode NeighborIndexState#compute compute}.\n     */\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        this.#cache.raw = scran.buildNeighborSearchIndex(this.#correct.fetchCorrected(), { \n            approximate: approximate, \n            numberOfDims: this.#correct.fetchNumberOfDimensions(),\n            numberOfCells: this.#correct.fetchNumberOfCells()\n        });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.approximate - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { approximate } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(approximate);\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let ghandle = handle.open(\"neighbor_index\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            approximate: phandle.open(\"approximate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let cache = {};\n    return new NeighborIndexState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./rna_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"rna_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaNormalizationState {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc' should be a RnaQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sum_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"RNA\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing normalized expression values,\n     * available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the RNA-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"RNA\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new RnaNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"rna_pca\";\n\n/**\n * Results of running PCA on some input matrix,\n * see [here](https://kanaverse.github.io/scran.js/RunPCAResults.html) for details.\n *\n * @external RunPCAResults\n */\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaPcaState { \n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a FeatureSelectionState object\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized gene expression values.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {number} parameters.num_hvgs - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be one of:\n     *\n     * - `\"none\"`, in which case nothing is done using the sample information. \n     * - `\"regress\"`, where linear regression is applied to remove mean differences between samples.\n     * - `\"weight\"`, where samples are weighted so that they contribute equally regardless of the number of cells.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_hvgs, num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#feat.changed || num_hvgs !== this.#parameters.num_hvgs) {\n            if (this.valid()) {\n                choose_hvgs(num_hvgs, this.#feat, this.#cache);\n                this.changed = true;\n            }\n\n            this.#parameters.num_hvgs = num_hvgs;\n        }\n\n        if (this.changed || this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            utils.freeCache(this.#cache.pcs);\n\n            if (this.valid()) {\n                let sub = this.#cache.hvg_buffer;\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                this.#cache.pcs = scran.runPCA(mat, { features: sub, numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResults().residuals({ copy: false });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm, feat) {\n    let ghandle = handle.open(\"rna_pca\" in handle.children ? \"rna_pca\" : \"pca\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters = { \n            num_hvgs: phandle.open(\"num_hvgs\", { load: true }).values[0],\n            num_pcs: phandle.open(\"num_pcs\", { load: true }).values[0]\n        };\n\n        // For back-compatibility.\n        if (\"block_method\" in phandle.children) {\n            parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n            if (parameters.block_method == \"mnn\") {\n                parameters.block_method = \"weight\";\n            }\n        } else {\n            parameters.block_method = \"none\";\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        if (feat.valid()) {\n            choose_hvgs(parameters.num_hvgs, feat, cache);\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"pcs\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n        }\n\n        output = new RnaPcaState(filter, norm, feat, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.hvg_buffer);\n        utils.freeCache(cache.pcs);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as rutils from \"../readers/index.js\";\n\nconst baseUrl = \"https://github.com/kanaverse/kana-special-features/releases/download/v1.0.0\";\n\nexport const step_name = \"rna_quality_control\";\n\n/**\n * Results of computing per-cell RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellRnaQcMetricsResults.html) for details.\n *\n * @external PerCellRnaQcMetricsResults\n */\n\n/**\n * Suggested filters for the RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestRnaQcFiltersResults.html) for details.\n *\n * @external SuggestRnaQcFiltersResults\n */\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellRnaQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellRnaQcMetrics)\n * and [`suggestRnaQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestRnaQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n    #automatic;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#automatic = false;\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        output.species = bioc.CLONE(output.species);\n        return output;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:SuggestRnaQcFiltersResults} Result of filtering on the RNA-derived QC metrics.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {external:PerCellRnaQcMetricsResults} RNA-derived QC metrics.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults () {\n        return {\n            automatic: true,\n            gene_id_column: null,\n            use_reference_mito: true,\n            species: [],\n            gene_id_type: \"ENSEMBL\",\n            mito_prefix: \"mt-\",\n            nmads: 3\n        };\n    }\n\n    static configureFeatureParameters(use_reference_mito, guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Array of strings containing the taxonomy IDs for species where mitochondrial gene lists are available.\n     * @type {Array}\n     */\n    static mitochondriaSpecies = [ \n        \"9606\",  // Mouse\n        \"10090\", // Human\n        \"6239\",  // C. elegans\n        \"10116\", // Rat\n        \"9541\",  // M. fascicularis\n        \"7227\",  // Fly\n        \"7955\",  // Zebrafish\n        \"9598\"   // Chimp\n    ];\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #acquire_reference(species, feature_type) {\n        let output = new Set;\n        let mito_lists = RnaQualityControlState.#mito_lists;\n\n        for (const s of species) {\n            let target = s + \"-mito-\" + feature_type.toLowerCase() + \".txt.gz\";\n            if (!(target in mito_lists)) {\n                let contents = await RnaQualityControlState.#downloadFun(baseUrl + \"/\" + target);\n                let lines = await rutils.readLines2(contents, { compression: \"gz\" });\n                mito_lists[target] = lines;\n            }\n\n            mito_lists[target].forEach(x => { output.add(x); });\n        }\n\n        return output;\n    }\n\n    static #mito_lists = {};\n\n    /**\n     * Flush all cached lists of mitochondrial genes.\n     *\n     * By default, {@linkcode RnaQualityControlState#compute compute} will cache the mitochondrial gene lists in a static member for re-use across {@linkplain RnaQualityControlState} instances.\n     * These cached lists are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        RnaQualityControlState.#mito_lists = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download the reference mitochondrial gene lists.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = RnaQualityControlState.#downloadFun;\n        RnaQualityControlState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If set to `true`, the following logic is applied:\n     *\n     * - If `use_reference_mito = true`, the annotation column that best matches human/mouse Ensembl/symbols is set as `gene_id_column`.\n     *   Based on the identified species and feature type, `species` and `gene_id_type` are also set.\n     * - If `use_reference_mito = false`, the annotation column that best matches human/mouse symbols is set as `gene_id_column`.\n     *\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the feature annotations that contains the gene identifiers for the RNA modality.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {boolean} parameters.use_reference_mito - Whether to use the reference lists of mitochondrial genes.\n     * If `false`, mitochondrial genes are instead identified from their prefix.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species to use to obtain a reference list of mitochondrial genes.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode RnaQualityControlState#mitochondriaSpecies mitochondriaSpecies}).\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Name of the feature type in the reference list of mitochondrial genes.\n     * This can be any one of `\"ENSEMBL\"`, `\"SYMBOL\"`, or `\"ENTREZ\"`.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.mito_prefix - Case-insensitive prefix to use to identify mitochondrial genes from the dataset.\n     * Only used when `use_reference_mito = false`; in such cases, `gene_id_column` should point to symbols.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let { mito_prefix, nmads } = parameters;\n        let automatic;\n        let use_reference_mito;\n        let gene_id_column;\n        let species;\n        let gene_id_type;\n\n        // Some back-compatibility here.\n        if (\"use_reference_mito\" in parameters) {\n            automatic = parameters.automatic;\n            use_reference_mito = parameters.use_reference_mito;\n            gene_id_column = parameters.gene_id_column;\n            species = parameters.species;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            automatic = true;\n            use_reference_mito = parameters.use_mito_default;\n            let def = RnaQualityControlState.defaults();\n            gene_id_column = def.gene_id_column;\n            species = def.species;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            use_reference_mito !== this.#parameters.use_reference_mito || \n            (\n                !automatic && \n                (\n                    gene_id_column !== this.#parameters.gene_id_column || \n                    (!use_reference_mito && mito_prefix !== this.#parameters.mito_prefix) ||\n                    (\n                        use_reference_mito && \n                        (\n                            utils.changedParameters(species, this.#parameters.species) || \n                            gene_id_type !== this.#parameters.gene_id_type\n                        )\n                    )\n                )\n            ) \n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                let gene_id_column2 = gene_id_column;\n                let species2 = species;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let backcomp = RnaQualityControlState.configureFeatureParameters(use_reference_mito, guesses);\n                    gene_id_column2 = backcomp.gene_id_column;\n                    species2 = backcomp.species;\n                    gene_id_type2 = backcomp.gene_id_type;\n                }\n\n                var gene_info = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let val = (gene_id_column2 == null ? gene_info.rowNames() : gene_info.column(gene_id_column2));\n                var subsets = utils.allocateCachedArray(gene_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (val !== null) {\n                    if (use_reference_mito) {\n                        let lists = await this.#acquire_reference(species2, gene_id_type2);\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if (lists.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else if (mito_prefix !== null) {\n                        var lower_mito = mito_prefix.toLowerCase();\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"RNA\");\n                this.#cache.metrics = scran.perCellRnaQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.use_reference_mito = use_reference_mito;\n        this.#parameters.species = bioc.CLONE(species); // avoid pass-by-reference behavior.\n        this.#parameters.gene_id_type = gene_id_type;\n        this.#parameters.mito_prefix = mito_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestRnaQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let ghandle = handle.open(\"rna_quality_control\" in handle.children ? \"rna_quality_control\" : \"quality_control\");\n\n    let parameters = RnaQualityControlState.defaults(); \n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.use_mito_default = phandle.open(\"use_mito_default\", { load: true }).values[0] > 0;\n        parameters.mito_prefix = phandle.open(\"mito_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n    }\n\n    let output;\n    let cache = {};\n    try {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"metrics\" in rhandle.children) { // QC metrics may not be reported if skipped.\n            let mhandle = rhandle.open(\"metrics\");\n            let sums = mhandle.open(\"sums\", { load: true }).values;\n\n            cache.metrics = scran.emptyPerCellRnaQcMetricsResults(sums.length, 1);\n            cache.metrics.sums({ fillable: true }).set(sums);\n\n            let detected = mhandle.open(\"detected\", { load: true }).values;\n            cache.metrics.detected({ fillable: true }).set(detected);\n            let proportions = mhandle.open(\"proportion\", { load: true }).values;\n            cache.metrics.subsetProportions(0, { fillable: true }).set(proportions);\n        }\n\n        if (\"thresholds\" in rhandle.children) { // if skip=true, QC thresholds may not be reported.\n            let discards = rhandle.open(\"discards\", { load: true }).values; \n            cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n            cache.discard_buffer.set(discards);\n\n            let thandle = rhandle.open(\"thresholds\");\n            let thresholds_sums = thandle.open(\"sums\", { load: true }).values;\n            let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n            let thresholds_proportion = thandle.open(\"proportion\", { load: true }).values;\n\n            cache.filters = scran.emptySuggestRnaQcFiltersResults(1, thresholds_sums.length);\n            cache.filters.thresholdsSums({ fillable: true }).set(thresholds_sums);\n            cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n            cache.filters.thresholdsSubsetProportions(0, { fillable: true }).set(thresholds_proportion);\n        }\n\n        output = new RnaQualityControlState(inputs, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.metrics);\n        utils.freeCache(cache.filters)\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\nexport const step_name = \"snn_graph_cluster\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkplain NeighborIndexState}.\n * This wraps [`clusterSNNGraph`](https://kanaverse.github.io/scran.js/global.html#clusterSNNGraph) \n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode SnnGraphClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSNNGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterSNNGraph(this.#cache.graph, {\n            method: algorithm,\n            multiLevelResolution: multilevel_resolution,\n            leidenResolution: leiden_resolution,\n            leidenModularityObjective: true, // avoid problems with unstable interpretation of leidenResolution.\n            walktrapSteps: walktrap_steps\n        });\n        return;\n    }\n\n    static defaults() {\n        return { \n            k: 10,\n            scheme: \"rank\",\n            algorithm: \"multilevel\",\n            multilevel_resolution: 1,\n            leiden_resolution: 1,\n            walktrap_steps: 4\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of nearest neighbors used to construct the graph.\n     * @param {string} parameters.scheme - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {string} parameters.algorithm - Algorithm to use for community detection.\n     * This can be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n     * @param {number} parameters.multilevel_resolution - Resolution of the multi-level community detection.\n     * @param {number} parameters.leiden_resolution - Resolution of the Leiden community detection.\n     * @param {number} parameters.walktrap_steps - Number of merge steps for the Walktrap algorithm.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k, scheme, algorithm, multilevel_resolution, leiden_resolution, walktrap_steps } = parameters;\n        this.changed = false;\n\n        if (this.#index.changed || k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        if (this.changed || scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.#parameters.scheme = scheme;\n            this.changed = true \n        }\n\n        if (this.changed \n            || algorithm !== this.#parameters.algorithm \n            || multilevel_resolution !== this.#parameters.multilevel_resolution \n            || leiden_resolution !== this.#parameters.leiden_resolution \n            || walktrap_steps !== this.#parameters.walktrap_steps \n            || (!this.#valid() && run_me))\n        {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps);\n            } else {\n                delete this.#cache.clusters;\n            }\n\n            this.#parameters.algorithm = algorithm;\n            this.#parameters.multilevel_resolution = multilevel_resolution;\n            this.#parameters.leiden_resolution = leiden_resolution;\n            this.#parameters.walktrap_steps = walktrap_steps;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"snn_graph_cluster\");\n\n    let parameters = SnnGraphClusterState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters.k = phandle.open(\"k\", { load: true }).values[0];\n\n        parameters.scheme = phandle.open(\"scheme\", { load: true }).values[0];\n        if (typeof parameters.scheme !== \"string\") { // because I stuffed up and tried to save a string as an int in v1.0, oops.\n            parameters.scheme = \"rank\";\n        }\n\n        if (\"algorithm\" in phandle.children) {\n            // v3.0\n            parameters.algorithm = phandle.open(\"algorithm\", { load: true }).values[0];\n            parameters.multilevel_resolution = phandle.open(\"multilevel_resolution\", { load: true }).values[0];\n            parameters.leiden_resolution = phandle.open(\"leiden_resolution\", { load: true }).values[0];\n            parameters.walktrap_steps = phandle.open(\"walktrap_steps\", { load: true }).values[0];\n        } else {\n            // v2.0\n            parameters.multilevel_resolution = phandle.open(\"resolution\", { load: true }).values[0];\n        }\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        if (\"clusters\" in rhandle.children) {\n            let clusters = rhandle.open(\"clusters\", { load: true }).values;\n            cache.clusters = scran.emptyClusterSNNGraphResults(clusters.length, 1);\n            cache.clusters.setBest(0); // whatever.\n            cache.clusters.membership({ fillable: true }).set(clusters);\n        }\n    }\n\n    return new SnnGraphClusterState(index, parameters, cache);\n}\n\n\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a t-SNE embedding based on the neighbor index constructed by {@linkplain NeighborIndexState}.\n * This wraps [`runTSNE`](https://kanaverse.github.io/scran.js/global.html#runTSNE)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class TsneState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createTsneWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n        \n            output.iterations = this.#parameters.iterations;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(perplexity, iterations, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            var k = scran.perplexityToNeighbors(perplexity);\n            nn_out = vizutils.computeNeighbors(this.#index, k);\n        }\n\n        let args = {\n            \"perplexity\": perplexity,\n            \"iterations\": iterations,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the t-SNE runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `tsne` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.perplexity - Number specifying the perplexity for the probability calculations.\n     * @param {number} parameters.iterations - Number of iterations to run the algorithm.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return t-SNE coordinates are computed in parallel on a separate worker thread.\n     * A promise is returned that resolves when those calculations are complete.\n     */\n    compute(parameters) {\n        let { perplexity, iterations, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && perplexity === this.#parameters.perplexity);\n        if (same_neighbors && iterations == this.#parameters.iterations) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(perplexity, iterations, animate, !same_neighbors);\n\n        this.#parameters.perplexity = perplexity;\n        this.#parameters.iterations = iterations;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******* Animators *********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.perplexity, this.#parameters.iterations, true, true);\n\n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => {\n                    return {\n                        \"type\": \"tsne_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"tsne\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            perplexity: phandle.open(\"perplexity\", { load: true }).values[0],\n            iterations: phandle.open(\"iterations\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new TsneState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a UMAP embedding based on the neighbor index constructed at {@linkplain NeighborIndexState}.\n * This wraps [`runUMAP`](https://kanaverse.github.io/scran.js/global.html#runUMAP)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class UmapState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createUmapWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n\n            output.iterations = this.#parameters.num_epochs;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(num_neighbors, num_epochs, min_dist, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            nn_out = vizutils.computeNeighbors(this.#index, num_neighbors);\n        }\n\n        let args = {\n            \"num_neighbors\": num_neighbors,\n            \"num_epochs\": num_epochs,\n            \"min_dist\": min_dist,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the UMAP runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `umap` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use to construct the simplicial sets.\n     * @param {number} parameters.num_epochs - Number of epochs to run the algorithm.\n     * @param {number} parameters.min_dist - Number specifying the minimum distance between points.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return UMAP coordinates are computed in parallel on a separate worker thread.\n     * A promise that resolves when the calculations are complete.\n     */\n    compute(parameters) {\n        let { num_neighbors, num_epochs, min_dist, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && this.#parameters.num_neighbors === num_neighbors);\n        if (same_neighbors && num_epochs === this.#parameters.num_epochs && min_dist === this.#parameters.min_dist) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(num_neighbors, num_epochs, min_dist, animate, !same_neighbors);\n\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.num_epochs = num_epochs;\n        this.#parameters.min_dist = min_dist;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.num_neighbors, this.#parameters.num_epochs, this.#parameters.min_dist, true, true);\n      \n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => { \n                    return {\n                        \"type\": \"umap_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"umap\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            num_neighbors: phandle.open(\"num_neighbors\", { load: true }).values[0],\n            num_epochs: phandle.open(\"num_epochs\", { load: true }).values[0],\n            min_dist: phandle.open(\"min_dist\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new UmapState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","export function registerCallback(worker, callback) {\n    worker.onmessage = callback;\n    return;\n}\n\nexport function sendMessage(worker, message, transfer) {\n    worker.postMessage(message, transfer);\n    return;\n}\n\nexport function terminateWorker(worker) {\n    worker.terminate();\n    return;\n}\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    // Just an alias for back-compatibility.\n    scran.free(object);\n    return;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n\nexport async function defaultDownload(url) {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return new Uint8Array(await resp.arrayBuffer());\n}\n\nexport function guessFeatureTypes(genes) {\n    let output = { columns: {} };\n\n    let rn = genes.rowNames();\n    if (rn !== null) {\n        output.row_names = scran.guessFeatures(rn, { forceTaxonomy: true });\n    }\n\n    for (const key of genes.columnNames()) {\n        let curcol = genes.column(key);\n        if (curcol instanceof Array) {\n            output.columns[key] = scran.guessFeatures(genes.column(key), { forceTaxonomy: true });\n        }\n    }\n\n    return output;\n}\n\nexport function subsetInvalidFactors(arrays) {\n    let N = arrays[0].length;\n    let output = { arrays: [], retain: null };\n\n    let invalid = new Uint8Array(N);\n    invalid.fill(0);\n    for (const x of arrays) {\n        let transformed = scran.factorize(x, { action: \"none\", placeholder: -1 });\n        output.arrays.push(transformed);\n        transformed.ids.forEach((y, i) => {\n            if (y == -1) {\n                invalid[i] = 1;\n            }\n        });\n    }\n\n    let num_invalid = 0;\n    invalid.forEach(y => { num_invalid += y; });\n    if (num_invalid == 0) {\n        return output;\n    }\n\n    let retain = new Int32Array(N - num_invalid);\n    {\n        let counter = 0;\n        for (var i = 0; i < N; i++) {\n            if (invalid[i] == 0) {\n                retain[counter] = i;\n                counter++;\n            }\n        }\n    }\n    output.retain = retain;\n\n    for (var i = 0; i < output.arrays.length; i++) {\n        let x = output.arrays[i];\n        let new_ids = scran.subsetBlock(x.ids, retain);\n        let remapping = scran.dropUnusedBlock(new_ids);\n        let new_levels = remapping.map(i => x.levels[i]);\n\n        scran.free(x.ids);\n        x.ids = new_ids;\n        x.levels = new_levels;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\n\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false, compute_auc = true } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = permuter(handle.open(x, { load: true }).values);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (i == \"auc\" && !compute_auc) {\n            continue;\n        }\n\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(rhandle.children)) {\n                current[j] = permuter(rhandle.open(j, { load: true }).values);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\nexport function fillGroupStats(object, i, vals) {\n    object.means(i, { copy: false }).set(vals.means);\n    object.detected(i, { copy: false }).set(vals.detected);\n\n    for (const [s, v] of Object.entries(vals.cohen)) {\n        object.cohen(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.lfc)) {\n        object.lfc(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.delta_detected)) {\n        object.deltaDetected(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    if (\"auc\" in vals) {\n        for (const [s, v] of Object.entries(vals.auc)) {\n            object.auc(i, { summary: summaries2int[s], copy: false }).set(v);\n        }\n    }\n}\n\n/**\n * Report marker results for a given group or cluster, ordered so that the strongest candidate markers appear first.\n *\n * @param {ScoreMarkersResults} results - The marker results object generated by the `scoreMarkers` function in **scran.js**.\n * @param {number} group - Integer specifying the group or cluster of interest.\n * Any number can be used if it was part of the `groups` passed to `scoreMarkers`.\n * @param {string} rankEffect - Summarized effect size to use for ranking markers.\n * This should follow the format of `<effect>-<summary>` where `<effect>` may be `lfc`, `cohen`, `auc` or `delta_detected`,\n * and `<summary>` may be `min`, `mean` or `min-rank`.\n *\n * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rankEffect`.\n * This contains:\n *   - `means`: a Float64Array of length equal to the number of genes, containing the mean expression within the selection.\n *   - `detected`: a Float64Array of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n *   - `lfc`: a Float64Array of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n *   - `delta_detected`: a Float64Array of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n */\nexport function formatMarkerResults(results, group, rankEffect) {\n    if (!rankEffect || rankEffect === undefined) {\n        rankEffect = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        let index = 1;\n        if (rankEffect.match(/-min$/)) {\n            index = 0;\n        } else if (rankEffect.match(/-min-rank$/)) {\n            increasing = true;\n            index = 4;\n        }\n\n        if (rankEffect.match(/^cohen-/)) {\n            ranking = results.cohen(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^lfc-/)) {\n            ranking = results.lfc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: index, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rankEffect + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.means(group, { copy: false }));\n    var stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n\nexport function locateVersusCache(left, right, cache) {\n    let left_small = left < right;\n\n    let bigg = (left_small ? right : left);\n    if (!(bigg in cache)) {\n        cache[bigg] = {};\n    }\n    let biggversus = cache[bigg];\n\n    let smal = (left_small ? left : right); \n    let rerun = !(smal in biggversus);\n    if (rerun) {\n        biggversus[smal] = {};\n    }\n\n    return { \n        cached: biggversus[smal],\n        run: rerun,\n        left_small: left_small\n    };\n}\n\nexport function freeVersusResults(cache) {\n    if (cache) {\n        for (const v of Object.values(cache)) {\n            for (const v2 of Object.values(v)) {\n                for (const m of Object.values(v2)) {\n                    scran.free(m);\n                }\n            }\n        }\n        for (const k of Object.keys(cache)) {\n            delete cache[k];\n        }\n    }\n}\n\nexport function computeVersusResults(matrices, clusters, block, keep, cache, lfc_threshold, compute_auc) {\n    let new_block = null;\n    if (block !== null) {\n        new_block = scran.subsetBlock(block, keep);\n        scran.dropUnusedBlock(new_block);\n    }\n\n    for (const modality of matrices.available()) {\n        let modmat = matrices.get(modality);\n        let sub;\n        try {\n            sub = scran.subsetColumns(modmat, keep);\n            cache[modality] = scran.scoreMarkers(sub, clusters, { block: new_block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        } finally {\n            scran.free(sub);\n        }\n    }\n}\n","import * as utils from \"./general.js\";\n\nexport function subsetSums(qc, filter, mat, cache, name) {\n    let output = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache, name);\n    let discards = filter.fetchDiscards();\n\n    // unsafe, so no more Wasm allocations past this point. \n    let sums = qc.fetchMetrics().sums({ copy: false }); \n\n    if (discards == null) {\n        output.set(sums);\n    } else {\n        let oarr = output.array();\n        var j = 0;\n        discards.forEach((x, i) => {\n            if (!x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                oarr[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export function areArraysEqual(x, y) {\n    if (x.length !== y.length) {\n        return false;\n    }\n\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] != y[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isArrayLike(x) {\n    return x.constructor == Array || ArrayBuffer.isView(x);\n}\n\nexport function chooseArrayConstructors(con1, con2) {\n    if (con1 == con2) {\n        return con1;\n    }\n\n    if (con1 == Array || con2 == Array) {\n        return Array;\n    }\n\n    if (con1 == BigInt64Array || con2 == BigInt64Array || con1 == BigUint64Array || con2 == BigUint64Array) {\n        return Array;\n    }\n\n    return Float64Array;\n}\n\nexport function formatLengthError(left, right) {\n    return new Error(left + \" should have length equal to \" + right);\n}\n\nexport function checkStringArray(names, typeMessage) {\n    for (const x of names) {\n        if (typeof x !== \"string\") {\n            throw new Error(typeMessage + \" array should only contain strings\");\n        }\n    }\n}\n\nexport function checkNamesArray(names, typeMessage, numExpected, lengthMessage) {\n    checkStringArray(names, typeMessage);\n    if (names.length != numExpected) {\n        throw formatLengthError(typeMessage + \" array\", lengthMessage);\n    }\n}\n\nexport function sum(y) {\n    let total = 0;\n    y.forEach(x => { total += x; });\n    return total;\n}\n\nexport function combineNames(all_names, all_lengths, total_n = null) {\n    let all_null = true;\n    for (var i = 0; i < all_names.length; i++) {\n        if (all_names[i] !== null) {\n            all_null = false;\n        }\n    }\n\n    if (all_null) {\n        return null;\n    }\n\n    if (total_n === null) {\n        total_n = sum(all_lengths);\n    }\n\n    let output = new Array(total_n);\n    let counter = 0;\n    for (var i = 0; i < all_names.length; i++) {\n        let n = all_names[i];\n        if (n === null) {\n            output.fill(\"\", counter, counter + all_lengths[i]);\n            counter += all_lengths[i];\n        } else {\n            n.forEach(x => {\n                output[counter] = x;\n                counter++;\n            });\n        }\n    }\n\n    return output;\n}\n\nexport function createSequence(n) {\n    let output = new Int32Array(n);\n    for (var i = 0; i < n; i++) {\n        output[i] = i;\n    }\n    return output;\n}\n\nexport function isSorted(n, cmp) {\n    for (var i = 1; i < n; ++i) {\n        if (cmp(i-1, i) > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function convertToInt32Array(x) {\n    if (x instanceof Int32Array) {\n        return x;\n    } else {\n        return new Int32Array(x);\n    }\n}\n\nexport function checkNonNegative(x, msg) {\n    for (const y of x) {\n        if (y < 0) {\n            throw new Error(\"detected a negative entry in '\" + msg + \"'\");\n        }\n    }\n}\n\nexport function object2map(x) {\n    if (x.constructor == Object) {\n        let replacement = new Map;\n        for (const [k, v] of Object.entries(x)) {\n            replacement.set(k, v);\n        }\n        return replacement;\n    } \n\n    if (!(x instanceof Map)) {\n        throw new Error(\"'x' should be either an object or Map\");\n    }\n    return x;\n}\n","/**\n * @param {Array|TypedArray} x - Array of values to be interpreted as truthy or falsey.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.not=false] - Whether to select the entries of `x` that are falsey.\n *\n * @return {Array} Array of indices of the entries of `x` that are truthy (if `not=false`) or falsey (if `not=true`).\n * This array is guaranteed to be sorted in ascending order.\n */\nexport function which(x, { not = false } = {}) {\n    let output = [];\n    x.forEach((y, i) => {\n        if ((!y) == not) {\n            output.push(i);\n        }\n    });\n    return output;\n}\n\n/**\n * Given a factor, return the indices corresponding to each level.\n * This can be used in subsequent {@linkcode splitRows} calls.\n *\n * @param {Array|TypedArray} factor - Array containing the factor of interest.\n *\n * @return {Object} Object where each key is a factor level and each value is an array containing the indices corresponding to that level in `factor`.\n */\nexport function presplitFactor(factor) {\n    let by = {};\n    factor.forEach((x, i) => {\n        if (!(x in by)) {\n            by[x] = [];\n        }\n        by[x].push(i);\n    });\n    return by;\n}\n","import * as utils from \"./utils.js\";\nimport * as misc from \"./miscellaneous.js\";\n\n/**\n * Compute the length of a vector-like object.\n *\n * For Array and TypedArrays, this just returns the `length` property directly.\n *\n * Custom classes should provide a `_bioconductor_LENGTH` method to describe their length.\n * This method should accept no arguments. \n *\n * @param {*} x - Some vector-like object.\n * @return {number} Length of the object.\n */\nexport function LENGTH(x) {\n    if (\"_bioconductor_LENGTH\" in x) {\n        return x._bioconductor_LENGTH();\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'LENGTH' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    return x.length;\n}\n\n/**\n * Slice a vector-like object.\n *\n * For Array and TypedArrays, this just uses `slice()` or `subarray()`.\n *\n * Custom classes should provide a `_bioconductor_SLICE` method to create a slice.\n * This method should accept the same arguments as `SLICE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object|Array|TypedArray} i - An Array or TypedArray of integer indices specifying the slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A vector-like object, typically of the same class as `x`, containing data for the specified slice.\n *\n * If `allowInPlace = true`, `x` _may_ be modified in place, and the return value _may_ be a reference to `x`. \n */\nexport function SLICE(x, i, { allowView = false } = {}) {\n    if (\"_bioconductor_SLICE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_SLICE(output, i, { allowView });\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'SLICE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    if (i.constructor == Object) {\n        if (allowView && ArrayBuffer.isView(x)) {\n            return x.subarray(i.start, i.end);\n        } else {\n            return x.slice(i.start, i.end);\n        }\n    } else {\n        let output = new x.constructor(i.length);\n        i.forEach((y, j) => {\n            output[j] = x[y];\n        });\n        return output;\n    }\n}\n\n/**\n * Combine multiple vector-like objects.\n *\n * For Array and TypedArrays, the combined array is of a class that avoids information loss.\n *\n * Custom classes should provide a `_bioconductor_COMBINE` method to define the combining operation.\n * This method should accept the same arguments as `COMBINE`.\n *\n * @param {Array} objects - Array of vector-like objects to be combined.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE` method of the first element of `objects`.\n *\n * @return {*} A vector-like object containing the concatenated data from the input objects.\n * - If the first entry of `objects` is an instance of a custom class, the return value should be of the same class.\n * - If all `objects` are TypedArrays of the same class, the return value will be a TypedArray of that class.\n * - If any of the `objects` are Arrays, the return value will be an Array.\n * - If any of the `objects` are 64-bit TypedArrays of different classes, the return value will be an Array.\n * - Otherwise, for any other classes of TypedArrays in `objects`, the return value will be a Float64Array.\n */\nexport function COMBINE(objects) {\n    let x = objects[0];\n    if (\"_bioconductor_COMBINE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_COMBINE(output, objects);\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'COMBINE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    // It is assumed that every 'y' is of some compatible Array-like type as well.\n    let total_LENGTH = 0;\n    let constructor = x.constructor;\n\n    for (const obj of objects) {\n        total_LENGTH += obj.length;\n        constructor = utils.chooseArrayConstructors(constructor, obj.constructor);\n    }\n\n    let output = new constructor(total_LENGTH);\n    let position = 0;\n    for (const obj of objects) {\n        if (\"set\" in output) {\n            output.set(obj, position);\n            position += obj.length;\n        } else {\n            obj.forEach(x => {\n                output[position] = x;\n                position++;\n            });\n        }\n    }\n\n    return output;\n}\n\n/**\n * Clone a vector-like object.\n * \n * For TypedArrays, this just uses `slice()`.\n * For Arrays, this creates a copy and runs `CLONE` on each element in the copy.\n *\n * Custom classes should provide a `_bioconductor_CLONE` method to define the cloning operation.\n * This method should accept the same arguments as `COMBINE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.deepCopy=true] - Whether to create a deep copy.\n * The exact interpretation of `deepCopy=false` is left to each method, but generally speaking, \n * any setter (`$`-marked) functions operating on the copy should not alter `x`.\n *\n * @return {*} A clone of `x`, i.e., the return value and `x` should not compare equal.\n * If `deepCopy=true`, all internal components are also cloned.\n */\nexport function CLONE(x, { deepCopy = true } = {}) {\n    if (x instanceof Object) {\n        let options = { deepCopy };\n        if (\"_bioconductor_CLONE\" in x) {\n            let output = new x.constructor;\n            x._bioconductor_CLONE(output, options);\n            return output;\n        }\n\n        if (utils.isArrayLike(x)) {\n            if (x.constructor == Array) {\n                return x.map(y => CLONE(y, options));\n            } else if (deepCopy) {\n                return x.slice();\n            } else {\n                return x.subarray();\n            }\n        }\n\n        if (x.constructor == Object) {\n            if (deepCopy) {\n                let output = {};\n                for (const [k, v] of Object.entries(x)) {\n                    output[k] = CLONE(v);\n                }\n                return output;\n            } else {\n                return { ...x };\n            }\n        }\n\n        if (x.constructor == Map) {\n            let output = new Map;\n            for (const [k, v] of x) {\n                output.set(k, deepCopy ? CLONE(v) : v);\n            }\n            return output;\n        }\n\n        if (x.constructor == Set) {\n            let output = new Set;\n            for (const k of x) {\n                output.add(deepCopy ? CLONE(k) : k);\n            }\n            return output;\n        }\n\n\n        throw new Error(\"unknown CLONE operation for instance of class '\" + x.constructor.name + \"'\");\n    }\n\n    // Immutable atomics should be all that's left.\n    return x;\n}\n\n/**\n * Split a vector-like object along its length according to the levels of a factor of the same length.\n * This works automatically for all classes for which there is a {@linkcode SLICE} method,\n * but custom classes may also choose to define their own `_bioconductor_SPLIT` method. \n *\n * @param {*} x - Some vector-like object.\n * @param {Array|TypedArray} factor - Array containing the factor to use for splitting.\n * This should have the same length as `x`.\n *\n * Alternatively, the output of {@linkcode presplitFactor} can be supplied.\n *\n * @return {Object} An object containing one key per level of `factor`,\n * where the value is the slice of `x` corresponding to the indices of that level in `factor`.\n */\nexport function SPLIT(x, factor) {\n    if (factor.constructor != Object) {\n        factor = misc.presplitFactor(factor);\n    }\n\n    if (\"_bioconductor_SPLIT\" in x) {\n        return x._bioconductor_SPLIT(factor);\n    }\n\n    let output = {};\n    for (const [k, v] of Object.entries(factor)) {\n        output[k] = SLICE(x, v);\n    }\n\n    return output;\n}\n\n/**\n * Return the number of rows for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_ROWS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of rows.\n */\nexport function NUMBER_OF_ROWS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_ROWS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_ROWS();\n}\n\n/**\n * Return the number of columns for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_COLUMNS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of columns.\n */\nexport function NUMBER_OF_COLUMNS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_COLUMNS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_COLUMNS();\n}\n\n/**\n * Slice a two-dimensional object by its rows and/or columns.\n *\n * Custom classes should provide a `_bioconductor_SLICE_2D` method, accepting the same arguments as this generic but with `x` replaced by an \"empty\" instance of the same class.\n * Each method should then fill the empty instance with the sliced contents of `x`.\n *\n * @param {*} x - Some two-dimensional object.\n * @param {?(Object|Array|TypedArray)} rows - An Array or TypedArray of integer indices specifying the row-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * \n * Alternatively `null`, to indicate that no slicing is to be performed on the rows.\n * @param {?(Object|Array|TypedArray)} columns - An Array or TypedArray of integer indices specifying the column-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n *\n * Alternatively `null`, to indicate that no slicing is to be performed on the columns.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A two-dimensional object, typically of the same class as `x`, containing data for the specified slice.\n */\nexport function SLICE_2D(x, rows, columns, { allowView = false } = {}) {\n    if (!(\"_bioconductor_SLICE_2D\" in x)) {\n        throw new Error(\"no 'SLICE_2D' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by row.\n * Custom classes should provide a `_bioconductor_COMBINE_ROWS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by row.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_ROWS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the row-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_ROWS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_ROWS\" in x)) {\n        throw new Error(\"no 'COMBINE_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_ROWS(output, objects);\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by column.\n * Custom classes should provide a `_bioconductor_COMBINE_COLUMNS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by column.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_COLUMNS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the column-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_COLUMNS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_COLUMNS\" in x)) {\n        throw new Error(\"no 'COMBINE_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_COLUMNS(output, objects);\n    return output;\n}\n","import * as generics from \"./AllGenerics.js\";\n\nexport function setterTarget(object, inPlace) {\n    return (inPlace ? object : generics.CLONE(object, { deepCopy: false }));\n}\n\nexport function cloneField(value, deepCopy) {\n    return (deepCopy ? generics.CLONE(value) : value);\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * The Annotated class provides a store for arbitrary object-wide metadata.\n * It is intended as a base class for other structures and should not be constructed directly.\n */\nexport class Annotated {\n    /**\n     * @param {Object|Map} metadata - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(metadata) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._metadata = utils.object2map(metadata);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Map} Map containing arbitrary metadata.\n     */\n    metadata() {\n        return this._metadata;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object|Map} value - Object containing the metadata.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Annotated} The Annotated object after replacing the metadata.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setMetadata(value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._metadata = utils.object2map(value);\n        return target;\n    }\n\n    /**\n     * @param {Object} value - Object containing the metadata.\n     * @return {Annotated} A reference to this Annotated object.\n     */\n    $setMetadata(value) {\n        return this.setMetadata(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        output._metadata = cutils.cloneField(this._metadata, deepCopy);\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\nexport class InternalList {\n    constructor(entries, order) {\n        if (arguments.length == 0){\n            return;\n        }\n\n        entries = utils.object2map(entries);\n\n        let expected = Array.from(entries.keys());\n        if (order !== null) {\n            utils.checkNamesArray(order, \"'order'\", expected.length, \"the length of 'entries'\");\n            let observed = order.slice().sort();\n            expected.sort();\n\n            if (!utils.areArraysEqual(observed, expected)) {\n                throw new Error(\"values of 'order' should be the same as the keys of 'entries'\");\n            }\n        } else {\n            order = expected;\n        }\n\n        this._entries = entries;\n        this._order = order;\n    }\n\n    static className = \"InternalList\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    names() {\n        return this._order;\n    }\n\n    numberOfEntries() {\n        return this._order.length;\n    }\n\n    #check_entry_index(i) {\n        if (i < 0 || i >= this._order.length) {\n            throw new Error(\" index '\" + String(i) + \"' out of range for this \" + this.constructor.className);\n        }\n    }\n\n    entry(i) {\n        if (typeof i == \"string\") {\n            if (!this._entries.has(i)) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            return this._entries.get(i);\n        } else {\n            this.#check_entry_index(i);\n            return this._entries.get(this._order[i]);\n        }\n    }\n\n    has(name) {\n        return this._entries.has(name);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n    \n    delete(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copies so that we can do our setting.\n            target._order = target._order.slice();\n            target._entries = new Map(target._entries); \n        }\n\n        if (typeof i == \"string\") {\n            let ii = target._order.indexOf(i);\n            if (ii < 0) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            target._order.splice(ii, 1); \n            target._entries.delete(i);\n        } else {\n            this.#check_entry_index(i);\n            let n = target._order[i];\n            target._order.splice(i, 1);\n            target._entries.delete(n);\n        }\n\n        return target;\n    }\n\n    set(i, value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copy so that we can do our setting.\n            target._entries = new Map(target._entries);\n        }\n\n        if (typeof i == \"string\") {\n            if (!target._entries.has(i)) {\n                if (!inPlace) {\n                    target._order = target._order.slice();\n                }\n                target._order.push(i);\n            }\n            target._entries.set(i, value);\n        } else {\n            this.#check_entry_index(i);\n            target._entries.set(target._order[i], value);\n        }\n\n        return target;\n    }\n\n    setNames(names, { inPlace = false } = {}) {\n        utils.checkNamesArray(names, \"replacement 'names'\", this._order.length, \"length of 'names()'\");\n\n        let new_entries = new Map;\n        for (var i = 0; i < names.length; i++) {\n            if (new_entries.has(names[i])) {\n                throw new Error(\"detected duplicate value '\" + names[i] + \"' in replacement 'names'\");\n            }\n            new_entries.set(names[i], this._entries.get(this._order[i]));\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = names;\n        return target;\n    }\n\n    slice(indices, { inPlace = false } = {}) {\n        let new_entries = new Map;\n        let new_order = [];\n\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (new_entries.has(ii)) {\n                throw new Error(\"duplicate entries detected in slice request\");\n            } else if (!this._entries.has(ii)) {\n                throw new Error(\"slice contains missing entry '\" + ii + \"' \");\n            }\n\n            new_entries.set(ii, this._entries.get(ii));\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = new_order;\n        return target;\n    }\n\n    reorder(indices, { inPlace = false } = {}) {\n        // Reorder can be slightly more efficient than slice because we just\n        // need to change the ordering vector rather than creating a new Map.\n        if (indices.length !== this._order.length) {\n            throw utils.formatLengthError(\"reordered indices\", \"the number of existing entries\");\n        }\n\n        let new_order = [];\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (!this._entries.has(ii)) {\n                throw new Error(\"missing entry '\" + ii + \"' among the reordered indices\");\n            }\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._order = new_order;\n        return target;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._entries = (deepCopy ? generics.CLONE(this._entries) : this._entries);\n        output._order = (deepCopy ? generics.CLONE(this._order) : this._order);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    apply(FUN, { inPlace = false } = {}) {\n        let new_entries = (inPlace ? this._entries : new Map);\n        for (const [k, v] of this._entries) {\n            new_entries.set(k, FUN(v));\n        }\n        return (inPlace ? this : new InternalList(new_entries, this._order));\n    }\n\n    static parallelCombine(objects, combiner) {\n        let first_order = objects[0]._order;\n        for (var i = 1; i < objects.length; i++) {\n            if (!utils.areArraysEqual(first_order, objects[i]._order)) {\n                throw new Error(\"detected differences in names between first object and object \" + String(i) + \" to be combined\");\n            }\n        }\n\n        let new_entries = new Map;\n        for (const k of first_order) {\n            let found = objects.map(x => x._entries.get(k));\n            new_entries.set(k, combiner(found));\n        }\n\n        return new InternalList(new_entries, first_order);\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A DataFrame is a collection of equilength vector-like objects as \"columns\".\n * The number of rows in the DataFrame is equal to the length of the columns, where the i-th row consists of the i-th element from each column.\n *\n * This class supports optional row names, which are either `null` or an array of strings of length equal to the number of rows.\n *\n * This class supports empty instances with a non-zero number of rows, which may be useful for piece-wise construction.\n *\n * The vector-like object for each column is expected to have methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * The DataFrame itself defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @augments Annotated\n */\nexport class DataFrame extends ann.Annotated {\n    /**\n     * @param {Object|Map} columns - Object or Map where keys are the column names and the values are equilength vector-like objects.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?number} [options.numberOfRows=null] - Non-negative value specifying the number of rows in the DataFrame.\n     * If `null`, this is automatically determined from the length of the vectors in `columns`, or from the length of `rowNames`.\n     * If non-`null`, this should not conflict with the inferred lengths from `columns` or `rowNames`.\n     * @param {?Array} [options.rowNames=null] - Array of strings containing the names for each row.\n     * If non-`null`, this should have the same length as the vectors inside `columns`, if any exist.\n     * If `null`, no row names are used.\n     * @param {?Array} [options.columnOrder=null] - Array of strings specifying the ordering of the columns.\n     * If non-`null`, this should have the same values as the keys of `columns`.\n     * If `null`, an arbitrary ordering is obtained from `columns`.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(columns, { numberOfRows = null, rowNames = null, columnOrder = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n        this._numberOfRows = numberOfRows;\n        this._rowNames = rowNames;\n        \n        try {\n            this._columns = new il.InternalList(columns, columnOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize columns for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n\n        for (const k of this._columns.names()) {\n            let n = generics.LENGTH(this._columns.entry(k));\n            if (this._numberOfRows == null) {\n                this._numberOfRows = n;\n            } else if (n != this._numberOfRows) {\n                throw new Error(\"expected all arrays in 'columns' to have equal length\");\n            }\n        }\n\n        if (rowNames != null) {\n            if (this._numberOfRows == null) {\n                this._numberOfRows = rowNames.length;\n            }\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._numberOfRows, \"'numberOfRows' or the length of arrays in 'columns'\");\n        }\n\n        if (this._numberOfRows == null) {\n            this._numberOfRows = 0;\n        }\n    }\n\n    static className = \"DataFrame\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the column names in the specified order.\n     */\n    columnNames() {\n        return this._columns.names();\n    }\n\n    /**\n     * @param {string} name - Name of a column.\n     * @return {boolean} Whether the column exists in this DataFrame.\n     */\n    hasColumn(name) {\n        return this._columns.has(name);\n    }\n\n    /**\n     * @return {number} Number of rows in this DataFrame.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns in this DataFrame.\n     */\n    numberOfColumns() {\n        return this._columns.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Column to retrieve, either by name or index.\n     * @return {*} The contents of column `i` as a vector-like object.\n     */\n    column(i) {\n        return this._columns.entry(i);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     * \n     * @return {DataFrame} The DataFrame after removing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeColumn(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.delete(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @return {DataFrame} A reference to this DataFrame after removing the specified column.\n     */\n    $removeColumn(i) {\n        return this.removeColumn(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame after adding/replacing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, value, { inPlace = false } = {}) {\n        if (generics.LENGTH(value) != this._numberOfRows) {\n            throw new Error(\"expected 'value' to have the same length as the number of rows in 'x'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     *\n     * @return {DataFrame} A reference to this DataFrame after adding/replacing the specified column.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = target._columns.setNames(names, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @return {DataFrame} A reference to this DataFrame with modified column names.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names != null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this._numberOfRows, \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @return {DataFrame} A reference to this DataFrame with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceColumns(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.slice(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $sliceColumns(i) {\n        return this.sliceColumns(i, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        let options = { allowView };\n\n        let new_columns = this._columns.apply(v => generics.SLICE(v, i, options));\n        let new_rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, i, options));\n\n        let new_numberOfRows;\n        if (i.constructor == Object) {\n            new_numberOfRows = i.end - i.start;\n        } else {\n            new_numberOfRows = i.length;\n        }\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return; \n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let new_columns = il.InternalList.parallelCombine(objects.map(x => x._columns), generics.COMBINE);\n\n        let all_n = [];\n        let all_l = [];\n        for (const yi of objects) {\n            all_n.push(yi.rowNames());\n            all_l.push(yi.numberOfRows());\n        }\n\n        let new_numberOfRows = utils.sum(all_l);\n        let new_rowNames = utils.combineNames(all_n, all_l, new_numberOfRows);\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._columns = cutils.cloneField(this._columns, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n        output._numberOfRows = this._numberOfRows;\n        return;\n    }\n};\n\n/**\n * Flexibly combine multiple DataFrames by row by filling in missing columns with an array of `null`s.\n * This is equivalent to calling {@linkcode COMBINE} on an array of DataFrames that may have mismatching columns.\n *\n * @param {Array} objects - Array of {@linkplain DataFrame}s to be combined.\n *\n * @return {DataFrame} The combined DataFrame, where the number of rows is equal to sum of rows across `objects`,\n * and the columns is equal to the union of columns across `objects`.\n */\nexport function flexibleCombineRows(objects) {\n    let ckeys = new Set();\n    let corder = [];\n    for (const current of objects) {\n        let cnames = current.columnNames();\n        for (const a of cnames) {\n            if (!ckeys.has(a)) {\n                ckeys.add(a);\n                corder.push(a);\n            }\n        }\n    }\n\n    let copies = [];\n    for (const current of objects) {\n        let dummy = new Array(current.numberOfRows());\n        dummy.fill(null);\n        let copy = generics.CLONE(current, { deepCopy: false });\n\n        for (const a of corder) {\n            if (!current.hasColumn(a)) {\n                copy.$setColumn(a, dummy);\n            }\n        }\n\n        copy._columns = copy._columns.reorder(corder);\n        copies.push(copy);\n    }\n\n    return generics.COMBINE(copies);\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as ann from \"./Annotated.js\";\n\nfunction verifyElementMetadata(elementMetadata, numExpected, className) {\n    if (elementMetadata !== null) {\n        if (!(elementMetadata instanceof df.DataFrame)) {\n            throw new Error(\"'elementMetadata' should be a DataFrame\");\n        }\n        if (generics.LENGTH(elementMetadata) !== numExpected) {\n            throw new Error(\"'elementMetadata' should have the same number of rows as 'LENGTH(<\" + className + \">)'\");\n        }\n    } else {\n        elementMetadata = new df.DataFrame({}, { numberOfRows: numExpected });\n    }\n    return elementMetadata;\n}\n\n/**\n * The Vector class implements a store for arbitrary per-element metadata and per-element names.\n * It is intended as a base class for other structures that have a concept of \"vector-ness\".\n * It should not be constructed directly.\n *\n * @augments Annotated\n */\nexport class Vector extends ann.Annotated {\n    /**\n     * @param {number} length - Number of elements in this vector-like object.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-element annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(length, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        this._elementMetadata = verifyElementMetadata(elementMetadata, length, this.constructor.className);\n\n        if (names !== null) {\n            utils.checkNamesArray(names, \"'names'\", length, \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        }\n        this._names = names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {DataFrame} A {@linkplain DataFrame} with one row corresponding to each vector element, containing arbitrary per-element metadata.\n     */\n    elementMetadata() {\n        return this._elementMetadata;\n    }\n\n    /**\n     * @return {?Array} Array of strings containing the name of each range, or `null` if no names are available.\n     */\n    names() {\n        return this._names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the element metadata to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setElementMetadata(elementMetadata, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._elementMetadata = verifyElementMetadata(elementMetadata, generics.LENGTH(target), target.constructor.className);\n        return target;\n    }\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setElementMetadata(elementMetadata) {\n        return this.setElementMetadata(elementMetadata, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the names to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", generics.LENGTH(this), \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        } \n        let target = cutils.setterTarget(this, inPlace);\n        target._names = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setNames(names) {\n        return this.setNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        output._elementMetadata = generics.SLICE(this._elementMetadata, i, { allowView });\n        output._names = (this._names === null ? null : generics.SLICE(this._names, i, { allowView }));\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let all_em = [];\n        let all_n = [];\n        let all_l = [];\n\n        for (const x of objects) {\n            all_em.push(x._elementMetadata);\n            all_n.push(x._names);\n            all_l.push(generics.LENGTH(x));\n        }\n\n        output._elementMetadata = generics.COMBINE(all_em);\n        output._names = utils.combineNames(all_n, all_l);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._elementMetadata = cutils.cloneField(this._elementMetadata, deepCopy);\n        output._names = cutils.cloneField(this._names, deepCopy);\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\n\nexport function convertPositionToRank(start, end, { slice = null } = {}) {\n    let n = (slice == null ? start.length : slice.length);\n\n    let positions = new Int32Array(n * 2);\n    let add = new Uint8Array(n * 2);\n    let index = new Int32Array(n * 2);\n\n    {\n        let counter = 0;\n        let fillIndex = i => {\n            let at = counter * 2;\n            let next = at + 1;\n            positions[at] = start[i];\n            positions[next] = end[i];\n            add[at] = 1;\n            add[next] = 0;\n            index[at] = counter;\n            index[next] = counter;\n            counter++;\n        };\n\n        if (slice === null) {\n            for (var i = 0; i < n; i++) {\n                fillIndex(i);                                \n            }\n        } else {\n            for (const i of slice) {\n                fillIndex(i);\n            }\n        }\n    }\n\n    let order = utils.createSequence(positions.length);\n    order.sort((i, j) => positions[i] - positions[j]);\n\n    let rank2position = [];\n    let new_starts = new Int32Array(n);\n    let new_ends = new Int32Array(n);\n\n    let last = null;\n    for (const i of order) {\n        let pos = positions[i];\n        let idx = index[i];\n\n        if (pos !== last) {\n            rank2position.push(pos);\n            last = pos;\n        }\n\n        if (add[i]) {\n            new_starts[idx] = rank2position.length - 1;\n        } else {\n            new_ends[idx] = rank2position.length - 1;\n        }\n    }\n\n    return { rank2position, startRanks: new_starts, endRanks: new_ends };\n}\n\nexport function buildIntervalTree(start, end, { slice = null } = {}) {\n    let { rank2position, startRanks, endRanks } = convertPositionToRank(start, end, { slice });\n\n    // Now, building an nicely balanced interval tree based on the ranks.\n    let tree = [ create_node(0, rank2position.length) ];\n    if (slice === null) {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], i, tree, 0);\n        }\n    } else {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], slice[i], tree, 0);\n        }\n    }\n\n    // Running a clean-up operation to convert ranks back to positions.\n    let one_past_the_end = (rank2position.length > 0 ? rank2position[rank2position.length - 1] + 1 : 1);\n    rank2position.push(one_past_the_end);\n\n    for (const x of tree) {\n        x.left_bound = rank2position[x.left_bound];\n        x.right_bound = rank2position[x.right_bound];\n        x.center = rank2position[x.center];\n\n        // Also sorting ranges by increasing start and DECREASING end positions.\n        let start_overlaps_sorted = x.overlaps.slice().sort((a, b) => start[a] - start[b]);\n        let end_overlaps_sorted = x.overlaps.sort((a, b) => end[b] - end[a]) // reversed order - deliberate!\n        x.overlaps = {\n            start: start_overlaps_sorted.map(i => [start[i], i]),\n            end: end_overlaps_sorted.map(i => [end[i], i])\n        };\n    }\n\n    return tree;\n}\n\nfunction create_node(left_bound, right_bound) {\n    return { \n        left_bound: left_bound,\n        right_bound: right_bound,\n        center: left_bound + Math.floor((right_bound - left_bound) / 2),\n        left_node: null,\n        right_node: null,\n        overlaps: []\n    };\n}\n\nfunction recursive_build_tree(start, end, index, tree, node) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        if (current.right_node === null) {\n            current.right_node = tree.length;\n            tree.push(create_node(current.center, current.right_bound));\n        }\n        recursive_build_tree(start, end, index, tree, current.right_node);\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Let 0-length ranges fall through to the next clause if they lie exactly on the center.\n        if (current.left_node === null) {\n            current.left_node = tree.length;\n            tree.push(create_node(current.left_bound, current.center));\n        }\n        recursive_build_tree(start, end, index, tree, current.left_node);\n\n    } else {\n        // At some point, every range ends up here. This is because left_bound\n        // == center upon successive halving to create new nodes, so every\n        // range will eventually overlap a center at its own start position.\n        current.overlaps.push(index);\n    }\n}\n\nexport function queryIntervalTree(start, end, tree) {\n    let results = [];\n    if (start > tree.right_bound) {\n        return results;\n    }\n\n    if (end < tree.left_bound || (end == tree.left_bound && end > start)) { // Still allow 0-length ranges to fall through for search.\n        return results;\n    }\n\n    recursive_query_tree(start, end, tree, 0, results); \n    return results;\n}\n\nfunction recursive_query_tree(start, end, tree, node, results) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        for (const overlap of current.overlaps.end) {\n            if (overlap[0] > start) {\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.right_node !== null) {\n            recursive_query_tree(start, end, tree, current.right_node, results);\n        }\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Again, let zero-length ranges fall through if they lie directly on the center.\n        for (const overlap of current.overlaps.start) {\n            if (overlap[0] < end || (overlap[0] == end && start == end)) { // handle zero-length ranges directly on the start position of the center-overlapping range.\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.left_node !== null) {\n            recursive_query_tree(start, end, tree, current.left_node, results);\n        }\n\n    } else {\n        for (const overlap of current.overlaps.start) {\n            results.push(overlap[1]);\n        }\n\n        if (end > current.center) {\n            if (current.right_node !== null) {\n                recursive_query_tree(start, end, tree, current.right_node, results);\n            }\n        }\n        if (start < current.center) {\n            if (current.left_node !== null) {\n                recursive_query_tree(start, end, tree, current.left_node, results);\n            }\n        }\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * An IRanges object is a collection of integer ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a start position and a width, and may be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The IRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class IRanges extends vec.Vector {\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} start - Array of start positions for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Array|TypedArray} width - Array of widths for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(start, width, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(start.length, { names, elementMetadata, metadata });\n\n        this._start = utils.convertToInt32Array(start);\n        utils.checkNonNegative(this._start, \"start\");\n\n        this._width = utils.convertToInt32Array(width);\n        utils.checkNonNegative(this._width, \"width\");\n\n        let n = this._start.length;\n        if (n !== this._width.length) {\n            throw new Error(\"'start' and 'width' should have the same length\");\n        }\n    }\n\n    static className = \"IRanges\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each range.\n     */\n    start() {\n        return this._start;\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each range.\n     */\n    end() {\n        return this._start.map((x, i) => x + this._width[i]);\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each range.\n     */\n    width() {\n        return this._width;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the start positions to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStart(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'start' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"start\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._start = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the start positions to `value`.\n     */\n    $setStart(value) {\n        return this.setStart(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the widths to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setWidth(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'width' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"width\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._width = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the widths to `value`.\n     */\n    $setWidth(value) {\n        return this.setWidth(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain IRanges} instances.\n     */\n    buildOverlapIndex() {\n        let tree = olap.buildIntervalTree(this._start, this.end());\n        return new IRangesOverlapIndex(tree);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._start.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._start = generics.SLICE(this._start, i, { allowView });\n        output._width = generics.SLICE(this._width, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_s = [];\n        let all_w = [];\n        for (const x of objects) {\n            all_s.push(x._start);\n            all_w.push(x._width);\n        }\n\n        output._start = generics.COMBINE(all_s);\n        output._width = generics.COMBINE(all_w);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._start = cutils.cloneField(this._start, deepCopy);\n        output._width = cutils.cloneField(this._width, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRanges} A zero-length IRanges object.\n     */\n    static empty() {\n        return new IRanges(new Int32Array, new Int32Array);\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain IRanges} objects.\n * This is typically constructed using the {@linkcode IRanges#buildOverlapIndex IRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query IRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class IRangesOverlapIndex {\n    constructor(tree) {\n        this._tree = tree;\n    }\n\n    /**\n     * @param {IRanges} query - The query object, containing ranges to be overlapped with those in the reference IRanges (that was used to construct this IRangesOverlapIndex object).\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain IRanges} object.\n     */\n    overlap(query) {\n        let n = generics.LENGTH(query);\n        let output = new Array(n);\n        for (var i = 0; i < n; i++) {\n            output[i] = olap.queryIntervalTree(query._start[i], query._start[i] + query._width[i], this._tree);\n        }\n        return output;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ir from \"./IRanges.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * A GRanges object is a collection of genomic ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a sequence name, a start position on that sequence, and a width.\n * Each range may also be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The GRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class GRanges extends vec.Vector {\n    static #convertToInt8Array(x) {\n        if (x instanceof Int8Array) {\n            return x;\n        } else {\n            return new Int8Array(x);\n        }\n    }\n\n    static #checkStrandedness(strand) {\n        for (const y of strand) {\n            if (y < -1 || y > 1) {\n                throw new Error(\"'strand' must be -1, 0 or 1\");\n            }\n        }\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {IRanges} ranges - Position and width of the range on its specified sequence.\n     * This should have the same length as `seqnames`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.strand=null] - Array containing the strandedness of each genomic range.\n     * This should be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * If `null`, this is assumed to be 0 for all genomic ranges.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(seqnames, ranges, { strand = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(seqnames.length, { names, elementMetadata, metadata });\n\n        utils.checkStringArray(seqnames, \"seqnames\");\n        this._seqnames = seqnames;\n\n        let n = seqnames.length;\n        if (n !== generics.LENGTH(ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"'seqnames'\");\n        }\n        this._ranges = ranges;\n\n        if (strand !== null) {\n            if (n !== strand.length) {\n                throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n            }\n            strand = GRanges.#convertToInt8Array(strand);\n            GRanges.#checkStrandedness(strand);\n        } else {\n            strand = new Int8Array(n);\n            strand.fill(0);\n        }\n        this._strand = strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each genomic range.\n     */\n    start() {\n        return this._ranges.start();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each genomic range.\n     */\n    end() {\n        return this._ranges.end();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each genomic range.\n     */\n    width() {\n        return this._ranges.width();\n    }\n\n    /**\n     * @return {Array} Array of strings containing the sequence name for each genomic range.\n     */\n    seqnames() {\n        return this._seqnames;\n    }\n\n    /**\n     * @return {IRanges} Start positions and widths for all ranges on their specified sequence names.\n     */\n    ranges() {\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int8Array} Array containing the strandedness for each genomic range - 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     */\n    strand() {\n        return this._strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the sequence names to `seqnames`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setSeqnames(seqnames, { inPlace = false } = {}) {\n        utils.checkNamesArray(seqnames, \"replacement 'seqnames'\", generics.LENGTH(this), \"'LENGTH(<GRanges>)'\");\n        let target = cutils.setterTarget(this, inPlace); \n        target._seqnames = seqnames;\n        return target;\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @return {GRanges} A reference to this GRanges object after setting the sequence names to `seqnames`.\n     */\n    $setSeqnames(seqnames) {\n        return this.setSeqnames(seqnames, { inPlace: true });\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the ranges to `ranges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof ir.IRanges)) {\n            throw new Error(\"'ranges' should be an IRanges object\");\n        }\n\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"replacement 'ranges'\", \"'LENGTH(<GRanges>)'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @return {GRanges} A reference to this GRanges object after setting the ranges to `ranges`.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the strands to `strand`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStrand(strand, { inPlace = false } = {}) {\n        if (this._strand.length !== strand.length) {\n            throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n        }\n        strand = GRanges.#convertToInt8Array(strand);\n        GRanges.#checkStrandedness(strand);\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._strand = strand;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     *\n     * @return {GRanges} A reference to this GRanges object after setting the strands to `strand`.\n     */\n    $setStrand(strand) {\n        return this.setStrand(strand, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        let indices = utils.createSequence(generics.LENGTH(this));\n        let by_seqname = generics.SPLIT(indices, this._seqnames);\n        let starts = this.start();\n        let ends = this.end();\n\n        if (restrictToSeqnames !== null && restrictToSeqnames instanceof Array) {\n            restrictToSeqnames = new Set(restrictToSeqnames);\n        }\n        if (restrictToStrand !== null && restrictToStrand instanceof Array) {\n            restrictToStrand = new Set(restrictToStrand);\n        }\n\n        for (const name of Object.keys(by_seqname)) {\n            if (restrictToSeqnames !== null && !restrictToSeqnames.has(name)) {\n                delete by_seqname[name];\n                continue;\n            }\n            let seqname_indices = by_seqname[name];\n            let seqname_strand = generics.SLICE(this._strand, seqname_indices);\n            let by_strand = generics.SPLIT(seqname_indices, seqname_strand);\n\n            for (const str of Object.keys(by_strand)) {\n                if (restrictToStrand !== null && !restrictToStrand.has(Number(str))) {\n                    delete by_strand[str];\n                    continue;\n                }\n                let str_indices = by_strand[str];\n                by_strand[str] = olap.buildIntervalTree(starts, ends, { slice: str_indices });\n            }\n            by_seqname[name] = by_strand;\n        }\n\n        return new GRangesOverlapIndex(by_seqname);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._seqnames.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._seqnames = generics.SLICE(this._seqnames, i, { allowView });\n        output._ranges = generics.SLICE(this._ranges, i, { allowView });\n        output._strand = generics.SLICE(this._strand, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_sn = [];\n        let all_rr = [];\n        let all_st = [];\n        for (const x of objects) {\n            all_sn.push(x._seqnames);\n            all_rr.push(x._ranges);\n            all_st.push(x._strand);\n        }\n\n        output._seqnames = generics.COMBINE(all_sn);\n        output._ranges = generics.COMBINE(all_rr);\n        output._strand = generics.COMBINE(all_st);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._seqnames = cutils.cloneField(this._seqnames, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n        output._strand = cutils.cloneField(this._strand, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} A zero-length GRanges object.\n     */\n    static empty() {\n        return new GRanges([], ir.IRanges.empty());\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GRanges} objects.\n * This is typically constructed using the {@linkcode GRanges#buildOverlapIndex GRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GRangesOverlapIndex {\n    constructor(index) {\n        this._index = index;\n    }\n\n    /**\n     * @param {GRanges} query - The query object, containing ranges to be overlapped with those in the reference GRanges (that was used to construct this GRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let n = generics.LENGTH(query);\n        let results = new Array(n);\n        let starts = query.start();\n        let ends = query.end();\n\n        for (var i = 0; i < n; i++) {\n            results[i] = [];\n            let my_results = results[i];\n\n            let name = query._seqnames[i];\n            if (!(name in this._index)) {\n                continue;\n            }\n            let seq_index = this._index[name];\n\n            let strand = query._strand[i];\n            let allowed_strands;\n            if (ignoreStrand || strand == 0) {\n                allowed_strands = Object.keys(seq_index);\n            } else {\n                let sstr = String(strand);\n                if (!(sstr in seq_index)) {\n                    continue;\n                }\n                allowed_strands = [ sstr ];\n            }\n\n            let start = starts[i];\n            let end = ends[i];\n            for (const str of allowed_strands) {\n                let str_results = olap.queryIntervalTree(start, end, seq_index[str]);\n                str_results.forEach(x => my_results.push(x));\n            }\n        }\n\n        return results;\n    }\n}\n","import * as vec from \"./Vector.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\n/**\n * A GroupedGRanges object is a collection of groups of genomic ranges, inspired by the `GRangesList` class from the Bioconductor ecosystem.\n * Each group consists of a {@linkplain GRanges} object of arbitrary length, which is most often used to represent a multi-exon gene.\n * The GroupedGRanges can be considered a vector of groups, and defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Our implementation re-uses Bioconductor's strategy of storing the groups in a single concatenated GRanges.\n * This improves efficiency for large numbers of small GRanges, especially in placeholder objects where all the GRanges are zero-length.\n * \n * @extends Vector\n */\nexport class GroupedGRanges extends vec.Vector {\n    static #computeStarts(lengths) {\n        let starts = new Int32Array(lengths.length);\n        let last = 0;\n        for (var i = 0; i < lengths.length; i++) {\n            starts[i] = last;\n            last += lengths[i];\n        }\n        return { starts: starts, total: last };\n    }\n\n    #staged_setGroup = null;\n\n    /**\n     * @param {Array|GRanges} ranges - An array of {@linkplain GRanges} objects, where each element represents a group of genomic ranges.\n     * All objects should have compatible columns in their {@linkplain Vector#elementMetadata elementMetadata}.\n     * \n     * Alternatively, a single GRanges containing a concatenation of ranges from all groups.\n     * In this case, `rangeLengths` must be supplied.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(TypedArray|Array)} [options.rangeLengths=null] - Length of the ranges within each group.\n     * This should be coercible to an Int32Array, contain non-negative values, and have a sum equal to the length of `ranges`.\n     * Only used if `ranges` is a single {@linkplain GRanges} object, where each group's ranges are assumed to form contiguous intervals along `ranges`.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(ranges, { rangeLengths = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        if (ranges.constructor == Array) {\n            super(ranges.length, { names, elementMetadata, metadata });\n            rangeLengths = new Int32Array(ranges.length);\n            for (var i = 0; i < rangeLengths.length; i++) {\n                if (!(ranges[i] instanceof gr.GRanges)) {\n                    throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n                }\n                rangeLengths[i] = generics.LENGTH(ranges[i]);\n            }\n            ranges = generics.COMBINE(ranges);\n\n        } else {\n            if (!(ranges instanceof gr.GRanges)) {\n                throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n            }\n            if (rangeLengths == null) {\n                throw new Error(\"'rangeLengths' must be specified when 'ranges' is a 'GRanges'\");\n            }\n            super(rangeLengths.length, { names, elementMetadata, metadata });\n            rangeLengths = utils.convertToInt32Array(rangeLengths);\n            utils.checkNonNegative(rangeLengths);\n        }\n\n        this._ranges = ranges;\n        this._rangeLengths = rangeLengths;\n\n        let accumulated = GroupedGRanges.#computeStarts(rangeLengths);\n        this._rangeStarts = accumulated.starts;\n\n        if (accumulated.total !== generics.LENGTH(ranges)) {\n            throw new Error(\"sum of 'rangeLengths' must be equal to the length of 'ranges'\");\n        }\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} The concatenated set of ranges across all groups. \n     */\n    ranges() {\n        this.#flush_staged_setGroup();\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int32Array} The start indices for each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeStarts() {\n        this.#flush_staged_setGroup();\n        return this._rangeStarts;\n    }\n\n    /**\n     * @return {Int32Array} The length of each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeLengths() {\n        this.#flush_staged_setGroup();\n        return this._rangeLengths;\n    }\n\n    /**\n     * @param {number} i - Index of the group of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether a view can be created in any internal slicing operations.\n     *\n     * @return {GRanges} The genomic ranges for group `i`.\n     */\n    group(i, { allowView = false } = {}) {\n        this.#flush_staged_setGroup();\n        let s = this._rangeStarts[i];\n        return generics.SLICE(this._ranges, { start: s, end: s + this._rangeLengths[i] }, { allowView });\n    }\n\n    /**\n     * @return {number} Number of groups in this object.\n     */\n    numberOfGroups() {\n        return this._rangeStarts.length;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after modifying the internal ranges.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof gr.GRanges)) {\n            throw new Error(\"'ranges' must be a 'GRanges'\");\n        }\n\n        this.#flush_staged_setGroup();\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"number of ranges\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after modifying the internal ranges.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    #flush_staged_setGroup() {\n        let staged = this.#staged_setGroup;\n        if (staged === null) {\n            return;\n        }\n\n        staged.sort((a, b) => {\n            let diff = a[0] - b[0];\n            return (diff === 0 ? a[1] - b[1] : diff);\n        });\n\n        let counter = 0;\n        let accumulated = 0;\n        let last_start = 0;\n        let more_ranges = [];\n\n        let ngroups = this.numberOfGroups();\n        for (var g = 0; g < ngroups; g++) {\n            if (counter < staged.length && g == staged[counter][0]) { \n                let current_start = this._rangeStarts[g];\n                if (last_start < current_start) {\n                    more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: current_start }));\n                }\n                last_start = current_start + this._rangeLengths[g];\n\n                let replacement;\n                do {\n                    replacement = staged[counter][2];\n                    counter++;\n                } while (counter < staged.length && g == staged[counter][0]);\n\n                more_ranges.push(replacement);\n                this._rangeLengths[g] = generics.LENGTH(replacement);\n            }\n\n            this._rangeStarts[g] = accumulated;\n            accumulated += this._rangeLengths[g];\n        }\n\n        let nranges = generics.LENGTH(this._ranges);\n        if (last_start < nranges) {\n            more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: nranges }));\n        }\n\n        try {\n            this._ranges = generics.COMBINE(more_ranges);\n        } catch (e) {\n            throw new Error(\"failed to combine staged '$setGroup' operations; \" + e.message);\n        }\n\n        this.#staged_setGroup = null;\n        return;\n    }\n\n    /**\n     * Multiple consecutive calls to `$setGroup` are not executed immediately.\n     * Rather, the operations are staged and executed in batch once the modified GroupedGRanges is used in other methods.\n     * This enables efficient setting of individual groups inside a single concatenated {@linkplain GRanges}. \n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after setting group `i`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setGroup(i, ranges, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (target.#staged_setGroup === null) {\n            target.#staged_setGroup = [];\n        } else if (!inPlace) {\n            target.#staged_setGroup = target.#staged_setGroup.slice();\n        }\n\n        if (!inPlace) {\n            target._rangeStarts = target._rangeStarts.slice();\n            target._rangeLengths = target._rangeLengths.slice();\n        }\n\n        let nops = target.#staged_setGroup.length;\n        target.#staged_setGroup.push([i, nops, ranges]);\n        return target;\n    }\n\n    /**\n     * See comments for {@linkcode GroupedGRanges#$setGroup $setGroup}.\n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     *\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after setting group `i`.\n     */\n    $setGroup(i, ranges) {\n        return this.setGroup(i, ranges, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GroupedGRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        this.#flush_staged_setGroup();\n        return new GroupedGRangesOverlapIndex(\n            this._ranges.buildOverlapIndex({ restrictToSeqnames, restrictToStrand }),\n            generics.LENGTH(this._ranges),\n            this._rangeStarts,\n            this._rangeLengths\n        );\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._rangeStarts.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false } = {}) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        this.#flush_staged_setGroup();\n\n        output._rangeLengths = generics.SLICE(this._rangeLengths, i, { allowView });\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n\n        if (i.constructor == Object) {\n            // Handle this specially for optimizing allowView = true.\n            let s = this._rangeStarts[i.start];\n            output._ranges = generics.SLICE(this._ranges, { start: s, end: s + accumulated.total }, { allowView });\n        } else {\n            let keep = new Int32Array(accumulated.total);\n\n            let counter = 0;\n            for (const j of i) {\n                let start = this._rangeStarts[j];\n                let end = start + this._rangeLengths[j];\n                for (var k = start; k < end; k++) {\n                    keep[counter] = k;\n                    counter++;\n                }\n            }\n\n            output._ranges = generics.SLICE(this._ranges, keep, { allowView });\n        }\n\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        // We need to flush the staged operations in each object.\n        for (const o of objects) {\n            o.#flush_staged_setGroup();\n        }\n\n        output._rangeLengths = generics.COMBINE(objects.map(x => x.rangeLengths()));\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n        output._ranges = generics.COMBINE(objects.map(x => x._ranges));\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output.#staged_setGroup = cutils.cloneField(this.#staged_setGroup, deepCopy);\n        output._rangeLengths = cutils.cloneField(this._rangeLengths, deepCopy);\n        output._rangeStarts = cutils.cloneField(this._rangeStarts, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {number} [numberOfGroups=0] - Numbe of empty groups to create.\n     * @return {GroupedGRanges} A GroupedGRanges object of length equal to `numberOfGroups`,\n     * where each group is of zero length.\n     */\n    static empty(numberOfGroups) {\n        let runs = new Int32Array(numberOfGroups);\n        runs.fill(0);\n        return new GroupedGRanges(gr.GRanges.empty(), { rangeLengths: runs });\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GroupedGRanges} objects.\n * This is typically constructed using the {@linkcode GroupedGRanges#buildOverlapIndex GroupedGRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GroupedGRanges or {@linkplain GRanges} to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GroupedGRangesOverlapIndex {\n    constructor(index, fullLength, rangeStarts, rangeLengths) {\n        this._index = index;\n        this._rangeStarts = rangeStarts;\n        this._rangeLengths = rangeLengths;\n\n        let rev_map = new Int32Array(fullLength);\n        for (var i = 0; i < rangeStarts.length; i++) {\n            let start = rangeStarts[i];\n            let end = start + rangeLengths[i];\n            for (var s = start; s < end; s++) {\n                rev_map[s] = i;\n            }\n        }\n        this._reverseMapping = rev_map;\n    }\n\n    /**\n     * @param {GroupedGRanges|GRanges} query - The query object, containing ranges to be overlapped with those in the reference GroupedGRanges (that was used to construct this GroupedGRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges or groups in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let output = new Array(this._rangeStarts.length);\n        let rev_map = this._reverseMapping;\n\n        if (query instanceof GroupedGRanges) {\n            let overlaps = this._index.overlap(query._ranges);\n            for (var i = 0; i < query._rangeStarts.length; i++) {\n                let start = query._rangeStarts[i];\n                let end = start + query._rangeLengths[i];\n\n                let results = new Set;\n                for (var s = start; s < end; s++) {\n                    overlaps[s].forEach(x => results.add(rev_map[x]));\n                }\n                output[i] = Array.from(results);\n            }\n\n        } else {\n            let overlaps = this._index.overlap(query);\n            for (var i = 0; i < overlaps.length; i++) {\n                let results = new Set;\n                overlaps[i].forEach(x => results.add(rev_map[x]));\n                output[i] = Array.from(results);\n            }\n        }\n\n        return output;\n    }\n\n}\n","import * as cutils from \"./clone-utils.js\";\n\n/**\n * Dense matrix of numbers.\n * Not really a Bioconductor-exclusive data structure, but we need this at a minimum for the {@linkplain SummarizedExperiment} to be useful.\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n */\nexport class DenseMatrix {\n    /**\n     * @param {number} numberOfRows - Number of rows, duh.\n     * @param {number} numberOfColumns - Number of columns.\n     * @param {TypedArray} values - 1-dimensional array of the matrix contents.\n     * This should have length equal to the product of `numberOfRows` and `numberOfColumns`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.columnMajor=true] - Whether `values` represents a column-major layout.\n     */\n    constructor(numberOfRows, numberOfColumns, values, { columnMajor = true } = {}) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._numberOfRows = numberOfRows;\n        this._numberOfColumns = numberOfColumns;\n        this._values = values;\n        this._columnMajor = columnMajor;\n        if (numberOfRows * numberOfColumns != values.length) {\n            throw new Error(\"length of 'values' should be equal to the product of 'dimensions'\");\n        }\n    }\n\n    static name = \"DenseMatrix\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {number} Number of rows.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns.\n     */\n    numberOfColumns() {\n        return this._numberOfColumns;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is column-major.\n     */\n    isColumnMajor() {\n        return this._columnMajor;\n    }\n\n    /**\n     * @return {TypedArray} Matrix contents as a 1-dimensional array.\n     */\n    values() {\n        return this._values;\n    }\n\n    #extractor(i, nprimary, nsecondary, allowView, primaryMajor) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                output[s] = this._values[offset];\n                offset += nprimary;\n            }\n            return output;\n\n        } else {\n            let start = i * nsecondary;\n            let end = start + nsecondary;\n            if (allowView) {\n                return this._values.subarray(start, end);\n            } else {\n                return this._values.slice(start, end);\n            }\n        }\n    }\n\n    /**\n     * Retrieve the contents of a particular row.\n     *\n     * @param {number} i - Index of the row of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the row `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    row(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfRows, this._numberOfColumns, allowView, !this._columnMajor);\n    }\n\n    /**\n     * Retrieve the contents of a particular column.\n     *\n     * @param {number} i - Index of the column of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the column `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    column(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfColumns, this._numberOfRows, allowView, this._columnMajor);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setValues(values, { inPlace = false } = {}) {\n        if (values.length !== this._values.length) {\n            throw new Error(\"replacement 'values' should have length equal to 'values()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._values = values;\n        return target;\n    }\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setValues(values) {\n        return this.setValues(values, { inPlace: true });\n    }\n\n    #inserter(i, nprimary, nsecondary, primaryMajor, replacement) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                this._values[offset] = replacement[s];\n                offset += nprimary;\n            }\n        } else {\n            let start = i * nsecondary;\n            this._values.set(replacement, start);\n        }\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRow(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfColumns) {\n            throw new Error(\"replacement row should have length equal to 'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfRows, target._numberOfColumns, !target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setRow(i, value) {\n        return this.setRow(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of rows in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfRows) {\n            throw new Error(\"replacement column should have length equal to 'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfColumns, target._numberOfRows, target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, {}) {\n        let full_rows = (rows === null);\n        let is_row_range = (!full_rows && rows.constructor == Object);\n        let new_rows = full_rows ? this._numberOfRows : (is_row_range ? rows.end - rows.start : rows.length);\n        output._numberOfRows = new_rows;\n\n        let full_columns = (columns === null);\n        let is_column_range = (!full_columns && columns.constructor == Object);\n        let new_columns = full_columns ? this._numberOfColumns : (is_column_range ? columns.end - columns.start : columns.length);\n        output._numberOfColumns = new_columns;\n\n        let new_values = new this._values.constructor(new_rows * new_columns);\n        output._values = new_values;\n\n        if (this._columnMajor) {\n            this.#primarySlicer(columns, full_columns, is_column_range, this._numberOfColumns, rows, full_rows, is_row_range, this._numberOfRows, new_rows, new_values);\n        } else {\n            this.#primarySlicer(rows, full_rows, is_row_range, this._numberOfRows, columns, full_columns, is_column_range, this._numberOfColumns, new_columns, new_values);\n        }\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n\n    #primarySlicer(primarySlice, fullPrimary, isPrimaryRange, primaryDim, secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues) {\n        if (fullPrimary) {\n            for (var p = 0; p < primaryDim; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p);\n            }\n        } else if (isPrimaryRange) {\n            for (var p = primarySlice.start; p < primarySlice.end; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p - primarySlice.start);\n            }\n        } else {\n            for (var pi = 0; pi < primarySlice.length; pi++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, primarySlice[pi], pi);\n            }\n        }\n    }\n\n    #secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, inPrimary, outPrimary) {\n        let in_offset = inPrimary * inSecondaryDim;\n        let out_offset = outPrimary * outSecondaryDim;\n\n        if (fullSecondary) {\n            let view = this._values.subarray(in_offset, in_offset + inSecondaryDim);\n            outputValues.set(view, out_offset);\n        } else if (isSecondaryRange) {\n            for (var s = secondarySlice.start; s < secondarySlice.end; s++) {\n                outputValues[out_offset + s - secondarySlice.start] = this._values[in_offset + s];\n            }\n        } else {\n            for (var si = 0; si < secondarySlice.length; si++) {\n                outputValues[out_offset + si] = this._values[in_offset + secondarySlice[si]];\n            }\n        }\n    }\n\n    _combiner(objects, primaryFun, secondaryFun, isPrimaryMajor, secondaryName) {\n        let num_primary = primaryFun(objects[0]);\n        let num_secondary = secondaryFun(objects[0]);\n        for (var i = 1; i < objects.length; i++) {\n            if (secondaryFun(objects[i]) !== num_secondary) {\n                throw new Error(\"all objects must have the same number of \" + secondaryName);\n            }\n            num_primary += primaryFun(objects[i]);\n        }\n\n        let primary_major = isPrimaryMajor(objects[0]);\n        let values = new objects[0]._values.constructor(num_primary * num_secondary);\n\n        if (primary_major) {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n                let out_offset = used_primary * num_secondary;\n\n                if (isPrimaryMajor(current)) {\n                    values.set(current._values, out_offset);\n                } else {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let in_offset = s * cur_primary;\n                        let out_offset2 = out_offset + s;\n                        for (var p = 0; p < cur_primary; p++) {\n                            values[out_offset2 + p * num_secondary] = current._values[in_offset + p];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        } else {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n\n                if (!isPrimaryMajor(current)) {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let view_offset = s * cur_primary;\n                        let view = current._values.subarray(view_offset, view_offset + cur_primary);\n                        values.set(view, used_primary + s * num_primary);\n                    }\n                } else {\n                    for (var p = 0; p < cur_primary; p++) {\n                        let in_offset = p * num_secondary;\n                        let out_offset = used_primary + p;\n                        for (var s = 0; s < num_secondary; s++) {\n                            values[out_offset + s * num_primary] = current._values[in_offset + s];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        }\n\n        return { num_primary, num_secondary, values, primary_major };\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfRows,\n            x => x._numberOfColumns,\n            x => !(x._columnMajor),\n            \"columns\"\n        );\n\n        output._numberOfRows = combined.num_primary;\n        output._numberOfColumns = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = !(combined.primary_major);\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfColumns,\n            x => x._numberOfRows,\n            x => x._columnMajor,\n            \"rows\"\n        );\n\n        output._numberOfColumns = combined.num_primary;\n        output._numberOfRows = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = combined.primary_major;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._values = (deepCopy ? this._values.slice() : this._values);\n        output._numberOfRows = this._numberOfRows;\n        output._numberOfColumns = this._numberOfColumns;\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n}\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import * as generics from \"./AllGenerics.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SummarizedExperiment contains zero or more assays, consisting of multi-dimensional arrays (usually matrices) of experimental data,\n * as well as {@linkplain DataFrame}s containing further annotations on the rows or columns of those arrays.\n * The SummarizedExperiment class defines methods for the following generics:\n * \n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * Assays are expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * @extends Annotated\n */\nexport class SummarizedExperiment extends ann.Annotated {\n    /**\n     * @param {Object|Map} assays - Object or Map where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.assayOrder=null] - Array of strings specifying the ordering of the assays.\n     * If non-`null`, this should have the same values as the keys of `assays`.\n     * If `null`, an arbitrary ordering is obtained from `assays`.\n     * @param {?DataFrame} [options.rowData=null] - Data frame of row annotations.\n     * If non-`null`, this should have a number of rows equal to the number of rows in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?DataFrame} [options.columnData=null] - Data frame of column annotations.\n     * If non-`null`, this should have a number of columns equal to the number of columns in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?Array} [options.rowNames=null] - Array of strings of length equal to the number of rows in the `assays`, containing row names.\n     * Alternatively `null`, if no row names are present.\n     * @param {?Array} [options.columnNames=null] - Array of strings of length equal to the number of columns in the `assays`, containing column names.\n     * Alternatively `null`, if no column names are present.\n     * @param {Object|Map} [options.metadata={}] - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(assays, { assayOrder = null, rowData = null, columnData = null, rowNames = null, columnNames = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        // Check the assays.\n        try {\n            this._assays = new il.InternalList(assays, assayOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize assay list for this SummarizedExperiment; \" + e.message, { cause: e });\n        }\n\n        let nrows = null;\n        let ncols = null;\n        for (const k of this._assays.names()) {\n            let current = this._assays.entry(k);\n            let nr = generics.NUMBER_OF_ROWS(current);\n            let nc = generics.NUMBER_OF_COLUMNS(current);\n            if (nrows == null) {\n                nrows = nr;\n                ncols = nc;\n            } else if (nrows !== nr || ncols !== nc) {\n                throw new Error(\"expected all assays in 'assays' to have the same number of rows and columns\");\n            }\n        }\n\n        // Check the rowData.\n        if (rowData === null) {\n            if (nrows == null){\n                throw new Error(\"'rowData' must be specified if 'assays' is empty\");\n            }\n            rowData = new df.DataFrame({}, { numberOfRows: nrows });\n        } else {\n            if (nrows !== null && nrows !== generics.LENGTH(rowData)) {\n                throw new Error(\"'rowData' should be equal to the number of rows in each 'assays'\");\n            }\n        }\n        this._rowData = rowData;\n\n        // Check the columnData.\n        if (columnData === null) {\n            if (ncols == null){\n                throw new Error(\"'columnData' must be specified if 'assays' is empty\");\n            }\n            columnData = new df.DataFrame({}, { numberOfRows: ncols });\n        } else {\n            if (ncols !== null && ncols !== generics.LENGTH(columnData)) {\n                throw new Error(\"'columnData' should be equal to the number of columns in each 'assays'\");\n            }\n        }\n        this._columnData = columnData;\n\n        // Checking the names.\n        if (rowNames != null) {\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._rowData.numberOfRows(), \"the number of rows in each 'assays'\");\n        }\n        this._rowNames = rowNames;\n\n        if (columnNames != null) {\n            utils.checkNamesArray(columnNames, \"'columnNames'\", this._columnData.numberOfRows(), \"the number of columns in each 'assays'\");\n        }\n        this._columnNames = columnNames;\n    }\n\n    static className = \"SummarizedExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of assay names.\n     */\n    assayNames() {\n        return this._assays.names();\n    }\n\n    /**\n     * @return {number} Number of assays.\n     */\n    numberOfAssays() {\n        return this._assays.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Assay to retrieve, either by name or index.\n     * @return {*} The contents of assay `i` as an multi-dimensional array-like object.\n     */\n    assay(i) {\n        let output;\n        try {\n            output = this._assays.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified assay from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of row data, with one row per row in this SummarizedExperiment.\n     */\n    rowData() {\n        return this._rowData;\n    }\n\n    /**\n     * @return {number} Number of rows in this SummarizedExperiment.\n     */\n    numberOfRows() {\n        return this._rowData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of column data, with one row per column in this SummarizedExperiment.\n     */\n    columnData() {\n        return this._columnData;\n    }\n\n    /**\n     * @return {number} Number of columns in this SummarizedExperiment.\n     */\n    numberOfColumns() {\n        return this._columnData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing column names, or `null` if no column names are available.\n     */\n    columnNames() {\n        return this._columnNames;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAssay(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove assay \" + (typeof i == \"string\" ? \"'\" + i + \"'\" : String(i)) + \" from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment after removing the specified assay.\n     */\n    $removeAssay(i) {\n        return this.removeAssay(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} A SummarizedExperiment with modified assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssay(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) !== this.numberOfRows() || generics.NUMBER_OF_COLUMNS(value) !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same dimensions as this 'SummarizedExperiment'\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._assays = target._assays.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assays.\n     */\n    $setAssay(i, value) {\n        return this.setAssay(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified assay names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssayNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the assay names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assay names.\n     */\n    $setAssayNames(names) {\n        return this.setAssayNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAssays(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = this._assays.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the assays for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced assays.\n     */\n    $sliceAssays(i) {\n        return this.sliceAssays(i, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfRows()) {\n            throw new Error(\"expected 'value' to have the same number of rows as this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row data.\n     */\n    $setRowData(value) {\n        return this.setRowData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same number of rows as the number of columns of this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified column data.\n     */\n    $setColumnData(value) {\n        return this.setColumnData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfRows(), \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfColumns(), \"'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        output._assays = this._assays.apply(v => generics.SLICE_2D(v, rows, columns, { allowView }));\n\n        if (rows !== null) {\n            output._rowData = generics.SLICE(this._rowData, rows, { allowView });\n            output._rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, rows, { allowView }));\n        } else {\n            output._rowData = this._rowData;\n            output._rowNames = this._rowNames;\n        }\n\n        if (columns !== null) {\n            output._columnData = generics.SLICE(this._columnData, columns, { allowView });\n            output._columnNames = (this._columnNames == null ? null : generics.SLICE(this._columnNames, columns, { allowView }));\n        } else {\n            output._columnData = this._columnData;\n            output._columnNames = this._columnNames;\n        }\n\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_ROWS);\n\n        let all_dfs = objects.map(x => x._rowData);\n        output._rowData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._rowNames);\n        let all_l = objects.map(x => x.numberOfRows());\n        output._rowNames = utils.combineNames(all_n, all_l);\n\n        output._columnData = this._columnData;\n        output._columnNames = this._columnNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_COLUMNS);\n\n        let all_dfs = objects.map(x => x._columnData);\n        output._columnData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._columnNames);\n        let all_l = objects.map(x => x.numberOfColumns());\n        output._columnNames = utils.combineNames(all_n, all_l);\n\n        output._rowData = this._rowData;\n        output._rowNames = this._rowNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._assays = cutils.cloneField(this._assays, deepCopy);\n        output._rowData = cutils.cloneField(this._rowData, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n\n        output._columnData = cutils.cloneField(this._columnData, deepCopy);\n        output._columnNames = cutils.cloneField(this._columnNames, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as ggr from \"./GroupedGRanges.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\n\n/**\n * A RangedSummarizedExperiment is a {@linkplain SummarizedExperiment} subclass where each row represents a genomic interval.\n * As such, it stores an additional {@linkplain GRanges} or {@linkplain GroupedGRanges} of length equal to the number of rows,\n * where each element represents the genomic range(s) for the corresponding row of the SummarizedExperiment.\n *\n * The RangedSummarizedExperiment supports the same set of generics as the {@linkplain SummarizedExperiment}.\n * Each method will call the base method, with the following extensions:\n *\n * - {@linkcode SLICE_2D} will additionally slice the supplied genomic ranges by the desired `rows`.\n * - {@linkcode COMBINE_ROWS} will combine genomic ranges across objects.\n *   If some objects contain a GroupedGRanges and other objects contain GRanges, the latter will be coerced to a GroupedGRanges (where each group contains one range) before combining.\n *   If any object is a base SummarizedExperiment, a GroupedGRanges containing zero-length groups will be automatically constructed to attempt combining.\n * - {@linkcode COMBINE_COLUMNS} will use the genomic ranges from the first object.\n *\n * @extends SummarizedExperiment\n */\nexport class RangedSummarizedExperiment extends se.SummarizedExperiment {\n    #check_rowRanges(x) {\n        if (!(x instanceof gr.GRanges) && !(x instanceof ggr.GroupedGRanges)) {\n            throw new Error(\"'rowRanges' should be a 'GRanges' or 'GroupedGRanges' instance\");\n        }\n        if (generics.LENGTH(x) !== this._rowData.numberOfRows()) {\n            throw utils.formatLengthError(\"'rowRanges'\", \"the number of rows\");\n        }\n    }\n\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {?(GRanges|GroupedGRanges)} rowRanges - Genomic ranges corresponding to each row.\n     *\n     * Alternatively, each row may correspond to a group of genomic ranges.\n     *\n     * If `null`, a {@linkplain GroupedGRanges} is constructed where each row corresponds to one group of ranges of zero length.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain SummarizedExperiment} constructor.\n     */\n    constructor(assays, rowRanges, options = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(assays, options);\n\n        if (rowRanges === null) {\n            rowRanges = ggr.GroupedGRanges.empty(this.numberOfRows());\n        } else {\n            this.#check_rowRanges(rowRanges);\n        }\n        this._rowRanges = rowRanges;\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} Genomic ranges corresponding to each row.\n     */\n    rowRanges() {\n        return this._rowRanges;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {RangedSummarizedExperiment} The RangedSummarizedExperiment after modifying its `rowRanges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowRanges(value, { inPlace = false } = {}) {\n        this.#check_rowRanges(value);\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowRanges = value;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @return {RangedSummarizedExperiment} A reference to this RangedSummarizedExperiment after modifying its `rowRanges`.\n     */\n    $setRowRanges(value) {\n        return this.setRowRanges(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n        if (rows !== null) {\n            output._rowRanges = generics.SLICE(this._rowRanges, rows);\n        } else {\n            output._rowRanges = this._rowRanges;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        let collected = [];\n        let has_empty = false;\n        let has_ggr = false;\n\n        for (var i = 0; i < objects.length; i++) {\n            let x = objects[i];\n            if (x instanceof RangedSummarizedExperiment) {\n                let y = x._rowRanges;\n                if (y instanceof ggr.GroupedGRanges) {\n                    has_ggr = true;\n                }\n                collected.push(y);\n            } else if (x instanceof se.SummarizedExperiment) {\n                has_empty = true;\n                collected.push(null);\n            } else {\n                throw new Error(\"objects to be combined must be SummarizedExperiments (failing for object \" + String(i) + \")\");\n            }\n        }\n\n        // Promoting nulls and GRanges to GroupedGRanges, if necessary.\n        if (has_empty || has_ggr) {\n            for (var i = 0; i < collected.length; i++) {\n                let current = collected[i];\n\n                if (current instanceof gr.GRanges) {\n                    let widths = new Int32Array(generics.LENGTH(current));\n                    widths.fill(1);\n\n                    let options = { \n                        rangeLengths: widths,\n                        names: current.names(),\n                        elementMetadata: current.elementMetadata(),\n                        metadata: current.metadata()\n                    };\n\n                    if (options.names !== null) {\n                        current = current.setNames(null);\n                    } \n\n                    if (options.elementMetadata.metadata().size > 0 || options.elementMetadata.numberOfColumns() > 0) {\n                        current = current.setElementMetadata(null);\n                    }\n\n                    if (options.metadata.size > 0) {\n                        current = current.setMetadata(new Map);\n                    }\n\n                    collected[i] = new ggr.GroupedGRanges(current, options);\n\n                } else if (current === null){\n                    collected[i] = ggr.GroupedGRanges.empty(objects[i].numberOfRows());\n                }\n            }\n        }\n\n        output._rowRanges = generics.COMBINE(collected);\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        output._rowRanges = objects[0]._rowRanges;\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._rowRanges = cutils.cloneField(this._rowRanges, deepCopy);\n\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as rse from \"./RangedSummarizedExperiment.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SingleCellExperiment is a {@linkplain RangedSummarizedExperiment} subclass that contains additional fields for storing reduced dimensions and alternative experiments.\n * It supports the same set of generics as the {@linkplain SummarizedExperiment}.\n *\n * Each reduced dimension instance should have number of rows equal to the number of columns of the SingleCellExperiment.\n * Each instance is expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode CLONE}\n *\n * Each alternative experiment should be a {@linkplain SummarizedExperiment} with number of columns equal to that of the SingleCellExperiment.\n *\n * @extends RangedSummarizedExperiment\n */\nexport class SingleCellExperiment extends rse.RangedSummarizedExperiment {\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {?(GRanges|GroupedGRanges)} [options.rowRanges=null] - Genomic ranges corresponding to each row, see the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {Object|Map} [options.reducedDimensions={}] - Object containing named reduced dimensions.\n     * Each value should be a 2-dimensional object with number of rows equal to the number of columns of the assays.\n     * @param {?Array} [options.reducedDimensionOrder=null] - Array containing the order of the reduced dimensions.\n     * This should have the same values as the keys of `reducedDimensions`, and defaults to those keys if `null`.\n     * @param {Object|Map} [options.alternativeExperiments={}] - Object containing named alternative experiments.\n     * Each value should be a 2-dimensional object with number of columns equal to that of the assays.\n     * @param {?Array} [options.alternativeExperimentOrder=null] - Array containing the order of the alternative experiments.\n     * This should have the same values as the keys of `alternativeExperiments`, and defaults to those keys if `null`.\n     */\n    constructor(assays, options={}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        let { reducedDimensions = {}, reducedDimensionOrder = null, alternativeExperiments = {}, alternativeExperimentOrder = null, rowRanges = null } = options;\n        super(assays, rowRanges, options);\n        let ncols = this.numberOfColumns();\n\n        try {\n            this._reducedDimensions = new il.InternalList(reducedDimensions, reducedDimensionOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize reduced dimension list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._reducedDimensions.names()) {\n            let v = this._reducedDimensions.entry(k);\n            if (generics.NUMBER_OF_ROWS(v) !== ncols) {\n                throw new Error(\"number of rows for reduced dimension '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        try {\n            this._alternativeExperiments = new il.InternalList(alternativeExperiments, alternativeExperimentOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize alternative experiment list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._alternativeExperiments.names()) {\n            let v = this._alternativeExperiments.entry(k);\n            if (!(v instanceof se.SummarizedExperiment)) {\n                throw new Error(\"alternative experiment '\" + k + \"' is not a SummarizedExperiment\");\n            }\n            if (v.numberOfColumns(v) !== ncols) {\n                throw new Error(\"number of columns for alternative experiment '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        return;\n    }\n\n    static className = \"SingleCellExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the reduced dimensions.\n     */\n    reducedDimensionNames() {\n        return this._reducedDimensions.names();\n    }\n\n    /**\n     * @param {string|number} i - Reduced dimension to retrieve, either by name or index.\n     * @return {*} The contents of reduced dimension `i` as an multi-dimensional array-like object.\n     */\n    reducedDimension(i) {\n        let output;\n        try {\n            output = this._reducedDimensions.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the alternative experiments.\n     */\n    alternativeExperimentNames() {\n        return this._alternativeExperiments.names();\n    }\n\n    /**\n     * @param {string|number} i - Alternative experiment to retrieve, either by name or index.\n     * @return {SummarizedExperiment} The specified alternative experiment `i`. \n     */\n    alternativeExperiment(i) {\n        let output;\n        try {\n            output = this._alternativeExperiments.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeReducedDimension(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeReducedDimension(i) {\n        return this.removeReducedDimension(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimension(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) != this.numberOfColumns()) {\n            throw new Error(\"number of rows of 'value' should be the same as the number of columns of this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._reducedDimensions = target._reducedDimensions.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified reduced dimensions.\n     */\n    $setReducedDimension(i, value) {\n        return this.setReducedDimension(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified reduced dimension names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimensionNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the reduced dimension names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified reduced dimension names.\n     */\n    $setReducedDimensionNames(names) {\n        return this.setReducedDimensionNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceReducedDimensions(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = this._reducedDimensions.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the reduced dimensions for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced reduced dimensions.\n     */\n    $sliceReducedDimensions(i) {\n        return this.sliceReducedDimensions(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAlternativeExperiment(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeAlternativeExperiment(i) {\n        return this.removeAlternativeExperiment(i, { inPlace: true });;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperiment(i, value, { inPlace = false } = {}) {\n        if (!(value instanceof se.SummarizedExperiment) || generics.NUMBER_OF_COLUMNS(value) != this.numberOfColumns()) {\n            throw new Error(\"'value' should be a SummarizedExperiment with the same number of columns as this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._alternativeExperiments = target._alternativeExperiments.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified alternative experiments.\n     */\n    $setAlternativeExperiment(i, value) {\n        return this.setAlternativeExperiment(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified alternative experiment names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperimentNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the alternative experiment names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified alternative experiment names.\n     */\n    $setAlternativeExperimentNames(names) {\n        return this.setAlternativeExperimentNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAlternativeExperiments(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = this._alternativeExperiments.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the alternative experiments for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced alternative experiments.\n     */\n    $sliceAlternativeExperiments(i) {\n        return this.sliceAlternativeExperiments(i, { inPlace: true });\n    }\n\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n\n        if (columns !== null) {\n            output._reducedDimensions = this._reducedDimensions.apply(v => generics.SLICE_2D(v, columns, null, { allowView }));\n            output._alternativeExperiments = this._alternativeExperiments.apply(v => generics.SLICE_2D(v, null, columns, { allowView }));\n        } else {\n            output._reducedDimensions = this._reducedDimensions;\n            output._alternativeExperiments = this._alternativeExperiments;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        output._reducedDimensions = this._reducedDimensions;\n        output._alternativeExperiments = this._alternativeExperiments;\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        try {\n            output._reducedDimensions = il.InternalList.parallelCombine(objects.map(x => x._reducedDimensions), generics.COMBINE_ROWS);\n        } catch (e) {\n            throw new Error(\"failed to combine reduced dimensions for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        try {\n            output._alternativeExperiments = il.InternalList.parallelCombine(objects.map(x => x._alternativeExperiments), generics.COMBINE_COLUMNS);\n        } catch (e) {\n            throw new Error(\"failed to combine alternative experiments for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._reducedDimensions = cutils.cloneField(this._reducedDimensions, deepCopy);\n        output._alternativeExperiments = cutils.cloneField(this._alternativeExperiments, deepCopy);\n\n        return;\n    }\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\n\nvar _collections = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the collection details if they are not already available.\n * If `false`, `null` is returned if the collection details have not already been loaded into memory.\n *\n * @return {?Array} Array of objects where each entry corresponds to a set collection and contains details about that collection.\n * Each object can be expected to contain:\n * \n * - `title`, the title for the collection.\n * - `description`, the description for the collection.\n * - `species`, the species for all gene identifiers in the collection.\n *   This should contain the full scientific name, e.g., `\"Homo sapiens\"`, `\"Mus musculus\"`.\n * - `maintainer`, the maintainer of this collection.\n * - `source`, the source of this set, usually a link to some external resource.\n * - `start`, the index for the first set in the collection in the output of {@linkcode sets}.\n *   All sets from the same collection are stored contiguously.\n * - `size`, the number of sets in the collection.\n *\n * In a **gesel** context, the identifier for a collection (i.e., the \"collection ID\") is defined as the index of the collection in this array.\n *\n * If the collection details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllCollections(species, { download = true } = {}) {\n    let target = _collections.get(species);\n    if (typeof target !== \"undefined\") {\n        return target;\n    } else if (!download) {\n        return null;\n    }\n\n    target = [];\n    _collections.set(species, target);\n\n    var cres = await reference_download(species + \"_collections.tsv.gz\");\n    if (!cres.ok) {\n        throw new Error(\"failed to fetch collection information for species '\" + species + \"'\");\n    }\n    var coll_data = decompressLines(await cres.arrayBuffer());\n\n    var start = 0;\n    for (var i = 0; i < coll_data.length; i++) {\n        let x = coll_data[i];\n        var details = x.split(\"\\t\");\n        var len = Number(details[5]);\n        target.push({\n            \"title\": details[0],\n            \"description\": details[1],\n            \"species\": details[2],\n            \"maintainer\": details[3],\n            \"source\": details[4],\n            \"start\": start,\n            \"size\": len\n        });\n        start += len;\n    }\n\n    return target;\n}\n","import { gene_download, decompressLines } from \"./utils.js\";\n\nvar _genes = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Array} [options.types=null] - Array of strings specifying the identifier types to be retrieved.\n * The exact choice of strings depends on how the references were constructed.\n * If `null`, it defaults to an array containing `\"symbol\"`, `\"entrez\"` and `\"ensembl\"`.\n *\n * @return {Map} Object where each key is named after an identifier type in `types`.\n * Each value is an array where each element corresponds to a gene and is itself an array of strings containing all identifiers of the current type for that gene.\n *\n * The arrays for different identifier types are all of the same length, and corresponding elements across these arrays describe the same gene.\n * **gesel**'s identifier for each gene (i.e., the \"gene ID\") is defined as the index of that gene in any of these arrays.\n *\n * @async\n */\nexport async function fetchAllGenes(species, { types = null } = {}) {\n    if (types == null) {\n        types = [ \"symbol\", \"entrez\", \"ensembl\" ];\n    }\n\n    let target = _genes.get(species);\n    if (typeof target == \"undefined\") {\n        target = new Map;\n        _genes.set(species, target);\n    }\n\n    let output = new Map;\n    let promises = [];\n    let processing = [];\n\n    for (const t of types) {\n        let found = target.get(t);\n        if (typeof found == \"undefined\") {\n            promises.push(gene_download(species + \"_\" + t + \".tsv.gz\"));\n            processing.push(t);\n        } else {\n            output.set(t, found);\n        }\n    }\n\n    if (promises.length > 0) {\n        let resolved = await Promise.all(promises);\n        for (var i = 0; i < resolved.length; i++) {\n            let res = resolved[i];\n            if (!res.ok) {\n                throw \"failed to fetch symbol information for genes\";\n            }\n            var buffer = await res.arrayBuffer();\n\n            let gene_data = decompressLines(buffer);\n            let processed = [];\n            for (const x of gene_data) {\n                if (x == \"\") {\n                    processed.push([]);\n                } else {\n                    processed.push(x.split(\"\\t\"));\n                }\n            }\n\n            let t = processing[i];\n            target.set(t, processed);\n            output.set(t, processed);\n        }\n    }\n\n    return output;\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\nimport { fetchAllCollections } from \"./fetchAllCollections.js\";\n\nvar _sets = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set details if they are not already available.\n * If `false`, `null` is returned if the set details have not already been loaded into memory.\n *\n * @return {Array} Array of objects where each entry corresponds to a set and contains the details about that set.\n * Each object can be expected to contain:\n * \n * - `name`, the name of the set.\n * - `description`, the description of the set.\n * - `size`, the number of genes in the set.\n * - `collection`, the index of the collection containing the set.\n * - `number`, the number of the set within the collection.\n *\n * In a **gesel** context, the identifier for a set (i.e., the \"set ID\") is defined as the index of the set in this array.\n *\n * If the set details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllSets(species, { download = true } = {}) {\n    let found = _sets.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    found = [];\n    _sets.set(species, found);\n\n    var [ sres, _collections ] = await Promise.all([reference_download(species + \"_sets.tsv.gz\"), fetchAllCollections(species)]);\n    if (!sres.ok) {\n        throw new Error(\"failed to fetch set information for species '\" + species + \"'\");\n    }\n    var set_data = decompressLines(await sres.arrayBuffer());\n\n    for (var i = 0; i < set_data.length; i++) {\n        let x = set_data[i];\n        var details = x.split(\"\\t\");\n        found.push({\n            \"name\": details[0],\n            \"description\": details[1],\n            \"size\": Number(details[2])\n        });\n    }\n\n    let start = 0;\n    for (var i = 0; i < _collections.length; i++) {\n        let len = _collections[i].size;\n\n        // For easier access going the other way.\n        for (var j = 0; j < len; j++) {\n            found[j + start].collection = i;\n            found[j + start].number = j;\n        }\n\n        start += len;\n    }\n\n    return found;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set-to-gene mappings if they are not already available.\n * If `false`, `null` is returned if the set-to-gene mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of sets for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllSets} and is an array of integers containing the IDs for all genes belonging to that set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If the set-to-gene mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchGenesForAllSets(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_set2gene.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full set-to-gene information for species '\" + species + \"'\");\n    }\n\n    var set_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = set_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchGenesForAllSets.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full set-to-gene mappings if {@linkcode fetchGenesForAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set-to-gene information up-front to avoid range requests.\n * This is done by calling {@linkcode fetchGenesForAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs for all genes belonging to the set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchGenesForSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchGenesForAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound == \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_set2gene.tsv\"));\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sefound = spfound.get(set);\n    if (typeof sefound !== \"undefined\") {\n        return sefound;\n    }\n\n    let ranges = _ranges.get(species);\n    let text = await utils.retrieveBytesByIndex(species + \"_set2gene.tsv\", ranges, set);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(set, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the gene-to-set mappings if they are not already available.\n * If `false`, `null` is returned if the gene-to-set mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of genes for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllGenes} and is an array of integers containing the IDs for all sets containing that gene.\n * Set IDs refer to indices in {@linkcode fetchAllSets}.\n *\n * If the gene-to-set mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchSetsForAllGenes(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_gene2set.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full gene-to-set information for species '\" + species + \"'\");\n    }\n\n    var gene_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = gene_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchSetsForAllGenes.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return {number} Number of genes that belong to at least one set for `species`.\n * This can be used as a more appropriate universe size in {@linkcode testEnrichment}.\n */\nexport async function effectiveNumberOfGenes(species) {\n    let ffound = await full.fetchSetsForAllGenes(species, { download: false });\n    if (ffound !== null) {\n        let okay = 0;\n        for (const x of ffound) {\n            okay += x.length > 0;\n        }\n        return okay;\n    }\n\n    let ranged = _ranges.get(species);\n    if (typeof ranged === \"undefined\") {\n        _cache.set(species, new Map);\n        ranged = await utils.retrieveRanges(species + \"_gene2set.tsv\")\n        _ranges.set(species, ranged);\n    }\n\n    let okay = 0;\n    for (var i = 1; i < ranged.length; i++) {\n        if (ranged[i] > ranged[i-1] + 1) {\n            okay++;\n        }\n    }\n\n    return okay;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} gene - Gene ID, see {@linkcode fetchAllGenes} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full gene-to-set mappings if {@linkcode fetchSetsForAllGenes} was called before this function. \n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all gene-to-set mappings up-front to avoid range requests.\n * This is done by calling {@linkcode fetchSetsForAllGenes}\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs of all sets containing the gene.\n * IDs are treated as indices into the return value of {@linkcode fetchAllSets} or as input to {@linkcode fetchSingleSet}.\n *\n * If `gene = null`, no return value is provided.\n * \n * @async\n */\nexport async function fetchSetsForGene(species, gene, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchSetsForAllGenes(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (gene !== null) {\n                return ffound[gene];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound === \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_gene2set.tsv\"));\n    }\n    if (gene == null) {\n        return;\n    }\n\n    let gfound = spfound.get(gene);\n    if (typeof gfound !== \"undefined\") {\n        return gfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_gene2set.tsv\", _ranges.get(species), gene);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(gene, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllCollections.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\n\nasync function initialize(species) {\n    let res = await utils.retrieveRangesWithExtras(species + \"_collections.tsv\");\n    _ranges.set(species, res.ranges);\n    _sizes.set(species, res.extra);\n\n    let first = 0;\n    let starts = [];\n    for (const s of res.extra) {\n        starts.push(first);\n        first += s;\n    }\n    _starts.set(species, starts);\n\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of sets in each collection.\n * Each value corresponds to a collection in {@linkcode fetchAllCollections}.\n * @async\n */\nexport async function fetchCollectionSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of collections for this species.\n * @async\n */\nexport async function numberOfCollections(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} collection - Collection ID, see {@linkcode fetchAllCollections} for details.\n * \n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full collection details if {@linkcode fetchAllCollections} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all collection details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllCollections}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the collection.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllCollections}.\n *\n * If `collection = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleCollection(species, collection, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllCollections(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (collection !== null) {\n                return ffound[collection];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (collection == null) {\n        return;\n    }\n\n    let cfound = cached.get(collection);\n    if (typeof cfound !== \"undefined\") {\n        return cfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_collections.tsv\", _ranges.get(species), collection);\n    let split = text.split(\"\\t\");\n    let output = {\n        title: split[0],\n        description: split[1],\n        species: split[2],\n        maintainer: split[3],\n        source: split[4],\n        start: _starts.get(species)[collection],\n        size: _sizes.get(species)[collection]\n    };\n\n    cached.set(collection, output);\n    return output;\n}\n\n\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllSets.js\";\nimport { fetchCollectionSizes } from \"./fetchSingleCollection.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\nconst _parents = new Map;\nconst _internal_number = new Map;\n\nasync function initialize(species) {\n    const [ sres, csizes ] = await Promise.all([ \n        utils.retrieveRangesWithExtras(species + \"_sets.tsv\"), \n        fetchCollectionSizes(species) \n    ]);\n    _ranges.set(species, sres.ranges);\n    _sizes.set(species, sres.extra);\n\n    let parents = [];\n    let internal_number = [];\n    var totals = 0;\n    for (var i = 0; i < csizes.length; i++) {\n        let colsize = csizes[i];\n        for (var j = 0; j < colsize; j++) {\n            parents.push(i);\n            internal_number.push(j);\n        }\n        totals += colsize;\n    }\n\n    if (totals != sres.extra.length) {\n        throw new Error(\"discrepancy between number of sets and sum of collection sizes\");\n    }\n\n    _parents.set(species, parents);\n    _internal_number.set(species, internal_number);\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of genes in each set.\n * Each value corresponds to a set in {@linkcode fetchAllSets}.\n * @async\n */\nexport async function fetchSetSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of sets for this species.\n * @async\n */\nexport async function numberOfSets(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full set details if {@linkcode fetchAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the set.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllSets}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                console.log(set);\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sfound = cached.get(set);\n    if (typeof sfound !== \"undefined\") {\n        return sfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_sets.tsv\", _ranges.get(species), set);\n    let split = text.split(\"\\t\");\n    let output = {\n        name: split[0],\n        description: split[1],\n        size: _sizes.get(species)[set],\n        collection: _parents.get(species)[set],\n        number: _internal_number.get(species)[set]\n    };\n\n    cached.set(set, output);\n    return output;\n}\n\n\n","import { fetchAllGenes } from \"./fetchAllGenes.js\";\n\nvar by_symbol = new Map;\nvar by_symbol_lower = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} type - Type of the identifier to use as the key of the map, e.g., `\"ensembl\"`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.lowerCase=false] - Whether to use lower-case keys in the map.\n *\n * @return {Map} Map where each key is a string containing a (possibly lower-cased) identifier of the specified `type` and each value is an array.\n * Each array contains the **gesel** gene IDs associated with the `type` identifier, see {@linkcode fetchAllGenes} for ore details.\n *\n * @async\n */\nexport async function mapGenesByIdentifier(species, type, { lowerCase = false } = {}) {\n    let host = (lowerCase ? by_symbol_lower : by_symbol);\n\n    let sfound = host.get(species);\n    if (typeof sfound === \"undefined\") {\n        sfound = new Map;\n        host.set(species, sfound);\n    }\n\n    let tfound = sfound.get(type);\n    if (typeof tfound === \"undefined\") {\n        tfound = new Map;\n        sfound.set(type, tfound);\n\n        let _genes = (await fetchAllGenes(species, { types: [ type ] })).get(type);\n        for (var i = 0; i < _genes.length; i++) {\n            for (let y of _genes[i]) {\n                if (lowerCase) {\n                    y = y.toLowerCase();\n                }\n\n                let current = tfound.get(y);\n                if (typeof current !== \"undefined\") {\n                    current.add(i);\n                } else {\n                    tfound.set(y, new Set([i]));\n                }\n            }\n        }\n\n        for (const [key, val] of tfound) {\n            tfound.set(key, Array.from(val));\n        }\n    }\n\n    return tfound;\n}\n","/**\n * Reindex the gene sets for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to convert the gesel gene IDs to indices within that universe.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and contains the corresponding gesel gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * Each entry can be either a number, for a 1:1 mapping; NaN, for a gene that has no matching gesel gene ID; or an array of gesel gene IDs, like that returned by {@linkcode searchGenes}.\n * @param {Array} genesForSets - Array of length equal to the number of reference gene sets.\n * Each entry corresponds to a set and is an array containing gesel gene IDs for all genes in that set.\n * This is typically obtained from {@linkcode fetchGenesForAllSets}.\n *\n * @return {Array} Array of length equal to `genesForSets`. \n * Each entry corresponds to a reference gene set and is a Uint32Array where the elements are indices into `geneMapping`, specifying the genes in the user's universe that belong to that set.\n * If a gene in `geneMapping` maps to multiple gesel IDs, it is considered to belong to all sets containing any of its mapped gesel gene IDs.\n */\nexport function reindexGenesForAllSets(geneMapping, genesForSets) {\n    let reverse_mapping = new Map;\n    for (var i = 0; i < geneMapping.length; i++) {\n        for (const gesel_gene of geneMapping[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found == \"undefined\") {\n                found = new Set;\n                reverse_mapping.set(gesel_gene, found);\n            }\n            found.add(i);\n        }\n    }\n\n    // Converting everything to an array for easier iteration. \n    for (const [k, v] of reverse_mapping) {\n        reverse_mapping[k] = new Uint32Array(v);\n    }\n\n    let new_sets = new Array(genesForSets.length);\n    for (var i = 0; i < genesForSets.length; i++) {\n        let subset = new Set;\n        for (const gesel_gene of genesForSets[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found !== \"undefined\") {\n                for (const gene of found) {\n                    subset.add(gene);\n                }\n            }\n        }\n        new_sets[i] = (new Uint32Array(subset)).sort();\n    }\n\n    return new_sets;\n}\n\n","/**\n * Reindex the gene-to-set mappings for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to create a mapping of all sets containing each of their own genes.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and contains the corresponding gesel gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * Each entry can be either a number, for a 1:1 mapping; NaN, for a gene that has no matching gesel gene ID; or an array of gesel gene IDs, like that returned by {@linkcode searchGenes}.\n * @param {Array} setsForGenes - Array of length equal to the number of gesel gene IDs.\n * Each entry corresponds to a gesel gene ID and is an array containing the set IDs for all sets containing that gene.\n * This is typically obtained from {@linkcode fetchSetsForAllGenes}.\n *\n * @return {Array} Array of length equal to `geneMapping`.\n * Each entry corresponds to a gene in the user-supplied universe and is a Uint32Array where the elements are the gesel set IDs containing that gene.\n * If a gene in `geneMapping` maps to multiple gesel IDs, we report all sets containing any of its mapped gesel gene IDs.\n */\nexport function reindexSetsForAllGenes(geneMapping, setsForGenes) {\n    let remapped = new Array(geneMapping.length);\n    for (var i = 0; i < geneMapping.length; i++) {\n        let collected = new Set;\n        for (const gesel_gene of geneMapping[i]) {\n            for (const set of setsForGenes[gesel_gene]) {\n                collected.add(set);\n            }\n        }\n        remapped[i] = (new Uint32Array(collected)).sort();\n    }\n    return remapped;\n}\n","import * as utils from \"./utils.js\";\n\nexport function binarySearch(query, vector) {\n    let left = 0;\n    let right = vector.length;\n\n    while (left < right) {\n        let mid = Math.trunc((left + right) / 2);\n        if (vector[mid] < query) {\n            left = mid + 1;\n        } else if (vector[mid] > query) {\n            right = mid;\n        } else {\n            return mid;\n        }\n    }\n\n    return left;\n}\n\nasync function fetchSetsByToken(species, token, file, all_ranges, all_ordered, all_cache) {\n    let actual_file = species + \"_\" + file;\n\n    let cached = all_cache.get(species);\n    if (typeof cached === \"undefined\") {\n        const { ranges, order } = await utils.retrieveNamedRanges(actual_file);\n        all_ranges.set(species, ranges);\n        all_ordered.set(species, order);\n        cached = new Map;\n        all_cache.set(species, cached);\n    }\n\n    if (token == null) {\n        return;\n    }\n\n    let tfound = cached.get(token);\n    if (typeof tfound !== \"undefined\") {\n        return tfound;\n    }\n\n    let ranges = all_ranges.get(species);\n    let output;\n    if (token.includes(\"*\") || token.includes(\"?\")) {\n        let ordered = all_ordered.get(species);\n\n        // Wildcard handling.\n        let initstub = token.replace(/[*?].*/, \"\")\n        let pos = (initstub == \"\" ? 0 : binarySearch(initstub, ordered));\n        let regex = new RegExp(token.replace(/[*]/g, \".*\").replace(/[?]/g, \".\"));\n\n        let collected = [];\n        let to_cache = [];\n        let union = new Set;\n\n        while (pos < ordered.length) {\n            let candidate = ordered[pos];\n            if (initstub != \"\" && !candidate.startsWith(initstub)) {\n                break;\n            }\n\n            let cfound = cached.get(candidate);\n            if (typeof cfound === \"undefined\") {\n                let rr = ranges.get(candidate);\n                collected.push(utils.retrieveBytes(actual_file, rr[0], rr[1]).then(utils.convertToUint32Array));\n                to_cache.push(candidate);\n            } else {\n                for (const y of cfound) {\n                    union.add(y);\n                }\n            }\n\n            pos++;\n        }\n\n        let resolved = await Promise.all(collected);\n        for (var i = 0; i < resolved.length; i++) {\n            let x = resolved[i];\n            cached.set(to_cache[i], x);\n            for (const y of x) {\n                union.add(y);\n            }\n        }\n\n        output = new Uint32Array(union);\n\n    } else {\n        // Direct handling.\n        let rr = ranges.get(token);\n        if (typeof rr === \"undefined\") {\n            return new Uint32Array;\n        }\n        let text = await utils.retrieveBytes(actual_file, rr[0], rr[1]);\n        output = utils.convertToUint32Array(text);\n    }\n\n    cached.set(token, output);\n    return output;\n}\n\nconst n_cache = new Map;\nconst n_ranges = new Map;\nconst n_ordered = new Map;\n\nasync function fetchSetsByNameToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-names.tsv\", n_ranges, n_ordered, n_cache);\n}\n\nconst d_cache = new Map;\nconst d_ranges = new Map;\nconst d_ordered = new Map;\n\nasync function fetchSetsByDescriptionToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-descriptions.tsv\", d_ranges, d_ordered, d_cache);\n}\n\nexport async function preloadTokens(species, resp, ordered, cache, msg) {\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch full set of \" + msg + \" tokens for species '\" + species + \"'\");\n    }\n\n    let lines = utils.decompressLines(await resp.arrayBuffer());\n    if (lines.length !== ordered.length) {\n        throw new Error(\"mismatch in lengths between token names and set indices for species '\" + species + \"'\");\n    }\n\n    for (var i = 0; i < lines.length; i++) {\n        cache.set(ordered[i], utils.convertToUint32Array(lines[i]));\n    }\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return Preloads the search indices for use in {@linkcode searchSetText}.\n * This performs a one-off download of the indices such that further calls to {@linkcode searchSetText} do not need to perform HTTP range requests.\n */\nexport async function preloadSearchSetText(species) {\n    let full = await Promise.all([ \n        utils.reference_download(species + \"_tokens-names.tsv.gz\"),\n        utils.reference_download(species + \"_tokens-descriptions.tsv.gz\"),\n        fetchSetsByNameToken(species, null),\n        fetchSetsByDescriptionToken(species, null)\n    ]);\n    await preloadTokens(species, full[0], n_ordered.get(species), n_cache.get(species), \"name\");\n    await preloadTokens(species, full[1], d_ordered.get(species), d_cache.get(species), \"description\");\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} query - Query string containing multiple words to search in the names and/or descriptions of each set.\n *\n * Each stretch of alphanumeric characters and dashes is treated as a single word.\n * All other characters are treated as punctuation between words, except for the following wildcards:\n *\n * - `*`: match zero or more alphanumeric or dash characters.\n * - `?`: match exactly one alphanumeric or dash character.\n *\n * A set's name and/or description must contain all words in `query` to be considered a match.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inName=true] - Whether to search the name of the set for matching words.\n * @param {boolean} [options.inDescription=true] - Whether to search the description of the set for matching words.\n *\n * @return {Array} Array of indices of the sets with names and/or descriptions that match `query`.\n * @async\n */\nexport async function searchSetText(species, query, { inName = true, inDescription = true } = {}) {\n    // Tokenizing the query using the same logic as in the feedstock repository,\n    // but preserving our wildcards for special handling later.\n    let processed = query.toLowerCase().replace(/[^a-zA-Z0-9-?*]/g, \" \");\n    let tokens = processed.split(/\\s+/);\n    tokens = tokens.filter(x => x !== \"\" || x !== \"-\");\n\n    let init = [];\n    if (inName) {\n        init.push(fetchSetsByNameToken(species, null));\n    }\n    if (inDescription) {\n        init.push(fetchSetsByDescriptionToken(species, null));\n    }\n    await Promise.all(init); // force initialization of all caches.\n\n    let gathered_names = [];\n    if (inName) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_names.push(fetchSetsByNameToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let gathered_descriptions = [];\n    if (inDescription) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_descriptions.push(fetchSetsByDescriptionToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let resolved_names = await Promise.all(gathered_names);\n    let resolved_descriptions = await Promise.all(gathered_descriptions);\n\n    let gathered = [];\n    for (var i = 0; i < tokens.length; i++) {\n        let n = (inName ? resolved_names[i] : []);\n        let d = (inDescription ? resolved_descriptions[i] : []);\n\n        let combined = new Uint32Array(n.length + d.length);\n        combined.set(n);\n        combined.set(d, n.length);\n        gathered.push(combined);\n    }\n\n    return utils.intersect(gathered);\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Helper class for handling matrix data from multiple modalities.\n * In particular, it simplifies memory management of the assorted {@linkplain ScranMatrix} instances containing data for different features in the same set of cells.\n */\nexport class MultiMatrix {\n    #store;\n    #ncols;\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object} [options.store={}] - Existing store of {@linkplain ScranMatrix} objects.\n     * Each matrix should correspond to a different modality, named according to its key.\n     * All matrices should have data for the same set of cells, i.e., same number of columns.\n     */\n    constructor({ store = {} } = {}) {\n        this.#store = store;\n        this.#ncols = null;\n\n        let keys = Object.keys(store);\n        if (keys.length) {\n            // We ignore numberOfColumns here, as everyone should have the same number of cells.\n            for (var k = 0; k < keys.length; k++) {\n                let current = store[keys[k]];\n                if (k == 0) {\n                    this.#ncols = current.numberOfColumns();\n                } else if (current.numberOfColumns() != this.#ncols) {\n                    throw new Error(\"all matrices should have the same number of columns\");\n                }\n            }\n        }\n    }\n\n    /**\n     * @return {?number} Number of columns in the matrices.\n     * If no matrices are available, `null` is returned.\n     */\n    numberOfColumns() {\n        return this.#ncols;\n    }\n\n    /**\n     * @return {Array} Names of the available modalities.\n     */\n    available() {\n        return Object.keys(this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {boolean} Whether modality `i` is available.\n     */\n    has(i) {\n        return (i in this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {ScranMatrix} The matrix data for modality `i`.\n     */\n    get(i) {\n        return this.#store[i];\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @param {ScranMatrix} matrix - The matrix data for modality `i`.\n     *\n     * @return `matrix` is added to the MultiMatrix with name `i`.\n     */\n    add(i, matrix) {\n        if (this.#ncols === null) {\n            this.#ncols = matrix.numberOfColumns();\n        } else if (matrix.numberOfColumns() != this.#ncols) {\n            throw new Error(\"all matrices should have the same number of columns\");\n        }\n\n        if (i in this.#store) {\n            let old = this.#store[i];\n            utils.free(old);\n        }\n\n        this.#store[i] = matrix;\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return Modality `i` is removed from the MultiMatrix.\n     */\n    remove(i) {\n        utils.free(this.#store[i]);\n        delete this.#store[i];\n        if (Object.keys(this.#store).length == 0) {\n            this.#ncols = null;\n        }\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {MultiMatrix} A deep copy of the current object. \n     */\n    clone() {\n        let new_matrix = new MultiMatrix;\n        try {\n            for (const [k, v] of Object.entries(this.#store)) {\n                new_matrix.add(k, v.clone());\n            }\n        } catch (e) {\n            new_matrix.free();\n            throw e;\n        }\n        return new_matrix;\n    }\n\n    /**\n     * @param {string} from - Old name of the modality.\n     * @param {string} to - New name for the modality.\n     *\n     * @return The modality `from` is renamed to `to`, possibly replacing any existing modality at `to`.\n     */\n    rename(from, to) {\n        if (from !== to) {\n            if (to in this.#store) {\n                utils.free(this.#store[to]);\n            }\n            this.#store[to] = this.#store[from];\n            delete this.#store[from];\n        }\n    }\n\n    /**\n     * @return Frees memory for all modalities in this MultiMatrix.\n     */\n    free() {\n        for (const [x, v] of Object.entries(this.#store)) {\n            utils.free(v);\n        }\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\n\n/**\n * Wrapper around a matrix allocated on the Wasm heap.\n * @hideconstructor\n */\nexport class ScranMatrix {\n    #id;\n    #matrix;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#matrix = raw;\n        return;\n    }\n\n    /**\n     * @return {ScranMatrix} A clone of the current ScranMatrix instance.\n     * This can be freed independently of the current instance.\n     */\n    clone() {\n        return gc.call(\n            module => this.#matrix.clone(),\n            ScranMatrix\n        );\n    }\n\n    // Internal use only, not documented.\n    get matrix() {\n        return this.#matrix;\n    }\n\n    /**\n     * @return {number} Number of rows in the matrix.\n     */\n    numberOfRows() {\n        return this.#matrix.nrow();\n    }\n\n    /**\n     * @return {number} Number of columns in the matrix.\n     */\n    numberOfColumns() {\n        return this.#matrix.ncol();\n    }\n\n    /**\n     * @param {number} i - Index of the row to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     *\n     * @return {Float64Array} An array containing the contents of row `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    row(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.row(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.ncol());\n            try {\n                this.#matrix.row(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /**\n     * @param {number} i - Index of the column to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     *\n     * @return {Float64Array} An array containing the contents of column `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    column(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.column(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.column(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /** \n     * Free the memory on the Wasm heap for this.#matrix.\n     * This invalidates this object and all of its references.\n     */\n    free() {\n        if (this.#matrix !== null) {\n            gc.release(this.#id);\n            this.#matrix = null;\n        }\n        return;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is sparse.\n     */\n    isSparse() {\n        return this.#matrix.sparse();\n    }\n\n    // Internal use only, by initialize* functions.\n    isReorganized() {\n        return this.#matrix.reorganized();\n    }\n\n    // Internal use only, by initialize* functions.\n    identities({ buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.identities(buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createInt32WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.identities(buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    // Internal use only, by initialize* functions.\n    wipeIdentities() {\n        this.#matrix.wipe_identities();\n        return;\n    }\n}\n","import * as methods from \"../file.js\";\n\nexport function temp(prefix, extension) {\n    let tmppath;\n    do {\n        tmppath = prefix + String(Number(new Date())) + \"_\" + String(Math.round(Math.random() * 10000)) + extension;\n    } while (methods.existsFile(tmppath));\n    return tmppath;\n}\n\nexport function handleString(file) {\n    throw new Error(\"cannot access the file system in a browser context\");\n}\n","import * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as fac from \"./factorize.js\";\n\n/**\n * Create a blocking factor for a set of contiguous blocks, usually to accompany the output of {@linkcode cbind} on matrices representing different batches.\n * This can be used as the blocking factor in functions such as {@linkcode modelGeneVar} or {@linkcode scoreMarkers}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n *\n * @param {(Array|TypedArray)} ncells - Array of integers specifying the number of cells in each block.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the sum of `ncells`.\n *\n * @return {Int32WasmArray} Array containing the blocking factor.\n * Each value specifies the block of origin for each cell.\n *\n * If `buffer` was supplied, it is used as the return value. \n */\nexport function createBlock(ncells, { buffer = null } = {}) {\n    let total = 0;\n    ncells.forEach(x => { total += x; });\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(total);\n            buffer = local_buffer;\n        } else if (buffer.length !== total) {\n            throw new Error(\"'buffer' should have length equal to sum of 'ncells'\");\n        }\n\n        let barr = buffer.array();\n        let sofar = 0;\n        for (var i = 0; i < ncells.length; i++) {\n            let old = sofar;\n            sofar += ncells[i];\n            barr.fill(i, old, sofar);\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n// Soft-deprecated in favor of the more general factorize().\nexport function convertBlock(x, { buffer = null } = {}) {\n    let output = fac.factorize(x, { buffer, action: \"warn\", placeholder: 0 });\n    output.levels = output.levels.map(String);\n    return output;\n}\n\n/**\n * Filter the blocking factor, typically based on the same filtering vector as {@linkcode filterCells}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n * \n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@linkcode createBlock}.\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * \n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to `subset`, if `filter = null`; \n * the number of falsey elements in `subset`, if `filter = false`;\n * or the number of truthy elements in `subset`, if `filter = true`.\n *\n * @return {Int32WasmArray} Array containing the desired subset of `x`. \n * If `buffer` is supplied, the returned array will be a view into `buffer`.\n */\nexport function subsetBlock(x, subset, { filter = null, buffer = null } = {}) {\n    let len = 0;\n    if (filter === null) {\n        len = subset.length;\n    } else {\n        if (subset.length != x.length) {\n            throw new Error(\"'x' and 'filter' should have the same length\");\n        }\n\n        let sum = 0;\n        subset.forEach(x => { sum += (x != 0); });\n        if (filter) {\n            len = subset.length - sum;\n        } else {\n            len = sum;\n        }\n    }\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(len);\n            buffer = local_buffer;\n        } else if (buffer.length !== len) {\n            throw new Error(\"length of 'buffer' is not consistent with 'subset'\");\n        }\n\n        let barr = buffer.array();\n        let xarr = x.array();\n\n        if (filter == null) {\n            subset.forEach((s, i) => {\n                barr[i] = xarr[s];\n            });\n        } else if (filter) {\n            let j = 0;\n            subset.forEach((y, i) => {\n                if (y == 0) {\n                    barr[j] = xarr[i];\n                    j++;\n                }\n            });\n        } else {\n            let j = 0;\n            subset.forEach((y, i) => {\n                if (y !== 0) {\n                    barr[j] = xarr[i];\n                    j++;\n                }\n            });\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n/**\n * Filter the blocking factor, typically based on the same filtering vector as {@linkcode filterCells}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n * \n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@linkcode createBlock}.\n * @param {(Array|TypedArray|Uint8WasmArray)} filter - Array of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the number of falsey elements in `filter`.\n *\n * @return {Int32WasmArray} Array of length equal to `x`, containing all entries of `x` for which `filter` is `false`.\n *\n * If `buffer` is supplied, it is used as the return value.\n */\nexport function filterBlock(x, filter, { buffer = null } = {}) {\n    return subsetBlock(x, filter, { buffer: buffer, filter: true });\n}\n\n/**\n * Reindex the blocking factor to remove unused levels.\n * This is done by adjusting the blocking IDs so that every ID from `[0, N)` is represented at least once, where `N` is the number of levels.\n *\n * @param {Int32WasmArray|Array} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@link createBlock}.\n *\n * @return {Array} `x` is modified in place to remove unused levels.\n *\n * An array (denoted here as `y`) is returned that represents the mapping between the original and modified IDs,\n * i.e., running `x.map(i => y[i])` will recover the input `x`.\n * This is most commonly used to create a new array of levels, i.e., `y.map(i => old_levels[i])` will drop the unused levels. \n */\nexport function dropUnusedBlock(x) {\n    if (x instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        x = x.array();\n    }\n\n    let uniq = new Set(x);\n    let uniq_arr = Array.from(uniq).sort();\n    let mapping = {};\n    uniq_arr.forEach((y, i) => { mapping[y] = i; });\n\n    x.forEach((y, i) => {\n        x[i] = mapping[y];\n    });\n\n    return uniq_arr;\n}\n","import * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as gc from \"./gc.js\";\n\nfunction harvest_matrices(x) {\n    let output = utils.createBigUint64WasmArray(x.length);\n    let arr = output.array();\n    for (var i = 0; i < x.length; i++) {\n        arr[i] = BigInt(x[i].matrix.$$.ptr);\n    }\n    return output;\n}\n\n/**\n * Combine matrices by column, where all matrices contain data for the same features, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of features.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by column.\n */\nexport function cbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.cbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by row, where all matrices contain data for the same cells, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of cells.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by row.\n */\nexport function rbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.rbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by column, after subsetting each matrix to the intersection of common features.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * @param {Array} names - Array of length equal to `inputs`.\n * Each entry should be an Array containing the row names of the corresponding entry of `inputs`.\n * Names should correspond to the rows of that entry of `inputs`.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the combined matrices.\n * - `indices`, an Int32WasmArray of length equal to the number of rows in `matrix`.\n *    This contains the index of the row in the first entry of `inputs` corresponding to each row of `matrix`,\n *    i.e., the gene at the `i`-th row of `matrix` is the same as the gene at the `indices[i]`-th row of `inputs[0]`.\n * - `names`, an array of names identifying the rows of `matrix`.\n *    This is constructed by indexing the first entry of `names` with `indices`.\n */\nexport function cbindWithNames(x, names) {\n    let mat_ptrs;\n    let renamed = [];\n    let name_ptrs;\n    let indices;\n    let output = {};\n\n    try {\n        // Building a common set of rownames.\n        if (names.length !== x.length) {\n            throw new Error(\"length of 'names' should be equal to length of 'x'\");\n        }\n\n        let common = {};\n        let universe = [];\n        for (var i = 0; i < names.length; i++) {\n            if (x[i].numberOfRows() !== names[i].length) {\n                throw new Error(\"length of each 'names' must equal number of rows of its corresponding 'x'\");\n            }\n            names[i].forEach(x => {\n                if (!(x in common)) {\n                    common[x] = universe.length;\n                    universe.push(x);\n                }\n            });\n        }\n\n        name_ptrs = utils.createBigUint64WasmArray(x.length);\n        {\n            let names_arr = name_ptrs.array();\n            for (var i = 0; i < names.length; i++) {\n                let current = names[i];\n                let replacement = utils.createInt32WasmArray(current.length);\n                let replacement_arr = replacement.array();\n                current.forEach((x, i) => {\n                    replacement_arr[i] = common[x];\n                });\n                renamed.push(replacement);\n                names_arr[i] = BigInt(replacement.offset);\n            }\n        }\n\n        mat_ptrs = harvest_matrices(x);\n        indices = utils.createInt32WasmArray(x[0].numberOfRows());\n        output.matrix = gc.call(\n            module => module.cbind_with_rownames(x.length, mat_ptrs.offset, name_ptrs.offset, indices.offset),\n            ScranMatrix\n        );\n\n        output.indices = indices.slice(0, output.matrix.numberOfRows());\n        let internames = [];\n        for (const i of output.indices) {\n            internames.push(names[0][i]);\n        }\n        output.names = internames;\n\n    } catch (e) {\n        utils.free(output.matrix);\n        throw e;\n\n    } finally {\n        utils.free(mat_ptrs);\n        utils.free(name_ptrs);\n        utils.free(indices);\n        for (const x of renamed) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport { ModelGeneVarResults } from \"./modelGeneVar.js\";\n\n/**\n * Compute the filter threshold required to retain the top `number` values.\n *\n * @param {Array|TypedArray} x - Array of numeric values, typically per-gene statistics.\n * @param {number} number - Number of top values to retain after filtering on the returned threshold.\n * This may be approximate in the presence of ties.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.largest=true] - Whether the top values in `x` are defined as the largest numeric values.\n * If `false`, the top values are considered to be the smallest.\n * @param {boolean} [options.copy=true] - Whether to copy `x` before sorting.\n * If `false`, `x` may be modified in-place.\n *\n * @return {number} Threshold to be applied to `x` to obtain the top (approximately) `number` values.\n * If `largest = true`, filtering is performed by taking all values in `x` that are greater than or equal to the returned threshold;\n * if `false`, filtering is performed by taking all values in `x` that are less than or equal to the returned threshold.\n * If `x` is zero-length, NaN is returned.\n */\nexport function computeTopThreshold(x, number, { copy = true, largest = true } = {}) {\n    if (copy) {\n        x = x.slice();\n    }\n\n    if (x instanceof Array) {\n        x.sort((a, b) => a - b); // just in case...\n    } else {\n        x.sort();\n    }\n\n    if (x.length == 0) {\n        return Number.NaN;\n    }\n\n    if (largest) {\n        return x[Math.max(0, x.length - number)]; \n    } else {\n        return x[Math.min(number, x.length) - 1]; \n    }\n}\n\n/**\n * Choose the highly variable genes from variance modelling statistics.\n *\n * @param {(TypedArray|ModelGeneVarResults)} x -\n * A TypedArray of statistics, where larger values correspond to higher variability;\n * or a {@linkplain ModelGeneVarResults} object, in which case the residuals are used as the statistics.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.number=4000] - Number of highly variable genes to select.\n * @param {number} [options.minimum=0] - Minimum value of the residual to consider for a highly variable gene.\n * By default, a highly variable gene must have a non-negative residual.\n *\n * @return {Uint8WasmArray} Array of length equal to the total number of genes,\n * where the chosen highly variable genes are marked with a value of 1 and all other genes have values of zero.\n */\nexport function chooseHVGs(x, { number = 4000, minimum = 0 } = {}) {\n    let stat; \n    if (x instanceof ModelGeneVarResults) {\n        stat = x.residuals();\n    } else {\n        stat = x.slice();\n    }\n\n    let threshold = computeTopThreshold(stat, number, { largest: true, copy: false });\n    if (threshold < minimum) {\n        threshold = minimum;\n    }\n\n    let features = utils.createUint8WasmArray(stat.length);\n    try {\n        // Do this AFTER the features allocation, so that\n        // we can set copy = false for the input array.\n        if (x instanceof ModelGeneVarResults) {\n            stat = x.residuals({ copy: false });\n        } else {\n            stat = x;\n        }\n\n        let farr = features.array();\n        stat.forEach((x, i) => {\n            farr[i] = x >= threshold;\n        });\n\n    } catch (e) {\n        features.free();\n        throw e;\n    }\n\n    return features;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/**\n * Wrapper around the k-means clustering results on the Wasm heap, produced by {@linkcode clusterKmeans}.\n * @hideconstructor\n */\nexport class ClusterKmeansResults {\n    #id;\n    #results;\n\n    #filledClusters;\n    #filledSizes;\n    #filledCenters;\n    #filledWcss;\n    #filledIterations;\n    #filledStatus;\n\n    constructor(id, raw, filled = true) {\n        this.#results = raw;\n        this.#id = id;\n\n        this.#filledClusters = filled;\n        this.#filledSizes = filled;\n        this.#filledCenters = filled;\n        this.#filledWcss = filled;\n        this.#filledIterations = filled;\n        this.#filledStatus = filled;\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the results.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    /**\n     * @return {number} Number of clusters in the results.\n     */\n    numberOfClusters() {\n        return this.#results.num_clusters();\n    }\n\n    /**\n     * @param {number} iterations - Number of iterations.\n     * @return The specified number of iterations is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setIterations(iterations) {\n        if (!this.#filledIterations) {\n            this.#filledIterations = true;\n        }\n        this.#results.set_iterations(iterations);\n        return;\n    }\n\n    /**\n     * @param {number} status - Status of the k-means clustering.\n     * @return The status is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setStatus(status) {\n        if (!this.#filledStatus) {\n            this.#filledStatus = true;\n        }\n        this.#results.set_status(status);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster assignment for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledClusters, \n            () => { this.#filledClusters = true }, \n            COPY => utils.possibleCopy(this.#results.clusters(), COPY),\n            \"clusters\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the number of cells in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterSizes({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSizes, \n            () => { this.#filledSizes = true }, \n            COPY => utils.possibleCopy(this.#results.cluster_sizes(), COPY),\n            \"clusterSizes\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the within-cluster sum of squares in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    withinClusterSumSquares({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledWcss, \n            () => { this.#filledWcss = true }, \n            COPY => utils.possibleCopy(this.#results.wcss(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the cluster centers in column-major format,\n     * where rows are dimensions and columns are the clusters.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterCenters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledCenters, \n            () => { this.#filledCenters = true }, \n            COPY => utils.possibleCopy(this.#results.centers(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} Number of refinement iterations performed by the algorithm.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setIterations setIterations}.\n     */\n    iterations() {\n        if (!this.#filledIterations) {\n            return null;\n        } else {\n            return this.#results.iterations();\n        }\n    }\n\n    /**\n     * @return {?number} Status of the algorithm - anything other than zero usually indicates a problem with convergence.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setStatus setStatus}.\n     */\n    status() {\n        if (!this.#filledStatus) {\n            return null;\n        } else {\n            return this.#results.status();\n        }\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using k-means.\n *\n* @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {number} clusters Number of clusters to create.\n * This should not be greater than the number of cells.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {string} [options.initMethod=\"pca-part\"] - Initialization method.\n * Setting `\"random\"` will randomly select `clusters` cells as centers.\n * Setting `\"kmeans++\"` will use the weighted sampling approach of Arthur and Vassilvitskii (2007).\n * Setting `\"pca-part\"` will use PCA partitioning.\n * @param {number} [options.initSeed=5768] - Seed to use for random number generation during initialization.\n * @param {number} [options.initPCASizeAdjust=1] - Adjustment factor for the cluster sizes, used when `initMethod = \"pca-part\"`.\n * Larger values (up to 1) will prioritize partitioning of clusters with more cells.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ClusterKmeansResults} Object containing the clustering results.\n */\nexport function clusterKmeans(x, clusters, { numberOfDims = null, numberOfCells = null, initMethod = \"pca-part\", initSeed = 5768, initPCASizeAdjust = 1, numberOfThreads = null } = {}) {\n    var buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.cluster_kmeans(pptr, numberOfDims, numberOfCells, clusters, initMethod, initSeed, initPCASizeAdjust, nthreads),\n            ClusterKmeansResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterKmeansResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfClusters - Number of clusters in the dataset.\n * @param {number} numberOfDimensions - Number of dimensions of the embedding used for clustering.\n *\n * @return {ClusterKmeansResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyClusterKmeansResults(numberOfCells, numberOfClusters, numberOfDimensions) {\n    return gc.call(\n        module => new module.ClusterKmeans_Result(numberOfCells, numberOfClusters, numberOfDimensions),\n        ClusterKmeansResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { FindNearestNeighborsResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the SNN graph object on the Wasm heap, produced by {@linkcode buildSNNGraph}.\n * @hideconstructor\n */\nexport class BuildSNNGraphResults {\n    #id;\n    #graph;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#graph = raw;\n        return;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#graph !== null) {\n            gc.release(this.#id);\n            this.#graph = null;\n        }\n        return;\n    }\n\n    // Not documented, internal use only.\n    get graph() {\n        return this.#graph;\n    }\n}\n\n/**\n * Build a shared nearest graph.\n *\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.scheme=\"rank\"] - Weighting scheme for the edges between cells.\n * This can be based on the top ranks of the shared neighbors (`\"rank\"`),\n * the number of shared neighbors (`\"number\"`) \n * or the Jaccard index of the neighbor sets between cells (`\"jaccard\"`).\n * @param {number} [options.neighbors=10] - Number of nearest neighbors to use to construct the graph.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildSNNGraphResults} Object containing the graph.\n */\nexport function buildSNNGraph(x, { scheme = \"rank\", neighbors = 10, numberOfThreads = null } = {}) {\n    var output;\n    var my_neighbors;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    utils.matchOptions(\"scheme\", scheme, [ \"rank\", \"number\", \"jaccard\" ]);\n\n    try {\n        let ref;\n        if (x instanceof FindNearestNeighborsResults) {\n            ref = x;\n        } else {\n            my_neighbors = findNearestNeighbors(x, neighbors, { numberOfThreads: nthreads }); \n            ref = my_neighbors ; // separate assignment is necessary for only 'my_neighbors' but not 'x' to be freed.\n        }\n\n        output = gc.call(\n            module => module.build_snn_graph(ref.results, scheme, nthreads),\n            BuildSNNGraphResults\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around the SNN multi-level clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphMultiLevelResults {\n    #id;\n    #results;\n\n    #filledBest;\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledBest = filled;\n        this.#filledModularity = utils.spawnArray(this.numberOfLevels(), filled);\n        this.#filledMembership = utils.spawnArray(this.numberOfLevels(), filled);\n\n        return;\n    }\n\n    /**\n     * @return {?number} The clustering level with the highest modularity.\n     * Alternatively `null`, if this has not been previously set via {@linkcode ClusterSNNGraphMultiLevelResults#setBest setBest}.\n     */\n    best() {\n        if (!this.#filledBest) {\n            return null;\n        } else {\n            return this.#results.best();\n        }\n    }\n\n    #chooseLevel(level) {\n        if (level === null) {\n            level = this.best();\n            if (level == null) {\n                throw new Error(\"'best' has not yet been set via 'setBest'\");\n            }\n        }\n        return level;\n    }\n\n    /**\n     * @param {number} best - Clustering level with the highest modularity.\n     * @return `best` is set as the best clustering level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setBest(best) {\n        if (!this.#filledBest) {\n            this.#filledBest = true;\n        }\n        this.#results.set_best(best);\n        return;\n    }\n\n    /**\n     * @return {number} Number of levels in the results.\n     */\n    numberOfLevels() {\n        return this.#results.number();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the modularity.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     *\n     * @return {?number} The modularity at the specified level.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphMultiLevelResults#setModularity setModularity}.\n     */\n    modularity({ level = null } = {}) {\n        level = this.#chooseLevel(level);\n        if (!this.#filledModularity[level]) {\n            return null;\n        } else {\n            return this.#results.modularity(level);\n        }\n    }\n\n    /**\n     * @param {number} level - The clustering level at which to set the modularity.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return `modularity` is set as the modularity at the specified level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(level, modularity) {\n        if (!this.#filledModularity[level]) {\n            this.#filledModularity[level] = true;\n        }\n        this.#results.set_modularity(level, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the cluster membership.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ level = null, copy = true, fillable = false } = {}) {\n        level = this.#chooseLevel(level);\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership[level], \n            () => { this.#filledMembership[level] = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(level), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN walktrap clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphWalktrapResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledModularityDetails;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        if (!filled) {\n            let n = this.numberOfMergeSteps() + 1;\n            this.#filledModularityDetails = { which: utils.spawnArray(n, false), remaining: n };\n        }\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of merge steps used by the Walktrap algorithm.\n     */\n    numberOfMergeSteps() {\n        return this.#results.num_merge_steps();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.at=null] - Index at which to extract the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * Set to `null` to obtain the largest modularity across all merge steps.\n     *\n     * @return {?number} The modularity at the specified merge step, or the maximum modularity across all merge steps.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphWalktrapResults#setModularity setModularity}.\n     */\n    modularity({ at = null } = {}) {\n        let fail = false;\n        if (at === null) {\n            if (!this.#filledModularity) {\n                return null;\n            }\n            at = -1;\n        } else if (!this.#filledModularity && !this.#filledModularityDetails[at]) {\n            return null;\n        }\n\n        return this.#results.modularity(at);\n    }\n\n    /**\n     * @param {number} at - Index at which to set the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(at, modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularityDetails.which[at] = true;\n            this.#filledModularityDetails.remaining--;\n            if (this.#filledModularityDetails.remaining == 0) {\n                this.#filledModularity = true;\n            }\n        }\n        this.#results.set_modularity(at, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN Leiden clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphLeidenResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        return;\n    }\n\n    /**\n     * @return {?number} The quality of the Leiden clustering.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphLeidenResults#setModularity setModularity}.\n     *\n     * Note that Leiden's quality score is technically a different measure from modularity.\n     * Nonetheless, we use `modularity` for consistency with the other SNN clustering result classes.\n     */\n    modularity() {\n        if (!this.#filledModularity) {\n            return null;\n        } else {\n            return this.#results.modularity();\n        }\n    }\n\n    /**\n     * @param {number} modularity - Modularity value.\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularity = true;\n        }\n        this.#results.set_modularity(modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using community detection on the SNN graph.\n *\n * @param {BuildSNNGraphResults} x - The shared nearest neighbor graph constructed by {@linkcode buildSNNGraph}.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.multiLevelResolution=1] - The resolution of the multi-level clustering, when `method = \"multilevel\"`.\n * Larger values result in more fine-grained clusters.\n * @param {number} [options.leidenResolution=1] - The resolution of the Leiden clustering, when `method = \"leiden\"`.\n * Larger values result in more fine-grained clusters.\n * @param {boolean} [options.leidenModularityObjective=false] - Whether to use the modularity as the objective function when `method = \"leiden\"`.\n * By default, the Constant-Potts Model is used instead.\n * Set to `true` to get an interpretation of the resolution on par with that of `method = \"multilevel\"`.\n * @param {number} [options.walktrapSteps=4] - Number of steps for the Walktrap algorithm, when `method = \"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} Object containing the clustering results.\n * The class of this object depends on the choice of `method`.\n */\nexport function clusterSNNGraph(x, { \n    method = \"multilevel\", \n    multiLevelResolution = 1, \n    leidenResolution = 1, \n    leidenModularityObjective = false,\n    walktrapSteps = 4\n} = {}) {\n    var output;\n\n    try {\n        if (method == \"multilevel\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_multilevel(x.graph, multiLevelResolution),\n                ClusterSNNGraphMultiLevelResults\n            );\n        } else if (method == \"walktrap\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_walktrap(x.graph, walktrapSteps),\n                ClusterSNNGraphWalktrapResults\n            );\n        } else if (method == \"leiden\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_leiden(x.graph, leidenResolution, leidenModularityObjective),\n                ClusterSNNGraphLeidenResults\n            );\n        } else {\n            throw new Error(\"unknown method '\" + method + \"'\")\n        }\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterSNNGraphMultiLevelResults} object (or one of its counterparts), to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.numberOfLevels=1] - Number of levels for which to allocate space when `method=\"multilevel\"`.\n * @param {number} [options.numberOfMergeSteps=1] - Number of merge steps for which to allocate space when `method=\"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} \n * Object with space allocated to store the clustering results.\n */\nexport function emptyClusterSNNGraphResults(numberOfCells, { method = \"multilevel\", numberOfLevels = 1, numberOfMergeSteps = 1 } = {}) {\n    if (method == \"multilevel\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphMultiLevel_Result(numberOfCells, numberOfLevels),\n            ClusterSNNGraphMultiLevelResults,\n            /* filled = */ false\n        );\n    } else if (method == \"walktrap\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphWalktrap_Result(numberOfCells, numberOfMergeSteps),\n            ClusterSNNGraphWalktrapResults,\n            /* filled = */ false\n        );\n    } else if (method == \"leiden\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphLeiden_Result(numberOfCells),\n            ClusterSNNGraphLeidenResults,\n            /* filled = */ false\n        );\n    } else {\n        throw new Error(\"unknown method '\" + method + \"'\")\n    }\n}\n","import * as wa from \"wasmarrays.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Convert an arbitrary array into a R-style factor, with integer indices into an array of levels.\n * This is useful for formatting grouping or blocking vectors for {@linkcode scoreMarkers}, {@linkcode modelGeneVar}, etc.\n *\n * @param {Array|TypedArray} x - Array of values to be converted into a factor.\n * \n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asWasmArray=true] - Whether to return an Int32WasmArray instance for the indices.\n * If `false`, an Int32Array is returned instead.\n * Only used if `buffer` is not supplied.\n * @param {?(Int32WasmArray|Int32Array)} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to that of `x`.\n * @param {string} [options.action=\"warn\"] - Action to take when invalid values (i.e., null, NaNs) are detected in `x`.\n *\n * - `\"none\"`: the index is silently set to `placeholder`.\n * - `\"warn\"`: a warning is raised on the first occurrence of an invalid value, and the index is set to `placeholder`.\n * - `\"error\"`: an error is raised.\n * \n * @param {number} [options.placeholder=-1] - Placeholder index to use upon detecting invalid values in `x`.\n *\n * @return {object} Object containing:\n *\n * - `ids`: an Int32WasmArray or Int32Array of length equal to `x`, containing the index into `levels` for each cell.\n * - `levels`: an array of unique levels, such that `Array.from(ids).map(i => levels[i])` returns the same contents as `x` (aside from invalid values).\n *\n * If `buffer` was supplied, it is used as the value of the `ids` property.\n */\nexport function factorize(x, { asWasmArray = true, buffer = null, action = \"error\", placeholder = -1 } = {}) {\n    let levels = [];\n    let local_buffer;\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (warned) {\n                console.warn (\"replacing invalid values with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected invalid value (e.g., null, NaN) in 'x'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling invalid entries\");\n    }\n\n    try {\n        if (buffer == null) {\n            local_buffer = (asWasmArray ? utils.createInt32WasmArray(x.length) : new Int32Array(x.length));\n            buffer = local_buffer;\n        } else {\n            if (buffer.length !== x.length) {\n                throw new Error(\"'buffer' should have length equal to that of 'x'\");\n            }\n            asWasmArray = buffer instanceof wa.Int32WasmArray;\n        }\n\n        let barr = (asWasmArray ? buffer.array() : buffer); // no allocations from this point onwards!\n        let mapping = new Map;\n\n        for (var i = 0; i < x.length; i++) {\n            let y = x[i];\n            if (y == null || (typeof y == \"number\" && !Number.isFinite(y))) {\n                failure();\n                barr[i] = placeholder;\n                continue;\n            }\n\n            let existing = mapping.get(y);\n            if (typeof existing == \"undefined\") {\n                let n = levels.length;\n                mapping.set(y, n);\n                levels.push(y);\n                barr[i] = n;\n            } else {\n                barr[i] = existing;\n            }\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return {\n        ids: buffer,\n        levels: levels\n    };\n}\n\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Filter out low-quality cells.\n *\n * @param {ScranMatrix} x The count matrix.\n * @param {(Uint8WasmArray|Array|TypedArray)} filters \n * An array of length equal to the number of columns in `x`, where truthy elements specify the cells to be discarded.\n *\n * @return {ScranMatrix} A matrix of the same type as `x`, filtered by column to remove all cells specified in `filters`. \n */\nexport function filterCells(x, filters) {\n    var filter_data;\n    var output;\n\n    try {\n        filter_data = utils.wasmifyArray(filters, \"Uint8WasmArray\");\n        if (filter_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'filters' must be equal to number of columns in 'x'\");\n        }\n        var ptr = filter_data.offset;\n\n        output = gc.call(\n            module => module.filter_cells(x.matrix, ptr, false),\n            x.constructor\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(filter_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/** \n * Wrapper for the neighbor search index on the Wasm heap, typically produced by {@linkcode buildNeighborSearchIndex}.\n * @hideconstructor\n */\nexport class BuildNeighborSearchIndexResults {\n    #id;\n    #index; \n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#index = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the index.\n     */\n    numberOfCells() {\n        return this.#index.num_obs();\n    }\n\n    /**\n     * @return {number} Number of dimensions in the index.\n     */\n    numberOfDims() {\n        return this.#index.num_dim();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#index !== null) {\n            gc.release(this.#id);\n            this.#index = null;\n        }\n        return;\n    }\n\n    // Internal only, not documented.\n    get index() {\n        return this.#index;\n    }\n}\n\n/**\n * Build the nearest neighbor search index.\n *\n * @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {boolean} [options.approximate=true] - Whether to build an index for an approximate neighbor search.\n *\n * @return {BuildNeighborSearchIndexResults} Index object to use for neighbor searches.\n */\nexport function buildNeighborSearchIndex(x, { numberOfDims = null, numberOfCells = null, approximate = true } = {}) {\n    var buffer;\n    var output;\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.build_neighbor_index(pptr, numberOfDims, numberOfCells, approximate),\n            BuildNeighborSearchIndexResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/** \n * Wrapper for the neighbor search results on the Wasm heap, typically produced by {@linkcode findNearestNeighbors}.\n * @hideconstructor\n */\nexport class FindNearestNeighborsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The total number of neighbors across all cells.\n     * This is usually the product of the number of neighbors and the number of cells.\n     */\n    size() {\n        return this.#results.size();\n    }\n\n    /**\n     * @return {number} The number of cells used in the search.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Int32WasmArray} [options.runs=null] - A Wasm-allocated array of length equal to `numberOfCells()`,\n     * to be used to store the number of neighbors per cell.\n     * @param {?Int32WasmArray} [options.indices=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the indices of the neighbors of each cell.\n     * @param {?Float64WasmArray} [options.distances=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the distances to the neighbors of each cell.\n     *\n     * @return {object} \n     * An object is returned with the `runs`, `indices` and `distances` keys, each with an appropriate TypedArray as the value.\n     *\n     * If all of the arguments are non-`null`, the TypedArrays in the returned object are views on the corresponding input WasmArrays.\n     * Note that these views may be invalidated on the next allocation on the Wasm heap.\n     *\n     * If only some of the arguments are non-`null`, an error is raised.\n     */\n    serialize({ runs = null, indices = null, distances = null } = {}) {\n        var copy = (runs === null) + (indices === null) + (distances === null);\n        if (copy != 3 && copy != 0) {\n            throw new Error(\"either all or none of 'runs', 'indices' and 'distances' can be 'null'\");\n        }\n\n        var output;\n\n        if (copy === 3) {\n            var run_data;\n            var ind_data;\n            var dist_data;\n            \n            try {\n                run_data = utils.createInt32WasmArray(this.numberOfCells());\n                let s = this.size();\n                ind_data = utils.createInt32WasmArray(s);\n                dist_data = utils.createFloat64WasmArray(s);\n                this.#results.serialize(run_data.offset, ind_data.offset, dist_data.offset);\n\n                output = { \n                    \"runs\": run_data.slice(), \n                    \"indices\": ind_data.slice(), \n                    \"distances\": dist_data.slice() \n                };\n            } finally {\n                utils.free(run_data);\n                utils.free(ind_data);\n                utils.free(dist_data);\n            }\n\n        } else {\n            this.#results.serialize(runs.offset, indices.offset, distances.offset);\n            output = {\n                \"runs\": runs.array(),\n                \"indices\": indices.array(),\n                \"distances\": distances.array()\n            };\n        }\n\n        return output;\n    }\n\n    /**\n     * @param {Int32WasmArray|Array|TypedArray} runs An array of length equal to `numberOfCells()`,\n     * containing the number of neighbors per cell.\n     * @param {Int32WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the indices of the neighbors of each cell.\n     * @param {Float64WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the distances to the neighbors of each cell.\n     *\n     * @return {FindNearestNeighborsResults} Object containing the unserialized search results.\n     */\n    static unserialize(runs, indices, distances) {\n        var output;\n        var run_data;\n        var ind_data;\n        var dist_data;\n\n        try {\n            run_data = utils.wasmifyArray(runs, \"Int32WasmArray\");\n            ind_data = utils.wasmifyArray(indices, \"Int32WasmArray\");\n            dist_data = utils.wasmifyArray(distances, \"Float64WasmArray\");\n            output = gc.call(\n                module => new module.NeighborResults(runs.length, run_data.offset, ind_data.offset, dist_data.offset),\n                FindNearestNeighborsResults\n            );\n\n        } catch (e) {\n            utils.free(output);\n            throw e;\n\n        } finally { \n            utils.free(run_data);\n            utils.free(ind_data);\n            utils.free(dist_data);\n        }\n\n        return output;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Find the nearest neighbors for each cell.\n *\n * @param {NeighborSearchIndex} x The neighbor search index built by {@linkcode buildNeighborSearchIndex}.\n * @param {number} k Number of neighbors to find.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {FindNearestNeighborsResults} Object containing the search results.\n */\nexport function findNearestNeighbors(x, k, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.find_nearest_neighbors(x.index, k, nthreads),\n        FindNearestNeighborsResults\n    );\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute group-based size factors, where composition biases are removed between groups and library size normalization is performed within groups.\n * This allows us to generate per-cell size factors in spite of the sparsity.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.center=true] - Whether to return centered size factors.\n * If `false`, the size factors can be interpreted as the scaling to match `reference`.\n * @param {?Float64WasmArray} [options.buffer=null] - Output buffer for the size factors.\n * This should have length equal to the number of columns in `x`.\n * @param {number} [options.priorCount=10] - Prior count to use for shrinking size factors towards the relative library size.\n * Larger values result in stronger shrinkage when the coverage is low.\n * @param {?number} [options.reference=null] - Group to use as a reference.\n * This should be an entry in `groups`. \n * If `null`, it is automatically determined.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to the number of columns in `x`, containing the size factors for all cells.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function groupedSizeFactors(x, groups, { center = true, buffer = null, priorCount = 10, reference = null, numberOfThreads = null } = {}) {\n    var local_buffer;\n    var group_arr;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (!(buffer instanceof wa.Float64WasmArray)) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' must be equal to the number of columns in 'x'\");\n        }\n\n        group_arr = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (reference == null) {\n            reference = -1;\n        }\n\n        wasm.call(module => module.grouped_size_factors(x.matrix, group_arr.offset, center, priorCount, reference, buffer.offset, nthreads));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(group_arr);\n    }\n    \n    return buffer;\n}\n","/**\n * Guess the identity of the features from their names.\n *\n * @param {Array} features - Array of strings containing feature identifiers, typically Ensembl IDs or gene symbols.\n * Elements may also be `null` or undefined if an identifier is missing.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceTaxonomy=false] - Whether to force the use of taxonomy IDs for human and mouse.\n * This is `false` for back compatibility.\n *\n * @return {object} An object containing:\n *\n * - `species`, the inferred species as a string.\n *   This can be either `\"human\"` or `\"mouse\"`, or an NCBI taxonomy ID (one of 6239, 10116, 9541, 7227, 7955, 9598).\n *   If `forceTaxonomy = true`, human and mouse are replaced with 9606 and 10090, respectively.\n * - `type`: the feature identifier type.\n *   This can either be `\"ensembl\"` or `\"symbol\"`.\n * - `confidence`: the percentage of entries in `x` that are consistent with the inferred identity.\n */\nexport function guessFeatures(features, { forceTaxonomy = false } = {}) {\n    let ntotal = features.length;\n    let early_threshold = Math.ceil(ntotal / 2);\n    let format = payload => {\n        payload.confidence /= ntotal;\n        return payload;\n    };\n\n    // Duplicated entries only count as one match, so as to avoid problems with\n    // chromosome positions, feature type specifications, etc. Note that we\n    // still need to use the full length to compute 'ntotal', otherwise we\n    // wouldn't be penalizing the duplicates properly.\n    features = new Set(features); \n\n    let ensembl_human = 0;\n    let ensembl_mouse = 0;\n    let ensembl_6239 = 0;\n    let ensembl_10116 = 0; // Ensembl only, Rat symbols are indistiguishable from mice.\n    let ensembl_9541 = 0; // Ensembl only, Mfac symbols are indistiguishable from human.\n    let ensembl_7227 = 0; // Ensembl only, fly symbols are crazy.\n    let ensembl_7955 = 0;\n    let ensembl_9598 = 0; // Ensembl only, Chimp symbols are indistinguishable from human.\n\n    let symbol_human = 0;\n    let symbol_mouse = 0;\n    let symbol_6239 = 0;\n    let symbol_7955 = 0;\n\n    let hsid = (forceTaxonomy ? \"9606\" : \"human\");\n    let mmid = (forceTaxonomy ? \"10090\" : \"mouse\");\n    let collected = [];\n\n    // Checking if it's any type of Ensembl.\n    let any_ens = 0;\n    features.forEach(x => {\n        if (x && x.match(/^ENS[A-Z]*G[0-9]{11}$/)) {\n            any_ens++;\n        }\n    });\n\n    if (any_ens) {\n        features.forEach(x => {\n            if (x) {\n                if (x.startsWith(\"ENSG\")) {\n                    ensembl_human++;\n                } else if (x.startsWith(\"ENSMUSG\")) {\n                    ensembl_mouse++;\n                } else if (x.startsWith(\"ENSRNOG\")) {\n                    ensembl_10116++;\n                } else if (x.startsWith(\"ENSMFAG\")) {\n                    ensembl_9541++;\n                } else if (x.startsWith(\"ENSDARG\")) {\n                    ensembl_7955++;\n                } else if (x.startsWith(\"ENSPTRG\")) {\n                    ensembl_9598++;\n                }\n            }\n        });\n\n        collected.push({ species: hsid, type: \"ensembl\", confidence: ensembl_human });\n        collected.push({ species: mmid, type: \"ensembl\", confidence: ensembl_mouse });\n        collected.push({ species: \"10116\", type: \"ensembl\", confidence: ensembl_10116 });\n        collected.push({ species: \"9541\", type: \"ensembl\", confidence: ensembl_9541 });\n        collected.push({ species: \"7955\", type: \"ensembl\", confidence: ensembl_7955 });\n        collected.push({ species: \"9598\", type: \"ensembl\", confidence: ensembl_9598 });\n\n        // See if we can quit early and avoid the other checks.\n        for (const x of collected) {\n            if (x.confidence >= early_threshold) {\n                return format(x);\n            }\n        }\n    }\n\n    // Human symbol; starts with upper case, no lower case, and not an Ensembl of any kind.\n    features.forEach(x => {\n        if (x && x.match(/^[A-Z][^a-z]+$/) && !x.match(/^ENS[A-Z]+[0-9]{11}/)) {\n            symbol_human++;\n        }\n    });\n    {\n        let payload = { species: hsid, type: \"symbol\", confidence: symbol_human };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Mouse symbol; starts with upper case, but no upper case after that.\n    features.forEach(x => {\n        if (x && x.match(/^[A-Z][^A-Z]+$/)) {\n            symbol_mouse++;\n        }\n    });\n    {\n        let payload = { species: mmid, type: \"symbol\", confidence: symbol_mouse };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm Ensembl (WormBase).\n    features.forEach(x => {\n        if (x && x.match(/^WBGene[0-9]+$/)) {\n            ensembl_6239++;\n        }\n    });\n    {\n        let payload = { species: \"6239\", type: \"ensembl\", confidence: ensembl_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Fly Ensembl (FlyBase).\n    features.forEach(x => {\n        if (x && x.match(/^FBgn[0-9]+$/)) {\n            ensembl_7227++;\n        }\n    });\n    {\n        let payload = { species: \"7227\", type: \"ensembl\", confidence: ensembl_7227 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm symbols; at least three lower case with a dash and numbers.\n    features.forEach(x => {\n        if (x && x.match(/^[a-z]{3,}-[0-9]+$/)) {\n            symbol_6239++;\n        }\n    });\n    {\n        let payload = { species: \"6239\", type: \"symbol\", confidence: symbol_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Zebrafish symbols; at least three lower case letters, no dash, followed by numbers and/or more lower case.\n    features.forEach(x => {\n        if (x && x.match(/^[a-z]{3,}[0-9a-z]+$/)) {\n            symbol_7955++;\n        }\n    });\n    {\n        let payload = { species: \"7955\", type: \"symbol\", confidence: symbol_7955 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Picking the best.\n    let highest = collected[0];\n    for (var i = 1; i < collected.length; i++) {\n        if (collected[i].confidence > highest.confidence) {\n            highest = collected[i];\n        }\n    }\n\n    return format(highest);\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\n/** \n * Perform a hypergeometric test, typically for over-enrichment of markers across feature sets.\n * This can be computed for multiple feature sets by providing arrays as some or all of the arguments.\n * If multiple arrays are supplied, they must be of the same length.\n *\n * @param {number|Array|TypedArray|WasmArray} markersInSet - Number of detected markers that are also in the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfMarkers - Total number of detected markers.\n * @param {number|Array|TypedArray|WasmArray} featureSetSize - Size of the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfFeatures - Total number of features.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {boolean} [options.assumeSorted=false] - Whether the input arrays are already sorted such that `markersInSet` is the slowest-changing value.\n * Setting this to `true` can avoid an extra sorting step for greater efficiency.\n *\n * @return {Float64Array} An array of length equal to that of the supplied arrays (or 1, if no arrays are supplied).\n * The i-th entry contains the p-value for enrichment computed using the i-th entry of each supplied array. \n */\nexport function hypergeometricTest(markersInSet, numberOfMarkers, featureSetSize, numberOfFeatures, { numberOfThreads = null, assumeSorted = false } = {}) {\n    let markersInSet_data;\n    let numberOfMarkers_data;\n    let featureSetSize_data;\n    let numberOfFeatures_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let ntests = null;\n    let check_length = (candidate, name, sofar) => {\n        if (sofar !== null && candidate.length !== sofar) {\n            throw new Error(\"array inputs must have the same length (failing for '\" + name + \"')\");\n        }\n        return candidate.length;\n    }\n\n    if (typeof markersInSet == \"number\") {\n        markersInSet = [markersInSet];\n    } else { \n        ntests = check_length(markersInSet, \"markersInSet\", ntests);\n    }\n\n    if (typeof numberOfMarkers == \"number\") {\n        numberOfMarkers = [numberOfMarkers];\n    } else {\n        ntests = check_length(numberOfMarkers, \"numberOfMarkers\", ntests);\n    }\n\n    if (typeof featureSetSize == \"number\") {\n        featureSetSize = [featureSetSize];\n    } else {\n        ntests = check_length(featureSetSize, \"featureSetSize\", ntests);\n    }\n\n    if (typeof numberOfFeatures == \"number\") {\n        numberOfFeatures = [numberOfFeatures];\n    } else {\n        ntests = check_length(numberOfFeatures, \"numberOfFeatures\", ntests);\n    }\n\n    if (ntests == null) {\n        ntests = 1;\n    }\n\n    let output;\n    let output_data;\n\n    try {\n        markersInSet_data = utils.wasmifyArray(markersInSet, \"Int32WasmArray\");\n        numberOfMarkers_data = utils.wasmifyArray(numberOfMarkers, \"Int32WasmArray\");\n        featureSetSize_data = utils.wasmifyArray(featureSetSize, \"Int32WasmArray\");\n        numberOfFeatures_data = utils.wasmifyArray(numberOfFeatures, \"Int32WasmArray\");\n        output_data = utils.createFloat64WasmArray(ntests);\n\n        wasm.call(module => module.hypergeometric_test(\n            ntests, \n            markersInSet_data.length != 1,\n            markersInSet_data.offset,\n            featureSetSize_data.length != 1,\n            featureSetSize_data.offset,\n            numberOfMarkers_data.length != 1,\n            numberOfMarkers_data.offset,\n            numberOfFeatures_data.length != 1,\n            numberOfFeatures_data.offset,\n            assumeSorted,\n            output_data.offset,\n            nthreads\n        ));\n\n        output = output_data.slice();\n\n    } finally {\n        utils.free(markersInSet_data);\n        utils.free(numberOfMarkers_data);\n        utils.free(featureSetSize_data);\n        utils.free(numberOfFeatures_data);\n        utils.free(output_data);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Initialize a sparse matrix from a dense array.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray|Array|TypedArray} values Values of all elements in the matrix, stored in column-major order.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`.\n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = true, layered = true } = {}) {\n    var val_data; \n    var output;\n    var ids = null; \n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        if (val_data.length !== numberOfRows * numberOfColumns) {\n            throw new Error(\"length of 'values' is not consistent with supplied dimensions\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_dense_vector(\n                numberOfRows, \n                numberOfColumns, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Initialize a sparse matrix from its compressed components.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray} values Values of the non-zero elements.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {WasmArray} indices Row indices of the non-zero elements.\n * This should be of the same length as `values`.\n * @param {WasmArray} pointers Pointers specifying the start of each column in `indices`.\n * This should have length equal to `numberOfColumns + 1`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.byColumn=true] - Whether the input arrays are supplied in the compressed sparse column format.\n * If `true`, `indices` should contain column indices and `pointers` should specify the start of each row in `indices`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n * \n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */ \nexport function initializeSparseMatrixFromCompressedVectors(numberOfRows, numberOfColumns, values, indices, pointers, { byColumn = true, forceInteger = true, layered = true } = {}) {\n    var val_data;\n    var ind_data;\n    var indp_data;\n    var output;\n    var ids = null;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        ind_data = utils.wasmifyArray(indices, null);\n        indp_data = utils.wasmifyArray(pointers, null);\n        if (val_data.length != ind_data.length) {\n            throw new Error(\"'values' and 'indices' should have the same length\");\n        }\n        if (indp_data.length != (byColumn ? numberOfColumns : numberOfRows) + 1) {\n            throw new Error(\"'pointers' does not have an appropriate length\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix(\n                numberOfRows, \n                numberOfColumns, \n                val_data.length, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"), \n                ind_data.offset, \n                ind_data.constructor.className.replace(\"Wasm\", \"\"), \n                indp_data.offset, \n                indp_data.constructor.className.replace(\"Wasm\", \"\"), \n                byColumn,\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n        utils.free(ind_data);\n        utils.free(indp_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/** \n * Initialize a sparse matrix from a buffer containing a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If `layered = true`, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If `layered = false`, this is `null`.\n */\nexport function initializeSparseMatrixFromMatrixMarket(x, { compressed = null, layered = true } = {}) {\n    var buf_data;\n    var output;\n    var ids = null;\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(\n                module => module.read_matrix_market_from_buffer(buf_data.offset, buf_data.length, compressed, layered),\n                ScranMatrix\n            );\n        } else {\n            output = gc.call(\n                module => module.read_matrix_market_from_file(x, compressed, layered),\n                ScranMatrix\n            );\n        }\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buf_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\nfunction convert_compressed(compressed) {\n    if (compressed === null) {\n        return -1;\n    } else if (compressed) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n/** \n * Extract dimensions and other details from a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n *\n * @return {object} An object containing the number of `rows`, `columns` and `lines` in the matrix.\n */\nexport function extractMatrixMarketDimensions(x, { compressed = null } = {}) {\n    var buf_data;\n    var stats = utils.createFloat64WasmArray(3);\n    let output = {};\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            wasm.call(module => module.read_matrix_market_header_from_buffer(buf_data.offset, buf_data.length, compressed, stats.offset));\n        } else {\n            wasm.call(module => module.read_matrix_market_header_from_file(x, compressed, stats.offset));\n        }\n\n        let sarr = stats.array();\n        output.rows = sarr[0];\n        output.columns = sarr[1];\n        output.lines = sarr[2];\n\n    } finally {\n        utils.free(buf_data);\n        utils.free(stats);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from a HDF5 file.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the relevant HDF5 dataset contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromHDF5(file, name, { forceInteger = true, layered = true } = {}) {\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.read_hdf5_matrix(file, name, forceInteger, layered),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Extract the format and dimensions of a HDF5 matrix.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n *\n * @return {object} An object containing:\n * - `rows`, the number of rows in the matrix.\n * - `columns`, the number of columns.\n * - `format`, whether the matrix is dense, CSR or CSC.\n * - `integer`, whether the matrix data is stored as integers or doubles.\n */\nexport function extractHDF5MatrixDetails(file, name) { \n    let output = {};\n    let arr = utils.createInt32WasmArray(5);\n    try {\n        wasm.call(module => module.extract_hdf5_matrix_details(file, name, arr.offset));\n\n        let vals = arr.array();\n        if (vals[0] > 0) {\n            output.format = \"dense\";\n        } else if (vals[1] > 0) {\n            output.format = \"csc\";\n        } else {\n            output.format = \"csr\";\n        }\n\n        output.rows = vals[2];\n        output.columns = vals[3];\n        output.integer = vals[4] > 0;\n    } finally {\n        arr.free();\n    }\n    return output;\n}\n\n/**\n * Initialize a dense matrix from a column-major array.\n *\n * @param {number} numberOfRows - Number of rows.\n * @param {number} numberOfColumns - Number of columns.\n * @param {(WasmArray|TypedArray|Array)} values - Array of length equal to the product of `numberOfRows` and `numberOfColumns`,\n * containing the values to store in the array.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n *\n * @return {ScranMatrix} A dense matrix, filled by column with the contents of `values`.\n */\nexport function initializeDenseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = false } = {}) {\n    var tmp;\n    var output;\n\n    try {\n        tmp = utils.wasmifyArray(values, null);\n        output = gc.call(\n            module => module.initialize_dense_matrix(\n                numberOfRows, \n                numberOfColumns, \n                tmp.offset, \n                tmp.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger\n            ),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from an RDS file.\n *\n * @param {RdsObject} x - Handle to an object inside an RDS file.\n * This should be an integer/numeric matrix, `dgCMatrix` or `dgTMatrix` object.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.consume=false] - Whether to consume the values in `x` when creating the output sparse matrix.\n * Setting this to `true` improves memory efficiency at the cost of preventing any further use of `x`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the R matrix is of an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromRds(x, { consume = false, forceInteger = true, layered = true } = {}) {\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_rds(x.object.$$.ptr, forceInteger, layered, consume),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n","import * as utils from \"./../utils.js\";\nimport * as wasm from \"../wasm.js\";\n\nexport function computePerCellQcFilters(metrics, block, run) {\n    var block_data;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = run(metrics, use_blocks, bptr);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\nexport function applyFilter(thresholds, metrics, block, buffer) {\n    var block_data;\n    var rebuffer;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        let optr;\n        if (buffer == null) {\n            rebuffer = utils.createUint8WasmArray(metrics.numberOfCells());\n            optr = rebuffer.offset;\n        } else {\n            if (buffer.length != metrics.numberOfCells()) {\n                throw new Error(\"'buffer' must be of length equal to the number of cells in 'metrics'\");\n            }\n            optr = buffer.offset;\n        }\n\n        wasm.call(module => thresholds.filter(metrics.results.$$.ptr, use_blocks, bptr, optr));\n        if (buffer == null) {\n            output = rebuffer.slice();\n        } else {\n            output = buffer.array();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(rebuffer);\n    }\n\n    return output;\n}\n\n","import * as wasm from \"../wasm.js\";\nimport * as utils from \"../utils.js\"; \nimport * as wa from \"wasmarrays.js\";\n\nexport function computePerCellQcMetrics(x, subsets, run) {\n    var output;\n    var tmp_subsets = [];\n    var subset_offsets;\n\n    try {\n        let nsubsets = 0;\n        let offset_offset = 0;\n\n        if (subsets != null) {\n            nsubsets = subsets.length;\n            subset_offsets = utils.createBigUint64WasmArray(nsubsets);\n            offset_offset = subset_offsets.offset;\n            let offset_arr = subset_offsets.array();\n\n            for (var i = 0; i < nsubsets; i++) {\n                // This will either create a cheap view, or it'll clone\n                // 'subsets' into the appropriate memory space.\n                let current = utils.wasmifyArray(subsets[i], \"Uint8WasmArray\");\n                if (current.length != x.numberOfRows()) {\n                    throw new Error(\"length of each array in 'subsets' should be equal to the matrix rows\");\n                }\n                tmp_subsets.push(current);\n                offset_arr[i] = BigInt(current.offset);\n            }\n        }\n\n        output = run(x.matrix, nsubsets, offset_offset);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(subset_offsets);\n        for (const y of tmp_subsets) {\n            utils.free(y);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"../utils.js\";\n\nexport function unpack_strings(buffer, lengths) {\n    let dec = new TextDecoder();\n    let names = [];\n    let sofar = 0;\n    for (const l of lengths) {\n        let view = buffer.slice(sofar, sofar + l);\n        names.push(dec.decode(view));\n        sofar += l;\n    }\n    return names;\n}\n\nexport function repack_strings(x) {\n    let buffer;\n    let lengths;\n\n    for (const y of x) {\n        if (!(typeof y == \"string\")) {\n            throw new Error(\"all entries of 'x' should be strings for a string HDF5 dataset\");\n        }\n    }\n\n    try {\n        lengths = utils.createInt32WasmArray(x.length);\n        let lengths_arr = lengths.array();\n\n        let total = 0;\n        const enc = new TextEncoder;\n        let contents = new Array(x.length);\n\n        x.forEach((y, i) => {\n            let e = enc.encode(y);\n            lengths_arr[i] = e.length;\n            contents[i] = e;\n            total += e.length;\n        });\n\n        buffer = utils.createUint8WasmArray(total);\n        let buffer_arr = buffer.array();\n        total = 0;\n\n        contents.forEach(y => {\n            buffer_arr.set(y, total);\n            total += y.length;\n        });\n    } catch (e) {\n        utils.free(buffer);\n        utils.free(lengths);\n        throw e;\n    }\n\n    return [lengths, buffer];\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as init from \"./initializeSparseMatrix.js\";\n\n/**\n * Wrapper around a labelled reference dataset on the Wasm heap, typically produced by {@linkcode loadLabelledReferenceFromBuffers}.\n * @hideconstructor\n */\nclass LoadLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of samples in this dataset.\n     */\n    numberOfSamples() {\n        return this.#reference.num_samples();\n    }\n\n    /**\n     * @return {number} Number of features in this dataset.\n     */\n    numberOfFeatures() {\n        return this.#reference.num_features();\n    }\n\n    /**\n     * @return {number} Number of labels in this dataset.\n     */\n    numberOfLabels() {\n        return this.#reference.num_labels();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\n/**\n * Load a reference dataset for annotation.\n * \n * @param {Uint8Array} ranks - Buffer containing the Gzipped CSV file containing a matrix of ranks.\n * Each line corresponds to a sample and contains a comma-separated vector of ranks across all features.\n * All lines should contain the same number of entries.\n * This is effectively a row-major matrix where rows are samples and columns are features.\n * (Advanced users may note that this is transposed in C++.) \n * @param {Uint8Array} markers - Buffer containing the Gzipped GMT file containing the markers for each pairwise comparison between labels.\n * For `markers`, the GMT format is a tab-separated file with possibly variable numbers of fields for each line.\n * Each line corresponds to a pairwise comparison between labels, defined by the first two fields.\n * The remaining fields should contain indices of marker features (referring to columns of `matrix`) that are upregulated in the first label when compared to the second.\n * Markers should be sorted in order of decreasing strength.\n * @param {Uint8Array} labels - Buffer containing the Gzipped text file containing the label for each sample.\n * Each line should contain an integer representing a particular label, from `[0, N)` where `N` is the number of unique labels.\n * The number of lines should be equal to the number of rows in `matrix`.\n * The actual names of the labels are usually held elsewhere.\n * \n * @return {LoadLabelledReferenceResults} Object containing the reference dataset.\n */\nexport function loadLabelledReferenceFromBuffers(ranks, markers, labels) {\n    var output;\n    var matbuf;\n    var markbuf;\n    var labbuf;\n\n    try {\n        matbuf = utils.wasmifyArray(ranks, \"Uint8WasmArray\");\n        markbuf = utils.wasmifyArray(markers, \"Uint8WasmArray\");\n        labbuf = utils.wasmifyArray(labels, \"Uint8WasmArray\");\n        output = gc.call(\n            module => module.load_singlepp_reference(labbuf.offset, labbuf.length, markbuf.offset, markbuf.length, matbuf.offset, matbuf.length),\n            LoadLabelledReferenceResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(markbuf);\n        utils.free(labbuf);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around a built labelled reference dataset on the Wasm heap, typically produced by {@linkcode buildLabelledReference}.\n * @hideconstructor\n */\nclass BuildLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // internal use only.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of shared features between the test and reference datasets.\n     */\n    sharedFeatures() {\n        return this.#reference.shared_features();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\nfunction create_feature_availability(features, mat_id_buffer) {\n    let mat_id_array = mat_id_buffer.array();\n    let available = {};\n    let counter = 0;\n\n    features.forEach(y => {\n        // Nulls get incremented but they don't fall into the 'available' \n        // dictionary. The strategy is that each null is unique and can \n        // never match anything else.\n        if (y !== null) {\n            available[y] = counter;\n        }\n        mat_id_array[counter] = counter;\n        counter++;\n    });\n\n    return available;\n}\n\nfunction convert_reference_features(referenceFeatures, available, ref_id_buffer) {  \n    let ref_id_array = ref_id_buffer.array();\n    let counter = Object.keys(available).length;\n    referenceFeatures.forEach((y, i) => {\n        // If y is null, we force it to be incremented so that it's always unique.\n        if (y !== null && y in available) {\n            ref_id_array[i] = available[y];\n        } else {\n            ref_id_array[i] = counter;\n            counter++;\n        }\n    });\n    return;\n}\n\n/**\n * Build the reference dataset for annotation.\n * The build process involves harmonizing the identities of the features available in the test dataset compared to the reference.\n * Specifically, a feature must be present in both datasets in order to be retained. \n * Of those features in the intersection, only the `top` markers from each pairwise comparison are ultimately used for classification.\n *\n * Needless to say, `features` should match up to the rows of the {@linkplain ScranMatrix} that is actually used for annotation in {@linkcode labelCells}.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * @param {LoadLabelledReferenceResults} loaded - A reference dataset, typically loaded with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - An array of feature identifiers (usually strings) of length equal to the number of features in `reference`.\n * This is expected to exhibit some overlap with those in `features`.\n * Any `null` entries are considered to be incomparable.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.top=20] - Number of top marker features to use.\n * These features are taken from each pairwise comparison between labels.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildLabelledReferenceResults} Object containing the built reference dataset.\n */\nexport function buildLabelledReference(features, loaded, referenceFeatures, { top = 20, numberOfThreads = null } = {}) {\n    var mat_id_buffer;\n    var ref_id_buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var nfeat = features.length;\n        mat_id_buffer = utils.createInt32WasmArray(nfeat);\n        ref_id_buffer = utils.createInt32WasmArray(loaded.numberOfFeatures());\n        if (referenceFeatures.length != ref_id_buffer.length) {\n            throw new Error(\"length of 'referenceFeatures' should be equal to the number of features in 'reference'\");\n        }\n\n        let available = create_feature_availability(features, mat_id_buffer);\n        convert_reference_features(referenceFeatures, available, ref_id_buffer);\n\n        output = gc.call(\n            module => module.build_singlepp_reference(nfeat, mat_id_buffer.offset, loaded.reference, ref_id_buffer.offset, top, nthreads),\n            BuildLabelledReferenceResults\n        );\n\n        output.expectedNumberOfFeatures = nfeat;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(mat_id_buffer);\n        utils.free(ref_id_buffer);\n    }\n\n    return output;\n}\n\nfunction label_cells(x, expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, msg) {\n    var output = null;\n    var matbuf;\n    var tempmat;\n    var tempbuf;\n    let use_buffer = (buffer instanceof wa.Int32WasmArray);\n\n    try {\n        let target;\n        if (x instanceof ScranMatrix) {\n            target = x.matrix;\n        } else if (x instanceof wa.Float64WasmArray) {\n            tempmat = init.initializeDenseMatrixFromDenseArray(numberOfFeatures, numberOfCells, x, { forceInteger: false });\n            target = tempmat.matrix;\n        } else {\n            throw new Error(\"unknown type for 'x'\");\n        }\n\n        if (target.nrow() != expectedNumberOfFeatures) {\n            throw new Error(\"number of rows in 'x' should be equal to length of 'features' used to build '\" + msg + \"'\");\n        }\n\n        let ptr;\n        if (!use_buffer) {\n            tempbuf = utils.createInt32WasmArray(target.ncol());\n            ptr = tempbuf.offset;\n        } else {\n            ptr = buffer.offset;\n        }\n\n        FUN(target, ptr);\n        if (!use_buffer) {\n            output = tempbuf.slice();\n        }\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(tempmat);\n        utils.free(tempbuf);\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {BuildLabelledReferenceResults} reference - A built reference dataset, typically generated by {@linkcode buildLabelledReference}.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - An existing buffer to store the output labels, of length equal to the number of columns in `x`.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Int32Array} Array containing the labels for each cell in `x`.\n *\n * If `buffer` was supplied, the returned array is a view into it.\n * Note that this may be invalidated on the next allocation on the Wasm heap.\n */\nexport function labelCells(x, reference, { buffer = null, numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    let FUN = (target, ptr) => {\n        wasm.call(module => module.run_singlepp(target, reference.reference, quantile, ptr, nthreads));\n    };\n\n    let output = label_cells(x, reference.expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, \"reference\");\n\n    // This is done as the final step to avoid invalidation upon any touching\n    // of the Wasm heap, anywhere... even upon freeing.\n    if (output === null) {\n        output = buffer.array();\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around integrated reference datasets on the Wasm heap, typically produced by {@linkcode integrateLabelledReferences}.\n * @hideconstructor\n */\nclass IntegrateLabelledReferencesResults {\n    #id;\n    #integrated;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#integrated = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get integrated() {\n        return this.#integrated;\n    }\n\n    /**\n     * @return {number} Number of reference datasets.\n     */\n    numberOfReferences() {\n        return this.#integrated.num_references();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#integrated !== null) {\n            gc.release(this.#id);\n            this.#integrated = null;\n        }\n    }\n}\n\n/**\n * Integrate multiple reference datasets.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * @param {Array} loaded - Array of {@linkplain LabelledReference} objects, typically created with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - Array of length equal to `loaded`, \n * containing arrays of feature identifiers (usually strings) of length equal to the number of features the corresponding entry of `loaded`.\n * This is expected to exhibit some overlap with those in `features`.\n * Any `null` entries are considered to be incomparable.\n * @param {Array} reference - Array of {@linkplain BuildLabelledReferenceResults} objects, typically generated by calling {@linkcode buildLabelledReference} \n * on the same `features` and the corresponding entries of `loaded` and `referenceFeatures`.\n * This should have length equal to that of `loaded`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {IntegrateLabelledReferencesResults} Object containing the integrated references.\n */\nexport function integrateLabelledReferences(features, loaded, referenceFeatures, built, { numberOfThreads = null } = {}) {\n    let id_arr;\n    let loaded_arr2;\n    let ref_arr2;\n    let built_arr2;\n    let output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    // Checking the inputs.\n    let nrefs = loaded.length;\n    if (referenceFeatures.length != nrefs) {\n        throw new Error(\"'loaded' and 'referenceFeatures' should be of the same length\");\n    }\n    if (built.length != nrefs) {\n        throw new Error(\"'loaded' and 'built' should be of the same length\");\n    }\n    for (var i = 0; i < nrefs; i++) {\n        if (loaded[i].numberOfFeatures() != referenceFeatures[i].length) {\n            throw new Error(\"length of each 'referenceFeatures' should be equal to the number of features in the corresponding 'loaded'\");\n        }\n    }\n\n    let ref_arr = new Array(nrefs);\n\n    try {\n        id_arr = utils.createInt32WasmArray(features.length);\n        let available = create_feature_availability(features, id_arr);\n\n        loaded_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let la2 = loaded_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            la2[i] = BigInt(loaded[i].reference.$$.ptr);\n        }\n\n        ref_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ra2 = ref_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            let current = referenceFeatures[i];\n            if (current instanceof wa.Int32WasmArray) {\n                ra2[i] = BigInt(current.offset);\n            } else {\n                ref_arr[i] = utils.createInt32WasmArray(current.length);\n                convert_reference_features(current, available, ref_arr[i]);\n                ra2[i] = BigInt(ref_arr[i].offset);\n            }\n        }\n\n        built_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ba2 = built_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            ba2[i] = BigInt(built[i].reference.$$.ptr);\n        }\n        \n        output = gc.call(\n            module => module.integrate_singlepp_references(\n                features.length,\n                id_arr.offset,\n                nrefs,\n                loaded_arr2.offset,\n                ref_arr2.offset,\n                built_arr2.offset,\n                nthreads\n            ),\n            IntegrateLabelledReferencesResults\n        );\n\n        output.expectedNumberOfFeatures = features.length;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(id_arr);\n        utils.free(loaded_arr2);\n        utils.free(built_arr2);\n        utils.free(ref_arr2);\n        for (const x of ref_arr) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {IntegratedLabelledReferences} integrated - An integrated set of reference datasets, typically generated by {@linkcode integrateLabelledReferences}.\n * @param {Array} assigned - An array of length equal to the number of references in `integrated`.\n * This should contain the result of classification of `x` with each individual reference via {@linkcode labelCells}.\n * Each element should be an Array, TypedArray or Int32WasmArray of length equal to the number of cells in `x`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - An existing buffer to store the output labels, of length equal to the number of columns in `x`.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Int32Array} Array containing the best reference for each cell in `x`.\n *\n * If `buffer` was supplied, the returned array is a view into it.\n * Note that this may be invalidated on the next allocation on the Wasm heap.\n */\nexport function integrateCellLabels(x, assigned, integrated, { buffer = null, numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) { \n    let nrefs = integrated.numberOfReferences();\n    if (assigned.length != nrefs) {\n        throw new Error(\"length of 'assigned' should be equal to the number of references in 'integrated'\");\n    }\n\n    let output;\n    let aptrs;\n    let assigned_arrs = new Array(nrefs);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        aptrs = utils.createBigUint64WasmArray(nrefs);\n        let aptrs_arr = aptrs.array();\n        for (var i = 0; i < assigned.length; i++) {\n            let current = assigned[i];\n\n            let fail = false;\n            if (x instanceof ScranMatrix) {\n                if (current.length != x.numberOfColumns()) {\n                    fail = true;\n                }\n            } else if (current.length != numberOfCells) {\n                fail = true;\n            }\n            if (fail) {\n                throw new Error(\"length of each element 'assigned' should be equal to number of columns in 'x'\");\n            }\n\n            assigned_arrs[i] = utils.wasmifyArray(current, \"Int32WasmArray\");\n            aptrs_arr[i] = BigInt(assigned_arrs[i].offset);\n        }\n    \n        let FUN = (target, ptr) => {\n            wasm.call(module => module.integrate_singlepp(target, aptrs_arr.offset, integrated.integrated, quantile, ptr, nthreads));\n        };\n        output = label_cells(x, integrated.expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, \"integrated\");\n\n    } finally{\n        utils.free(aptrs);\n        for (const x of assigned_arrs) {\n            utils.free(x);\n        }\n    }\n\n    // This is done as the final step to avoid invalidation upon any touching\n    // of the Wasm heap, anywhere... even upon freeing.\n    if (output === null) {\n        output = buffer.array();\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Compute log-transformed normalized expression values.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.sizeFactors=null] - Array of positive numbers containing the size factor for each cell in `x`.\n * This should have length equal to the number of columns in `x`.\n * If `null`, size factors are computed from the column sums of `x`.\n * @param {boolean} [options.center=true] - Whether to center the size factors so that the normalized expression values are comparable in magnitude to the input counts.\n * Set this to `false` if `sizeFactors` are provided and already centered, e.g., with {@linkcode centerSizeFactors}.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to adjust the scaling of cells in different blocks, to avoid excessive up-scaling of low-coverage blocks.\n *\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * This option is ignored if `center = false`, in which case it is assumed that scaling has already been provided in the input `sizeFactors`.\n * @param {boolean} [options.allowZeros=false] - Whether size factors of zero should be allowed.\n * If `true`, no scaling normalization is performed for the corresponding cells, under the assumption they are all-zero libraries.\n * If `false`, an error is raised instead.\n *\n * @return {ScranMatrix} A matrix of the same type as `x` containing log-transformed normalized expression values.\n */\nexport function logNormCounts(x, { sizeFactors = null, center = true, block = null, allowZeros = false } = {}) {\n    var sf_data;\n    var block_data;\n    var output;\n\n    try {\n        var sfptr = 0;\n        var use_sf = false;\n\n        if (sizeFactors !== null) {\n            sf_data = utils.wasmifyArray(sizeFactors, \"Float64WasmArray\");\n            if (sf_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'sizeFactors' must be equal to number of columns in 'x'\");\n            }\n            sfptr = sf_data.offset;\n            use_sf = true;\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.log_norm_counts(x.matrix, use_sf, sfptr, use_blocks, bptr, center, allowZeros),\n            x.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(sf_data);\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Center size factors in preparation for log-transformation.\n * This is usually called by {@linkcode logNormCounts} internally, but can also be directly called by users to reconstitute the size factors used in the log-normalized matrix.\n *\n * @param {TypedArray|WasmArray} sizeFactors - Array of non-negative size factors, one per cell.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell, see {@linkcode logNormCounts}.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to that of `sizeFactors`.\n * If `null`, an array is allocated by the function.\n *\n * @return {Float64WasmArray} Array containing the centered size factors.\n * If `buffer` is provided, it is returned directly.\n */\nexport function centerSizeFactors(sizeFactors, { block = null, buffer = null } = {}) {\n    let local_buffer;\n    let block_data;\n\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(sizeFactors.length);\n            buffer = local_buffer;\n        }\n\n        if (buffer !== sizeFactors) {\n            buffer.set(sizeFactors instanceof wa.WasmArray ? sizeFactors.array() : sizeFactors);\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != buffer.length) {\n                throw new Error(\"'block' must be of length equal to that of 'sizeFactors'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        wasm.call(module => module.center_size_factors(buffer.length, buffer.offset, use_blocks, bptr));\n\n    } catch(e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Perform mutual nearest neighbor (MNN) correction on a low-dimensional representation.\n * This is primarily used to remove batch effects.\n *\n * @param {(RunPCAResults|TypedArray|Array|Float64WasmArray)} x - A matrix of low-dimensional results where rows are dimensions and columns are cells.\n * If this is a {@linkplain RunPCAResults} object, the PCs are automatically extracted.\n * Otherwise, the matrix should be provided as an array in column-major form, with specification of `numberOfDims` and `numberOfCells`.\n * @param {(Int32WasmArray|Array|TypedArray)} block - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform normalization within each block.\n * @param {object} [options={}] - Further optional parameters.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer of length equal to the product of the number of cells and dimensions,\n * to be used to store the corrected coordinates for each cell.\n * If `null`, this is allocated and returned by the function.\n * @param {?number} [options.numberOfDims=null] - Number of dimensions in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {?number} [options.numberOfCells=null] - Number of cells in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {number} [options.k=15] - Number of neighbors to use in the MNN search. \n * @param {number} [options.numberOfMADs=3] - Number of MADs to use to define the threshold on the distances to the neighbors,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustIterations=2] - Number of robustness iterations to use for computing the center of mass,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustTrim=0.25] - Proportion of furthest observations to remove during robustness iterations, \n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {string} [options.referencePolicy=\"max-rss\"] - What policy to use to choose the first reference batch.\n * This can be the largest batch (`\"max-size\"`), the most variable batch (`\"max-variance\"`), the batch with the highest RSS (`\"max-rss\"`) or batch 0 in `block` (`\"input\"`).\n * @param {boolean} [options.approximate=true] - Whether to perform an approximate nearest neighbor search.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to `x`, containing the batch-corrected low-dimensional coordinates for all cells.\n * Values are organized using the column-major layout.\n * This is equal to `buffer` if provided.\n */\nexport function mnnCorrect(x, block, { \n    buffer = null, \n    numberOfDims = null,\n    numberOfCells = null,\n    k = 15,\n    numberOfMADs = 3, \n    robustIterations = 2, \n    robustTrim = 0.25,\n    referencePolicy = \"max-rss\",\n    approximate = true,\n    numberOfThreads = null\n} = {}) {\n\n    let local_buffer;\n    let x_data;\n    let block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            x = x.principalComponents({ copy: \"view\" });\n        } else {\n            if (numberOfDims === null || numberOfCells === null || numberOfDims * numberOfCells !== x.length) {\n                throw new Error(\"length of 'x' must be equal to the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n            x_data = utils.wasmifyArray(x, \"Float64WasmArray\");\n            x = x_data;\n        }\n\n        if (buffer == null) {\n            local_buffer = utils.createFloat64WasmArray(numberOfCells * numberOfDims);\n            buffer = local_buffer;\n        } else if (buffer.length !== x.length) {\n            throw new Error(\"length of 'buffer' must be equal to the product of the number of dimensions and cells\");\n        }\n\n        block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n        if (block_data.length != numberOfCells) {\n            throw new Error(\"'block' must be of length equal to the number of cells in 'x'\");\n        }\n\n        wasm.call(module => module.mnn_correct(\n            numberOfDims, \n            numberOfCells,\n            x.offset,\n            block_data.offset,\n            buffer.offset,\n            k,\n            numberOfMADs,\n            robustIterations,\n            robustTrim,\n            referencePolicy,\n            approximate,\n            nthreads\n        ));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n        \n    } finally {\n        utils.free(x_data);\n    }\n\n    return buffer; \n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper for the variance modelling results, produced by {@linkcode modelGeneVar}.\n * @hideconstructor\n */\nexport class ModelGeneVarResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledVariances;\n    #filledFitted;\n    #filledResiduals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMeans = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledVariances = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledFitted = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledResiduals = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n\n        return;\n    }\n\n    #extract(block, copy, fillable, fillcheck, method) {\n        let fillindex = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            fillindex = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck[fillindex], \n            () => { fillcheck[fillindex] = true }, \n            COPY => utils.possibleCopy(this.#results[method](block), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the variance of log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    variances({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledVariances, \"variances\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the fitted value of the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    fitted({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledFitted, \"fitted\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the residuals from the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    residuals({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledResiduals, \"residuals\");\n    }\n\n    /**\n     * @return {number} Number of blocks used.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Model the mean-variance trend across genes.\n *\n * @param {ScranMatrix} x - The normalized log-expression matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to fit the mean-variance trend within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {number} [options.span=0.3] - Span to use for the LOWESS trend fitting.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ModelGeneVarResults} Object containing the variance modelling results.\n */\nexport function modelGeneVar(x, { block = null, span = 0.3, numberOfThreads = null } = {}) {\n    var block_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.model_gene_var(x.matrix, use_blocks, bptr, span, nthreads),\n            ModelGeneVarResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Create an empty {@linkplain ModelGeneVarResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode chooseHVGs} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n *\n * @return {ModelGeneVarResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyModelGeneVarResults(numberOfGenes, numberOfBlocks) {\n    return gc.call(\n        module => new module.ModelGeneVar_Results(numberOfGenes, numberOfBlocks),\n        ModelGeneVarResults,\n        /* filled = */ false\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the ADT-based metrics allocated on the Wasm heap, typically produced by {@linkcode computePerCellAdtQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellAdtQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total ADT count for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected ADT features for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {?boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count in the ADT subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute the per-cell QC metrics from an ADT count matrix.\n *\n * @param {ScranMatrix} x - The ADT count matrix.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellAdtQcMetricsResults} Object containing the ADT-based QC metrics.\n */\nexport function perCellAdtQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_adt_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellAdtQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellAdtQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode computePerCellAdtQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellAdtQcMetricsResults} Object with allocated memory but no actual values.\n */\nexport function emptyPerCellAdtQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellAdtQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellAdtQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \n\n/**\n * Wrapper for the CRISPR-based metrics allocated on the Wasm heap, produced by {@linkcode perCellCrisprQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellCrisprQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledMaxProportions;\n    #filledMaxIndex;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledMaxProportions = filled;\n        this.#filledMaxIndex = filled;\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY),\n            \"detected\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxProportions({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxProportions, \n            () => { this.#filledMaxProportions = true }, \n            COPY => utils.possibleCopy(this.#results.max_proportion(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the index of the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxIndex({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxIndex, \n            () => { this.#filledMaxIndex = true }, \n            COPY => utils.possibleCopy(this.#results.max_index(), COPY),\n            \"maxIndex\"\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the CRISPR guide count matrix.\n *\n * @param {ScranMatrix} x - The count matrix for CRISPR guides.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellCrisprQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellCrisprQcMetrics(x, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.per_cell_crispr_qc_metrics(x.matrix, nthreads),\n        PerCellCrisprQcMetricsResults\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellCrisprQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestCrisprQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n *\n * @return {PerCellCrisprQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellCrisprQcMetricsResults(numberOfCells) {\n    return gc.call(\n        module => new module.PerCellCrisprQcMetrics_Results(numberOfCells),\n        PerCellCrisprQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the RNA-based metrics allocated on the Wasm heap, produced by {@linkcode perCellRnaQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellRnaQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the RNA count matrix.\n *\n * @param {ScranMatrix} x - The RNA count matrix for genes.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellRnaQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellRnaQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n     return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_rna_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellRnaQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellRnaQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestRnaQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellRnaQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellRnaQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellRnaQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellRnaQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import { clusterKmeans } from \"./clusterKmeans.js\";\nimport { logNormCounts } from \"./logNormCounts.js\";\nimport { groupedSizeFactors } from \"./groupedSizeFactors.js\";\nimport { runPCA } from \"./runPCA.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Quickly compute size factors for an ADT count matrix.\n * This generates k-means clusters from a matrix of PCs before calling {@linkcode groupedSizeFactors}.\n * The aim is to account for composition biases that are common in ADT-based data, while avoiding problems with per-cell sparsity.\n *\n * @param {ScranMatrix} x - An ADT count matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfClusters=20] - Number of clusters to create.\n * More clusters improves the accuracy of the size factors at the cost of precision.\n * @param {number} [options.numberOfPCs=25] - Number of PCs to use.\n * More PCs captures more biological signal at the cost of increasing noise.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.totals=null] - Array containing the total count for each column in `x`, to speed up the initial normalization.\n * If `null`, this is computed from `x`.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Blocking level for each column in `x`, see {@linkcode logNormCounts} and {@linkcode runPCA}.\n * For PCA, this is used to equalize the contribution of blocks of differing size.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to the number of columns in `x`.\n * If `null`, an array is allocated by the function.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * \n * @return {Float64WasmArray} Per-cell size factors for each column of `x`.\n *\n * If `buffer` is supplied, it is directly used as the return value.\n */\nexport function quickAdtSizeFactors(x, { numberOfClusters = 20, numberOfPCs = 25, totals = null, block = null, buffer = null, numberOfThreads = null } = {}) {\n    let norm, pcs;\n    try {\n        norm = logNormCounts(x, { sizeFactors: totals, block: block });\n        pcs = runPCA(norm, { numberOfPCs: Math.min(norm.numberOfRows() - 1, numberOfPCs), numberOfThreads: numberOfThreads, block: block, blockMethod: \"weight\" });\n    } finally {\n        utils.free(norm);\n    }\n\n    let clust;\n    try {\n        clust = clusterKmeans(pcs, numberOfClusters, { numberOfThreads: numberOfThreads });\n    } finally {\n        utils.free(pcs);\n    }\n\n    let local_buffer;\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' should be equal to the number of columns in 'x'\");\n        }\n        groupedSizeFactors(x, clust.clusters({ copy: \"view\" }), { buffer: buffer, numberOfThreads: numberOfThreads });\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(clust);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport * as packer from \"./internal/pack_strings.js\";\n\n/**\n * Base class for RDS objects.\n * @hideconstructor\n */\nexport class RdsObject {\n    constructor(id, raw, par) {\n        this.id = id;\n        this.object = raw;\n        this.parent = par;\n    }\n\n    /**\n     * @return {string} Type of the object.\n     */\n    type() {\n        return this.object.type();\n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     */\n    free() {\n        if (this.object !== null) {\n            gc.release(this.id);\n            this.object = null;\n        }\n    }\n}\n\n/**\n * Vector-like R object.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsVector extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return{number} Length of the vector.\n     */\n    length() {\n        return this.object.size();\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * Integer vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsIntegerVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the integer vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Boolean (i.e., boolean) vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsBooleanVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the logical vector.\n     * Zero values are falsey and values of 1 are truthy.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Double-precision vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsDoubleVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Values of the double vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * String vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsStringVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return {Array} Values of the string vector.\n     */\n    values() {\n        return wasm.call(mod => {\n            this.object.fill_string_vector();\n            let buf = this.object.string_vector_buffer();\n            let len = this.object.string_vector_length();\n            return packer.unpack_strings(buf, len);\n        });\n    }\n}\n\n/**\n * Generic vector from R, typically known as a \"list\".\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsGenericVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {number} index - Index of the list element of interest.\n     * @return {RdsObject} Value of the list element.\n     */\n    load(index) {\n        return dispatch(mod => this.object.load_list_element(index), this.parent);\n    }\n}\n\n/**\n * S4 object from R, containing slot data in its attributes.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsS4Object extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * Name of the R class.\n     */\n    className() {\n        return wasm.call(mod => this.object.class_name());\n    }\n\n    /**\n     * Name of the package that defines the class.\n     */\n    packageName() {\n        return wasm.call(mod => this.object.package_name());\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * NULL type in R.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsNull extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n};\n\nfunction dispatch(fun, par) {\n    let obj = wasm.call(fun);\n\n    let tt = null;\n    try {\n        tt = obj.type();\n    } catch (e) {\n        obj.delete();\n        throw e;\n    }\n\n    // Remaining steps until gc.call() should be no-throw!\n    let cons;\n    if (tt == \"integer\") {\n        cons = RdsIntegerVector;\n    } else if (tt == \"double\") {\n        cons = RdsDoubleVector;\n    } else if (tt == \"boolean\") {\n        cons = RdsBooleanVector;\n    } else if (tt == \"string\") {\n        cons = RdsStringVector;\n    } else if (tt == \"vector\") {\n        cons = RdsGenericVector;\n    } else if (tt == \"S4\") {\n        cons = RdsS4Object;\n    } else if (tt == \"null\") {\n        cons = RdsNull;\n    } else {\n        cons = RdsObject;\n    }\n\n    return gc.call(mod => obj, cons, par);\n}\n\n/**\n * Details of the RDS file.\n * @hideconstructor\n */\nexport class RdsDetails {\n    #id;\n    #obj;\n\n    constructor(id, obj) {\n        this.#id = id;\n        this.#obj = obj;\n    }\n\n    /**\n     * @return {number} Version of the RDS format. This should be 3.\n     */\n    formatVersion() {\n        return this.#obj.format_version();\n    }\n\n    /**\n     * @return {string} The R version used to create the file.\n     */\n    writerVersion() {\n        let info = this.#obj.writer_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {string} The minimum R version that can read the file.\n     */\n    readerVersion() {\n        let info = this.#obj.reader_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {RdsObject} Interface into the underlying R object.\n     */\n    value() {\n        return dispatch(mod => this.#obj.load(), this); \n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     * Doing so will invalidate all {@linkplain RdsObject} instances derived from this object, \n     * directly via {@linkcode RdsDetails#load} or indirectly \n     * (e.g., from further {@linkcode RdsVector#attribute RdsVector.attribute} or {@linkcode RdsGenericVector#load RdsGenericVector.load} calls).\n     */\n    free() {\n        if (this.#obj !== null) {\n            gc.release(this.#id);\n            this.#obj = null;\n        }\n    }\n}\n\n/**\n * Read the contents of an RDS file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of an RDS file.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n *\n * @return {RdsDetails} Details of the file.\n */\nexport function readRds(x) {\n    let tmp;\n    let output;\n\n    try {\n        if (typeof x == \"string\") {\n            output = gc.call(module => module.parse_rds_from_file(x), RdsDetails)\n        } else {\n            tmp = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(module => module.parse_rds_from_buffer(tmp.offset, tmp.length), RdsDetails);\n        }\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/** \n * Wrapper for the PCA results on the Wasm heap, typically created by {@linkcode runPCA}.\n * @hideconstructor\n */\nexport class RunPCAResults {\n    #id;\n    #results;\n\n    #filledComponents;\n    #filledVariances;\n    #filledTotalVariance;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledComponents = filled;\n        this.#filledVariances = filled;\n        this.#filledTotalVariance = filled;\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64Wasmarray)} Array containing the principal components for all cells.\n     * This should be treated as a column-major array where the rows are the PCs and columns are the cells.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    principalComponents({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledComponents, \n            () => { this.#filledComponents = true }, \n            COPY => utils.possibleCopy(this.#results.pcs(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} total - Total variance in the dataset,\n     * equal to the sum of the variances across all PCs (including those that were not explicitly computed).\n     *\n     * @return Total varaiance in this object is set to `total`.\n     * This is primarily intended for use with {@linkcode emptyRunPCAResults}.\n     */\n    setTotalVariance(total) {\n        if (!this.#filledTotalVariance) {\n            this.#filledTotalVariance = true;\n        }\n        this.#results.set_total_variance(total);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64WasmArray)} Array containing the variance explained for each requested PC.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    varianceExplained({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledVariances, \n            () => { this.#filledVariances = true }, \n            COPY => utils.possibleCopy(this.#results.variance_explained(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} The total variance in the dataset,\n     * typically used with {@linkcode PCAResults#varianceExplained varianceExplained} to compute the proportion of variance explained.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setTotalVariance setTotalVariance}.\n     */\n    totalVariance() {\n        if (!this.#filledTotalVariance) {\n            return null;\n        } else {\n            return this.#results.total_variance();\n        }\n    }\n\n    /**\n     * @return {number} Number of PCs available in these results.\n     */\n    numberOfPCs() {\n        return this.#results.num_pcs();\n    }\n\n    /**\n     * @return {number} Number of cells used to compute these results.\n     */\n    numberOfCells() {\n        // TODO: switch to this.#results.num_cells();\n        return this.principalComponents({ copy: false }).length / this.numberOfPCs();\n\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Run a principal components analysis on the log-expression matrix.\n * This is usually done on a subset of features, and possibly with some kind of blocking on a per-cell batch factor.\n *\n * @param {ScranMatrix} x - The log-normalized expression matrix.\n * @param {object} [options={}] - Optional parameters. \n * @param {?(Uint8WasmArray|Array|TypedArray)} [options.features=null] - Array specifying which features should be retained (e.g., HVGs).\n * This should be of length equal to the number of rows in `x`; elements should be `true` to retain each row.\n * If `null`, all features are retained.\n * @param {number} [options.numberOfPCs=25] - Number of top principal components to compute.\n * @param {boolean} [options.scale=false] - Whether to scale each feature to unit variance.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {string} [options.blockMethod=\"regress\"] - How to modify the PCA for the blocking factor.\n *\n * - `\"regress\"` will regress out the factor, effectively performing a PCA on the residuals.\n * - `\"weight\"` will weight the contribution of each blocking level equally so that larger blocks do not dominate the PCA.\n * - `\"none\"` will ignore any blocking factor, i.e., as if `block = null`.\n *\n * This option is only used if `block` is not `null`.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {RunPCAResults} Object containing the computed PCs.\n */\nexport function runPCA(x, { features = null, numberOfPCs = 25, scale = false, block = null, blockMethod = \"regress\", numberOfThreads = null } = {}) {\n    var feat_data;\n    var block_data;\n    var output;\n\n    utils.matchOptions(\"blockMethod\", blockMethod, [\"none\", \"regress\", \"weight\" ]);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var use_feat = false;\n        var fptr = 0;\n\n        if (features !== null) {\n            feat_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n            if (feat_data.length != x.numberOfRows()) {\n                throw new Error(\"length of 'features' should be equal to number of rows in 'x'\");\n            }\n            use_feat = true;\n            fptr = feat_data.offset;\n        }\n\n        // Avoid asking for more PCs than is possible.\n        // Remember that centering removes one df, so we subtract 1 from the dimensions.\n        numberOfPCs = Math.min(numberOfPCs, x.numberOfRows() - 1, x.numberOfColumns() - 1);\n\n        if (block === null || blockMethod == 'none') {\n            output = gc.call(\n                module => module.run_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, nthreads),\n                RunPCAResults\n            );\n\n        } else {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'block' should be equal to the number of columns in 'x'\");\n            }\n            if (blockMethod == \"regress\") {\n                output = gc.call(\n                    module => module.run_blocked_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else if (blockMethod == \"weight\") {\n                output = gc.call(\n                    module => module.run_multibatch_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else {\n                throw new Error(\"unknown value '\" + blockMethod + \"' for 'blockMethod='\");\n            }\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(feat_data);\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain RunPCAResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode clusterKmeans} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset, usually after QC filtering.\n * @param {number} numberOfPCs - Number of PCs to be computed.\n *\n * @return {RunPCAResults} Object with allocated memory to store the PCs, but no actual values.\n */\nexport function emptyRunPCAResults(numberOfCells, numberOfPCs) {\n    return gc.call(\n        module => new module.RunPCA_Results(numberOfCells, numberOfPCs),\n        RunPCAResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildNeighborSearchIndexResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the t-SNE status object on the Wasm heap, typically created by {@linkcode initializeTSNE}.\n * @hideconstructor\n */\nexport class InitializeTSNEResults {\n    #id;\n    #status;\n    #coordinates;\n\n    constructor(id, raw_status, raw_coordinates) {\n        this.#id = id;\n        this.#status = raw_status;\n        this.#coordinates = raw_coordinates;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get status() {\n        return this.#status;\n    }\n\n    // Internal use only, not documented.\n    get coordinates() {\n        return this.#coordinates;\n    }\n\n    /**\n     * @return {InitializeTSNEResults} A deep copy of this object.\n     */\n    clone() {\n        return gc.call(\n            module => this.#status.deepcopy(), \n            InitializeTSNEResults, \n            this.#coordinates.clone()\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.#status.num_obs();\n    }\n\n    /**\n     * @return {number} Number of iterations processed so far.\n     * This will change with repeated invocations of {@linkcode runTSNE} on this object.\n     */\n    iterations () {\n        return this.#status.iterations();\n    }\n\n    /**\n     * @return {object} Object with `x` and `y` keys.\n     * The corresponding values are Float64Array objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.#coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free() {\n        if (this.#status !== null) {\n            gc.release(this.#id);\n            this.#status = null;\n        }\n        if (this.#coordinates !== null) {\n            this.#coordinates.free();\n            this.#coordinates = null;\n        }\n        return;\n    }\n}\n\n/**\n * @param {number} perplexity - Perplexity to use in the t-SNE algorithm.\n * @return {number} Appropriate number of neighbors to use in the nearest neighbor search.\n */\nexport function perplexityToNeighbors(perplexity) {\n    return wasm.call(module => module.perplexity_to_k(perplexity));\n}\n\n/**\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.perplexity=30] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {boolean} [options.checkMismatch=true] - Whether to check for a mismatch between the perplexity and the number of searched neighbors.\n * Only relevant if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {InitializeTSNEResults} Object containing the initial status of the t-SNE algorithm.\n */\nexport function initializeTSNE(x, { perplexity = 30, checkMismatch = true, numberOfThreads = null } = {}) {\n    var my_neighbors;\n    var raw_coords;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let neighbors;\n\n        if (x instanceof BuildNeighborSearchIndexResults) {\n            let k = perplexityToNeighbors(perplexity);\n            my_neighbors = findNearestNeighbors(x, k, { numberOfThreads: nthreads });\n            neighbors = my_neighbors;\n\n        } else {\n            if (checkMismatch) {\n                let k = perplexityToNeighbors(perplexity);\n                if (k * x.numberOfCells() != x.size()) {\n                    throw new Error(\"number of neighbors in 'x' does not match '3 * perplexity'\");\n                }\n            }\n            neighbors = x;\n        }\n\n        raw_coords = utils.createFloat64WasmArray(2 * neighbors.numberOfCells());\n        wasm.call(module => module.randomize_tsne_start(neighbors.numberOfCells(), raw_coords.offset, 42));\n        output = gc.call(\n            module => module.initialize_tsne(neighbors.results, perplexity, nthreads),\n            InitializeTSNEResults,\n            raw_coords\n        );\n\n    } catch(e) {\n        utils.free(output);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Run the t-SNE algorithm on an initialized {@linkplain InitializeTSNEResults}.\n *\n * @param {InitializeTSNEResults} x A previously initialized status object from {@linkcode initializeTSNE}.\n * This may be passed through {@linkcode runTSNE} any number of times.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.maxIterations=1000] - Maximum number of iterations to perform.\n * This number includes all existing iterations that were already performed in `x` from previous calls to {@linkcode runTSNE}.\n * @param {?number} [options.runTime=null] - Number of milliseconds for which the algorithm is allowed to run before returning.\n * If `null`, no limit is imposed on the runtime.\n *\n * @return The algorithm status in `x` is advanced up to the requested number of iterations,\n * or until the requested run time is exceeded, whichever comes first.\n */\nexport function runTSNE(x, { maxIterations = 1000, runTime = null } = {}) {\n    if (runTime === null) {\n        runTime = -1;\n    }\n    wasm.call(module => module.run_tsne(x.status, runTime, maxIterations, x.coordinates.offset));\n    return;\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { buildNeighborSearchIndex, BuildNeighborSearchIndexResults } from \"./findNearestNeighbors.js\"; \n\n/**\n * Scale embeddings based on the variation between neighboring cells.\n * This aims to equalize the noise across embeddings for the same population of cells across different data modalities,\n * allowing them to be combined into a single embedding for coordinated downstream analyses.\n *\n * @param {Array} embeddings - Array of Float64WasmArrays containing column-major matrices where rows are dimensions and columns are cells.\n * All entries of this array should contain data for the same number and ordering of cells.\n * @param {number} numberOfCells - Number of cells in all embeddings.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.neighbors=20] - Number of neighbors to use for quantifying variation.\n * Larger values provide a more stable calculation but assume larger subpopulations.\n * @param {?Array} [options.indices=null] - Array of {@linkplain BuildNeighborSearchIndexResults} objects, \n * where each entry is constructed from the corresponding entry of `embeddings` (see {@linkcode buildNeighborSearchIndex}).\n * This can be used to avoid redundant calculation of indices if they are already available.\n * @param {?Float64WasmArray} [options.buffer=null] - Array in which to store the combined embedding.\n * This should have length equal to the product of `numberOfCells` and the sum of dimensions of all embeddings.\n * @param {boolean} [options.approximate=true] - Should we construct an approximate search index if `indices` is not supplied?\n * @param {?(Array|TypedArray|Float64WasmArray)} [options.weights=null] - Array of length equal to the number of embeddings, containing a non-enegative relative weight for each embedding.\n * This is used to scale each embedding if non-equal noise is desired in the combined embedding.\n * If `null`, all embeddings receive the same weight.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array containing the combined embeddings in column-major format, i.e., dimensions in rows and cells in columns.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function scaleByNeighbors(embeddings, numberOfCells, { neighbors = 20, indices = null, buffer = null, approximate = true, weights = null, numberOfThreads = null } = {}) {\n    let nembed = embeddings.length;\n    let embed_ptrs, index_ptrs;\n    let holding_ndims;\n    let holding_weights;\n    let local_buffer;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let deletable = [];\n    try {\n        // Fetching the pointers.\n        embed_ptrs = utils.createBigUint64WasmArray(nembed);\n        let embed_arr = embed_ptrs.array();\n        for (var i = 0; i < nembed; i++) {\n            embed_arr[i] = BigInt(embeddings[i].offset);\n        }\n\n        let weight_offset = 0;\n        let use_weights = false;\n        if (weights !== null) {\n            use_weights = true;\n            holding_weights = utils.wasmifyArray(weights, \"Float64WasmArray\");\n            if (holding_weights.length != nembed) {\n                throw new Error(\"length of 'weights' should be equal to the number of embeddings\");\n            }\n            weight_offset = holding_weights.offset;\n        }\n\n        // Allocating output space, if necessary; and then scaling.\n        let allocator = (total_ndim) => {\n            let total_len = total_ndim * numberOfCells;\n            if (buffer === null) {\n                local_buffer = utils.createFloat64WasmArray(total_len);\n                buffer = local_buffer;\n            } else if (total_len !== buffer.length) {\n                throw new Error(\"length of 'buffer' should be equal to the product of 'numberOfCells' and the total number of dimensions\");\n            }\n        }\n\n        if (indices !== null) {\n            if (nembed !== indices.length) {\n                throw new Error(\"'indices' and 'embeddings' should have the same length\");\n            }\n\n            index_ptrs = utils.createBigUint64WasmArray(nembed);\n            let index_arr = index_ptrs.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let index = indices[i];\n                if (numberOfCells != index.numberOfCells()) {\n                    throw new Error(\"each element of 'indices' should have the same number of cells as 'numberOfCells'\");\n                }\n                if (embeddings[i].length != index.numberOfCells() * index.numberOfDims()) {\n                    throw new Error(\"length of arrays in 'embeddings' should equal the length of arrays used to build 'indices'\");\n                }\n\n                index_arr[i] = BigInt(indices[i].index.$$.ptr);\n                total_ndim += indices[i].numberOfDims();\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_indices(\n                numberOfCells, \n                nembed, \n                embed_ptrs.offset, \n                index_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                nthreads\n            ));\n\n        } else {\n            holding_ndims = utils.createInt32WasmArray(nembed);\n            let ndims_arr = holding_ndims.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let n = embeddings[i].length;\n                ndims_arr[i] = Math.floor(n / numberOfCells);\n                if (numberOfCells * ndims_arr[i] !== n) {\n                    throw new Error(\"length of arrays in 'embeddings' should be a multiple of 'numberOfCells'\");\n                }\n                total_ndim += ndims_arr[i];\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_matrices(\n                numberOfCells, \n                nembed, \n                holding_ndims.offset, \n                embed_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                approximate,\n                nthreads\n            ));\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        for (const x of deletable) {\n            x.free();\n        }\n        utils.free(embed_ptrs);\n        utils.free(index_ptrs);\n        utils.free(holding_weights);\n        utils.free(holding_ndims);\n    }\n\n    return buffer;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute per-cell scores for the activity of a feature set.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {Uint8Array|Uint8WasmArray|TypedArray|Array} features - An array of length equal to the number of rows in `x`, indicating which features belong to the set.\n * A non-zero value for any entry indicates that the corresponding row of `x` is part of the feature set.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {boolean} [options.scale=false] - Whether to scale the expression matrix to unit variance for each feature before computing the per-feature weights.\n * Setting to `true` improves robustness (or reduces sensitivity) to the behavior of highly variable features in the set.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {object} Object containing:\n *\n * - `weights`, a Float64Array containing per-gene weights for each feature in the set.\n * - `scores`, a Float64Array containing the per-cell scores for each column of `x`.\n */\nexport function scoreFeatureSet(x, features, { block = null, scale = false, numberOfThreads = null } = {}) {\n    let temp;\n    let output = {};\n    let feature_data, block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        // Setting up the features.\n        if (features.length !== x.numberOfRows()) {\n            throw new Error(\"Uint8Array 'features' must be of length equal to the number of rows in 'x'\");\n        }\n        feature_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n\n        // Setting up the blocks.\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        temp = wasm.call(module => module.score_feature_set(x.matrix, feature_data.offset, use_blocks, bptr, scale, nthreads));\n        output.weights = temp.weights().slice();\n        output.scores = temp.scores().slice();\n\n    } finally {\n        utils.free(block_data);\n        utils.free(feature_data);\n        if (temp) {\n            temp.delete();\n        }\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\n\nfunction checkFillness2(group, summary, fillable, copy, fillcheck, getfun) {\n    return utils.checkFillness(\n        fillable, \n        copy, \n        fillcheck.filled || fillcheck.details[group][summary] || false, \n        () => { fillcheck.details[group][summary] = true }, \n        getfun  \n    );\n}\n\nfunction intifySummary(summary) {\n    if (typeof summary == \"number\") {\n        return summary; // for back-compatibility with numeric summaries.\n    }\n    let output;\n    switch (summary) {\n        case \"minimum\": \n            output = 0;\n            break;\n        case \"mean\": \n            output = 1;\n            break;\n        case \"median\":\n            output = 2;\n            break;\n        case \"maximum\": \n            output = 3;\n            break;\n        case \"min-rank\":\n            output = 4;\n            break;\n        default:\n            throw new Error(\"unknown summary type '\" + summary + \"'\");\n    }\n    return output;\n}\n\n/**\n * Wrapper around the marker scoring results on the Wasm heap, typically produced by {@linkcode scoreMarkers}.\n * @hideconstructor\n */\nexport class ScoreMarkersResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledDetected;\n    #filledCohen;\n    #filledLfc;\n    #filledAuc;\n    #filledDeltaDetected;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        let n = this.numberOfGroups();\n        let b = this.numberOfBlocks();\n\n        function createBlockedStatsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = utils.spawnArray(b + 1, filled);\n                }\n            }\n            return output;\n        }\n\n        this.#filledMeans = createBlockedStatsFilled(filled);\n        this.#filledDetected = createBlockedStatsFilled(filled);\n\n        function createEffectsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = {};\n                }\n            }\n            return output;\n        }\n\n        this.#filledCohen = createEffectsFilled(filled); \n        this.#filledLfc = createEffectsFilled(filled); \n        this.#filledAuc = createEffectsFilled(filled); \n        this.#filledDeltaDetected = createEffectsFilled(filled); \n\n        return;\n    }\n\n    #extractBlockedStat(group, block, copy, fillable, fillcheck, method) {\n        let index = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            index = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck.filled || fillcheck.details[group][index] || false, \n            () => { fillcheck.details[group][index] = true }, \n            COPY => utils.possibleCopy(this.#results[method](group, block), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks used to compute the results.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {number} Number of groups in the results.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the proportion of cells with detectable expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledDetected, \"detected\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the Cohen's d values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized Cohen's d for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    cohen(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledCohen,\n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.cohen(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * AUCs are only computed if `computeAuc = true` in {@linkcode scoreMarkers}.\n     * If `false`, this method will throw an error.\n     *\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the AUCs of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized AUC for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    auc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledAuc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.auc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the log-fold changes of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized log-fold change for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    lfc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledLfc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.lfc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the delta-detected values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized delta-detected for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    deltaDetected(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledDeltaDetected, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.delta_detected(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Score genes as potential markers for each group of cells.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform comparisons within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {number} [options.lfcThreshold=0] - Log-fold change threshold to use for computing Cohen's d and AUC.\n * Large positive values favor markers with large log-fold changes over those with low variance.\n * @param {boolean} [options.computeAuc=true] - Whether to compute the AUCs as an effect size.\n * This can be set to `false` for greater speed and memory efficiency.\n * @param {boolean} [options.computeMedian=false] - Whether to compute the median effect sizes across all pairwise comparisons for each group.\n * This can be used as a more robust/less sensitive alternative to the mean.\n * @param {boolean} [options.computeMaximum=false] - Whether to compute the maximum effect size across all pairwise comparisons for each group.\n * This could be used to find uniquely downregulated genes.\n *\n * @return {ScoreMarkersResults} Object containing the marker scoring results.\n */\nexport function scoreMarkers(x, groups, { block = null, numberOfThreads = null, lfcThreshold = 0, computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    var output;\n    var block_data;\n    var group_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.score_markers(x.matrix, group_data.offset, use_blocks, bptr, lfcThreshold, computeAuc, computeMedian, computeMaximum, nthreads),\n            ScoreMarkersResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(group_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ScoreMarkersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfGroups - Number of groups for which to store marker detection statistics.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.computeAuc=true] - Whether to allocate memory for storing AUCs.\n * @param {boolean} [options.computeMedian=false] - Whether to allocate memory for storing median effect sizes.\n * @param {boolean} [options.computeMaximum=false] - Whether to allocate memory for storing maximum effect sizes.\n *\n * @return {ScoreMarkersResults} Object with memory allocated to store marker statistics, but not containing any actual values.\n */\nexport function emptyScoreMarkersResults(numberOfGenes, numberOfGroups, numberOfBlocks, { computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    return gc.call(\n        module => new module.ScoreMarkers_Results(numberOfGenes, numberOfGroups, numberOfBlocks, computeAuc, computeMedian, computeMaximum),\n        ScoreMarkersResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport { MultiMatrix } from \"./MultiMatrix.js\";\n\n/**\n * Slice a {@linkplain ScranMatrix} by its rows.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Row indices to extract.\n * All indices must be non-negative integers less than `mat.numberOfRows()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A ScranMatrix containing the subset of rows from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetRows(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.row_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Slice a ScranMatrix by its columns.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Column indices to extract.\n * Al indices must be a non-negative integer less than `mat.numberOfColumns()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A new ScranMatrix containing the subset of columns from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetColumns(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.column_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Split a {@linkplain ScranMatrix} by row.\n *\n * @param {ScranMatrix} matrix - A ScranMatrix object.\n * @param {object} split - Object specifying how rows should be split.\n * Each value should be an Array/TypedArray of 0-based row indices.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.singleNull=false] - Whether `null` should be returned if `split` only contains one level and all rows are represented exactly once.\n * This can be used to avoid the creation of a redundant {@linkplain ScranMatrix} object.\n * @param {boolean} [options.createMultiMatrix=false] - Whether the output should be returned as a {@linkplain MultiMatrix}.\n *\n * @return {object|MultiMatrix} Object with the same keys as `split` where each value is a ScranMatrix for the corresponding subset of rows.\n * Alternatively, this is wrapped in a MultiMatrix if `createMultiMatrix = true`.\n */\nexport function splitRows(matrix, split, { singleNull = false, createMultiMatrix = false } = {}) { \n    let output = {};\n    let tkeys = Object.keys(split);\n\n    if (tkeys.length == 1) {\n        let chosen = split[tkeys[0]];\n        let consec = (chosen.length == matrix.numberOfRows());\n        if (consec) {\n            for (var i = 0; i < chosen.length; i++) {\n                if (i != chosen[i]) {\n                    consec = false;\n                    break;\n                }\n            }\n        }\n\n        if (consec) {\n            if (singleNull) {\n                return null;\n            } else {\n                output[tkeys[0]] = matrix.clone();\n                return output;\n            }\n        }\n    }\n\n    let stuff;\n    try {\n        for (const k of tkeys) {\n            output[k] = subsetRows(matrix, split[k]);\n        }\n\n        // Sticking this inside the trycatch, so that\n        // memory is released if the constructor fails. \n        if (createMultiMatrix) {\n            stuff = new MultiMatrix({ store: output });\n        }\n    } catch (e) {\n        for (const v of Object.values(output)) {\n            v.free();\n        }\n        throw e;\n    }\n\n    if (createMultiMatrix) {\n        return stuff;\n    } else {\n        return output;\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellAdtQcMetricsResults } from \"./perCellAdtQcMetrics.js\";\n\n/**\n * Wrapper class for the ADT-based QC filtering results, produced by {@linkcode suggestAdtQcFilters}.\n * @hideconstructor\n */\nexport class SuggestAdtQcFiltersResults {\n    #results;\n    #id;\n\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected ADTs for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the total counts for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestAdtQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics from the ADT count matrix.\n *\n * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {number} [options.minDetectedDrop=0.1] - Minimum relative drop in the number of detected ADTs before a cell is to be considered a low-quality cell.\n * By default, cells must exhibit at least a 10% decrease from the median before filtering is applied.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestAdtQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestAdtQcFilters(metrics, { numberOfMADs = 3, minDetectedDrop = 0.1, block = null } = {}) {\n    if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics, \n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_adt_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs, minDetectedDrop),\n            SuggestAdtQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestAdtQcFiltersResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode filterCells} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestAdtQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestAdtQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestAdtQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestAdtQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellCrisprQcMetricsResults } from \"./perCellCrisprQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestCrisprQcFilters}.\n * @hideconstructor\n */\nexport class SuggestCrisprQcFiltersResults {\n    #id;\n    #results;\n\n    #filledMaxCount;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMaxCount = filled;\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the maximum count in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsMaxCount({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxCount, \n            () => { this.#filledMaxCount = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_max_count(), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestCrisprQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics for CRISPR guide counts.\n *\n * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestCrisprQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestCrisprQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_crispr_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestCrisprQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestCrisprQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestCrisprQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestCrisprQcFiltersResults(numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestCrisprQcFilters_Results(numberOfBlocks),\n        SuggestCrisprQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellRnaQcMetricsResults } from \"./perCellRnaQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestRnaQcFilters}.\n * @hideconstructor\n */\nexport class SuggestRnaQcFiltersResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the sums for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected genes for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the proportions for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestRnaQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics computed from an RNA count matrix.\n *\n * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestRnaQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestRnaQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_rna_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestRnaQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestRnaQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestRnaQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestRnaQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestRnaQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestRnaQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import { buffer, wasmArraySpace, maximumThreads } from \"./wasm.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Helper function to create a Uint8WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Uint8WasmArray} Uint8WasmArray on the **scran.js** Wasm heap.\n */\nexport function createUint8WasmArray(length) {\n    return wa.createUint8WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Int32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Int32WasmArray} Int32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createInt32WasmArray(length) {\n    return wa.createInt32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a BigUint64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {BigUint64WasmArray} BigUint64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createBigUint64WasmArray (length) {\n    return wa.createBigUint64WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float64WasmArray} Float64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat64WasmArray(length) {\n    return wa.createFloat64WasmArray(wasmArraySpace(), length);\n}\n\nexport function wasmifyArray(x, expected) {\n    if (x instanceof wa.WasmArray) {\n        if (expected !== null && expected != x.constructor.className) {\n            throw new Error(\"expected '\" + expected + \"', got '\" + x.constructor.className + \"'\");\n        }\n\n        if (x.space === wasmArraySpace()) {\n            // Creating a view. This ensures that callers can always call\n            // free() on the output of this function without worrying about\n            // whether they are breaking something else that was using 'x'.\n            if (x.owner === null) {\n                return x.view();\n            } else {\n                return x; // it's already a view, so we just pass it along.\n            }\n        } else {\n            // If it's a different space, then we have to make a copy.\n            return x.clone(wasmArraySpace());\n        }\n    }\n\n    let y = null;\n    if (expected !== null) {\n        y = wa.convertToWasmArray(wasmArraySpace(), x, wa.stringToClass(expected));\n    } else {\n        y = wa.convertToWasmArray(wasmArraySpace(), x);\n    }\n\n    return y;\n}\n\nexport function chooseNumberOfThreads(threads) {\n    if (threads == null) {\n        return maximumThreads();\n    } else {\n        return threads;\n    }\n}\n\n/**\n * Try to free a **scran.js** object's memory (typically involving some memory allocated on the Wasm heap) by calling its `free` method.\n *\n * @param {?object} x - Instance of a **scran.js** or **wasmarrays.js** class to be freed.\n * May also be `null` or undefined.\n * \n * @return The output of `x.free()` - unless `x` is undefined or `null`, in which case nothing is performed.\n */\nexport function free(x) {\n    if (typeof x == \"undefined\" || x == null) {\n        return;\n    }\n    return x.free();\n}\n\nexport function extractXY(ncells, coordinates) {\n    let x = new Float64Array(ncells);\n    let y = new Float64Array(ncells);\n\n    for (var i = 0; i < ncells; i++) {\n        x[i] = coordinates[2 * i];\n        y[i] = coordinates[2 * i + 1];\n    }\n\n    return { \"x\": x, \"y\": y };\n}\n\n/**\n * Possibly copy an array out of the Wasm heap, avoiding potential invalidation at the cost of some efficiency.\n *\n * @param {TypedArray} x - Array of data, possibly on the **scran.js** Wasm heap.\n * @param {(string|boolean)} copy - Copying mode to use.\n *\n * @return {TypedArray|WasmArray} The return value depends on the value of `copy`:\n * - If `copy = true`, a TypedArray copy of `x` is created with `x.slice()` and returned.\n *   This is a good default to avoid invalidation of TypedArray views on the heap upon reallocation, by creating a Javascript-owned copy for downstream use.\n * - If `copy = false`, `x` is returned directly.\n *   This avoids making any copy but runs the risk of invalidation when the Wasm heap is resized;\n *   it should only be used when no further Wasm allocations are performed within the lifetime of `x`.\n * - If `copy = \"view\"`, a WasmArray view is created from `x` and returned.\n *   This avoids any copy and is robust to invalidation but requires an extra `WasmArray.array()` call to create a TypedArray.\n */\nexport function possibleCopy(x, copy) {\n    if (copy === \"view\") {\n        if (x.buffer !== buffer()) {\n            throw new Error(\"cannot use copy = \\\"view\\\" for non-Wasm TypedArrays\");\n        }\n\n        let view_class = x.constructor.name.replace(\"Array\", \"WasmArray\");\n\n        // This function should only be used for objects generated in the\n        // buffer owned by scran.js, so we can assume that x's space is the\n        // same as that of the wasmArraySpace().\n        return wa.createWasmArrayView(wasmArraySpace(), x.length, x.byteOffset, wa.stringToClass(view_class));\n\n    } else if (copy) {\n        return x.slice();\n\n    } else {\n        return x;\n    }\n}\n\nexport function matchOptions(name, value, choices) {\n    if (choices.indexOf(value) == -1) {\n        throw new Error(\"'\" + name + \"=' should be one of '\" + choices.join(\"', '\") + \"'\");\n    }\n}\n\nexport function spawnArray(n, fill) {\n    let output = new Array(n);\n    output.fill(fill);\n    return output;\n}\n\nexport function checkFillness(fill, copy, check, setFilledFun, getFun) {\n    if (!check) {\n        if (fill) {\n            setFilledFun();\n            if (copy) {\n                copy = false;\n            }\n        } else {\n            return null;\n        }\n    }\n    return getFun(copy);\n}\n","import loadScran from \"./wasm/scran.js\";\nimport { register } from \"wasmarrays.js\";\nimport * as afile from \"./abstract/file.js\";\n\nconst cache = {};\n\n/**\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfThreads=4] - Number of threads to use for calculations.\n * This will spin up the requested number of Web Workers during module initialization.\n * @param {boolean} [options.localFile=false] - Whether or not to look for the Wasm and worker scripts locally.\n * This should only be `true` when using old versions of Node.js where file URLs are not supported, \n * and is ignored completely outside of Node.js contexts.\n *\n * @return {boolean}\n * The Wasm bindings are initialized and `true` is returned.\n * If the bindings were already initialized (e.g., by a previous call), nothing is done and `false` is returned.\n */\nexport async function initialize({ numberOfThreads = 4, localFile = false } = {}) {\n    if (\"module\" in cache) {\n        return false;\n    }\n\n    let options = {\n        scran_custom_nthreads: numberOfThreads\n    };\n\n    if (localFile) {                                                                /** NODE ONLY **/  \n        options.locateFile = (x) => import.meta.url.substring(7) + \"/../wasm/\" + x; /** NODE ONLY **/\n    }                                                                               /** NODE ONLY **/\n\n    cache.module = await loadScran(options);\n    cache.space = register(cache.module);\n\n    return true;\n}\n\n/**\n * Maximum number of threads available for computation.\n * This depends on the value specified during module initialization in {@linkcode initialize}. \n *\n * @return {number} Maximum number of available threads.\n */\nexport function maximumThreads() {\n    return cache.module.scran_custom_nthreads;\n}\n\nexport function call(func) {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n\n    var output;\n    try {\n        output = func(cache.module);    \n    } catch (e) {\n        if (typeof e == \"number\") {\n            throw new Error(cache.module.get_error_message(e));\n        } else {\n            throw e;\n        }\n    }\n    return output;\n}\n\nexport function buffer() {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n    return cache.module.wasmMemory.buffer;\n}\n\n/**\n * @return {number} Integer containing the **wasmarrays.js** identifier for **scran.js**'s memory space.\n * This can be used with `createWasmArray()` and related functions from **wasmarrays.js**.\n */\nexport function wasmArraySpace() {\n    return cache.space;\n}\n\n/**\n * @return All worker threads are terminated and the module is deleted from the cache.\n * This is useful for cleaning up at the end of the analysis,\n * otherwise the workers will be shut done ungracefully on program exit.\n */\nexport function terminate() {\n    cache.module.PThread.terminateAllThreads();\n    delete cache.module;\n    return;\n}\n\n/**\n * @return {number} The current size of the Wasm heap, typically used for diagnostic reporting.\n */\nexport function heapSize() {\n    return buffer().byteLength;\n}\n","import { buffer } from \"./globals.js\";\nimport { WasmArray } from \"./base.js\";\n\n/** \n * Wrapper around an unsigned 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint8WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint8WasmArray extends WasmArray {\n    /**\n     * @return A Uint8Array view of the allocated memory.\n     */\n    array() {\n        return new Uint8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint8WasmArray\";\n    // We're returning the name explicitly here instead of relying\n    // on the constructor.name trick, as the name of the class can\n    // change during minification.\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around a signed 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt8WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int8WasmArray extends WasmArray {\n    /**\n     * @return An Int8Array view of the allocated memory.\n     */\n    array() {\n        return new Int8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Int8WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around an unsigned 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint16WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint16WasmArray extends WasmArray {\n    /**\n     * @return A Uint16Array view of the allocated memory.\n     */\n    array() {\n        return new Uint16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint16WasmArray\";\n\n    /**\n     * Size of the each data value, in bytes.\n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage a signed 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt16WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int16WasmArray extends WasmArray {\n    /**\n     * @return An `Int16Array` view of the allocated memory.\n     */\n    array() {\n        return new Int16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Int16WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage an unsigned 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint32WasmArray extends WasmArray {\n    /**\n     * @return A Uint32Array view of the allocated memory.\n     */\n    array() {\n        return new Uint32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a signed 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int32WasmArray extends WasmArray {\n    /**\n     * @return An Int32Array view of the allocated memory.\n     */\n    array() {\n        return new Int32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Int32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage an unsigned 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigUint64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class BigUint64WasmArray extends WasmArray {\n    /**\n     * @return A BigUint64Array view of the allocated memory.\n     */\n    array() {\n        return new BigUint64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"BigUint64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a signed 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigInt64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class BigInt64WasmArray extends WasmArray {\n    /**\n     * @return An BigInt64Array view of the allocated memory.\n     */\n    array() {\n        return new BigInt64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"BigInt64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a 32-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Float32WasmArray extends WasmArray {\n    /**\n     * @return A Float32Array view of the allocated memory.\n     */\n    array() {\n        return new Float32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Float32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a 64-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Float64WasmArray extends WasmArray {\n    /**\n     * @return A Float64Array view of the allocated memory.\n     */\n    array() {\n        return new Float64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Float64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\nconst choices = {\n    \"Uint8WasmArray\": Uint8WasmArray,\n    \"Int8WasmArray\": Int8WasmArray,\n    \"Uint16WasmArray\": Uint16WasmArray,\n    \"Int16WasmArray\": Int16WasmArray,\n    \"Uint32WasmArray\": Uint32WasmArray,\n    \"Int32WasmArray\": Int32WasmArray,\n    \"BigUint64WasmArray\": BigUint64WasmArray,\n    \"BigInt64WasmArray\": BigInt64WasmArray,\n    \"Float32WasmArray\": Float32WasmArray,\n    \"Float64WasmArray\": Float64WasmArray\n};\n\n/**\n * Retrieve class from its name.\n *\n * @param {string} name - Name of the {@linkplain WasmArray} class.\n *\n * @return Class object corresponding to `name`.\n */\nexport function stringToClass(name) {\n    if (!(name in choices)){ \n        throw new Error(\"unknown WasmArray class '\" + name + \"'\");\n    }\n    return choices[name];\n}\n","import { allocate } from \"./globals.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return Instance of a {@linkplain WasmArray} subclass.\n */\nexport function createWasmArray(space, length, arrayClass) {\n    return allocate(space, length, arrayClass);\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint8WasmArray}.\n */\nexport function createUint8WasmArray(space, length) { \n    return createWasmArray(space, length, Uint8WasmArray); \n}\n\n/**\n * Create a {@linkplain Int8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int8WasmArray}.\n */\nexport function createInt8WasmArray(space, length) { \n    return createWasmArray(space, length, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint16WasmArray}.\n */\nexport function createUint16WasmArray(space, length) { \n    return createWasmArray(space, length, Uint16WasmArray); \n}\n\n/**\n * Create a {@linkplain Int16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int16WasmArray}.\n */\nexport function createInt16WasmArray(space, length) { \n    return createWasmArray(space, length, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint32WasmArray}.\n */\nexport function createUint32WasmArray(space, length) { \n    return createWasmArray(space, length, Uint32WasmArray); \n}\n\n/**\n * Create a {@linkplain Int32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int32WasmArray}.\n */\nexport function createInt32WasmArray(space, length) { \n    return createWasmArray(space, length, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain BigUint64WasmArray}.\n */\nexport function createBigUint64WasmArray(space, length) { \n    return createWasmArray(space, length, BigUint64WasmArray); \n}\n\n/**\n * Create a {@linkplain BigInt64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain BigInt64WasmArray}.\n */\nexport function createBigInt64WasmArray(space, length) { \n    return createWasmArray(space, length, BigInt64WasmArray); \n}\n\n/**\n * Create a {@linkplain Float32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Float32WasmArray}.\n */\nexport function createFloat32WasmArray(space, length) { \n    return createWasmArray(space, length, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Float64WasmArray}.\n */\nexport function createFloat64WasmArray(space, length) { \n    return createWasmArray(space, length, Float64WasmArray); \n}\n","import { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} view of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * This may need to be a certain multiple of 2, 4 or 8, depending on `arrayClass`.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return Instance of a {@linkplain WasmArray} subclass containing a view on the heap.\n */\nexport function createWasmArrayView(space, length, offset, arrayClass) {\n    return new arrayClass(space, -1, length, offset, {});\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint8WasmArray} view.\n */\nexport function createUint8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint8WasmArray); \n}\n\n/**\n * Create an {@linkplain Int8WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int8WasmArray} view.\n */\nexport function createInt8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint16WasmArray} view.\n */\nexport function createUint16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint16WasmArray); \n}\n\n/**\n * Create an {@linkplain Int16WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int16WasmArray} view.\n */\nexport function createInt16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint32WasmArray} view.\n */\nexport function createUint32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint32WasmArray); \n}\n\n/**\n * Create an {@linkplain Int32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int32WasmArray} view.\n */\nexport function createInt32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain BigUint64WasmArray} view.\n */\nexport function createBigUint64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigUint64WasmArray); \n}\n\n/**\n * Create an {@linkplain BigInt64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain BigInt64WasmArray} view.\n */\nexport function createBigInt64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigInt64WasmArray); \n}\n\n\n/**\n * Create a {@linkplain Float32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Float32WasmArray} view.\n */\nexport function createFloat32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Float64WasmArray} view.\n */\nexport function createFloat64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float64WasmArray); \n}\n"],"names":["module","exports","s","a","o","h","u","r","e","l","n","Error","code","i","call","length","t","d","c","p","encode","f","getTypeOf","charCodeAt","push","charAt","join","decode","substr","replace","uint8array","Uint8Array","Array","indexOf","this","compressedSize","uncompressedSize","crc32","compression","compressedContent","prototype","getContentWorker","Promise","resolve","pipe","uncompressWorker","on","streamInfo","data_length","getCompressedWorker","withStreamInfo","createWorkerFrom","compressWorker","STORE","magic","DEFLATE","base64","binary","dir","createFolders","date","compressionOptions","comment","unixPermissions","dosPermissions","lie","Uint16Array","Uint32Array","_pako","_pakoAction","_pakoOptions","meta","inherits","processChunk","_createPako","transformTo","data","flush","cleanUp","raw","level","onData","pako","A","String","fromCharCode","file","O","utf8encode","I","name","m","_","g","b","v","y","w","k","x","S","z","C","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCFullYear","getUTCMonth","getUTCDate","B","E","fileRecord","R","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","bytesWritten","zipComment","zipPlatform","encodeFileName","streamFiles","accumulate","contentBuffer","dirRecords","currentSourceOffset","entriesCount","currentFile","_sources","percent","openedSource","closedSource","DATA_DESCRIPTOR","shift","CENTRAL_DIRECTORY_END","prepareNextSource","previous","isPaused","pause","resume","registerPrevious","end","error","generatedError","lock","generateWorker","platform","forEach","options","_compressWorker","arguments","files","Object","create","root","clone","loadAsync","support","defaults","version","external","decompressed","extend","checkCRC32","optimizedBinaryString","decodeFileName","utf8decode","isNode","isStream","reject","prepareContent","then","load","all","fileNameStr","fileCommentStr","unsafeOriginalName","_upstreamEnded","_bindStream","_stream","Readable","_helper","emit","_read","Buffer","newBufferFrom","from","allocBuffer","alloc","fill","isBuffer","Date","toUpperCase","parseInt","slice","substring","lastIndexOf","toString","filter","test","folder","remove","generate","generateInternalStream","type","mimeType","toLowerCase","checkSupport","generateAsync","generateNodeStream","toNodejsStream","stream","byteAt","zero","lastIndexOfSignature","readAndCheckSignature","readData","checkOffset","index","checkIndex","setIndex","skip","readInt","readString","readDate","UTC","subarray","ZIP64_CENTRAL_DIRECTORY_LOCATOR","ZIP64_CENTRAL_DIRECTORY_END","destType","propName","dataIsReady","max","_tickScheduled","_tickAndRepeat","delay","isFinished","_tick","Math","min","extraStreamInfo","isLocked","_listeners","mergeStreamInfo","hasOwnProperty","nodestream","_internalType","_outputType","_mimeType","newBlob","concat","apply","set","_worker","objectMode","array","string","arraybuffer","ArrayBuffer","nodebuffer","blob","Blob","size","self","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","leftOver","applyFromCharCode","Utf8DecodeWorker","Utf8EncodeWorker","stringifyByChunk","stringifyByChar","applyCanBeUsed","floor","buffer","byteLength","split","pop","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","setImmediate","FileReader","onload","target","result","onerror","readAsArrayBuffer","setimmediate","loadOptions","checkSignature","reader","isSignature","readBlockEndOfCentral","diskNumber","diskWithCentralDirStart","centralDirRecordsOnThisDisk","centralDirRecords","centralDirSize","centralDirOffset","zipCommentLength","readBlockZip64EndOfCentral","zip64EndOfCentralSize","zip64ExtensibleData","id","value","readBlockZip64EndOfCentralLocator","diskWithZip64CentralDirStart","relativeOffsetEndOfZip64CentralDir","disksCount","readLocalFiles","localHeaderOffset","readLocalPart","handleUTF8","processAttributes","readCentralDir","zip64","readCentralPart","readEndOfCentral","abs","prepareReader","isEncrypted","bitFlag","useUTF8","fileNameLength","fileName","compressionMethod","versionMadeBy","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","readExtraFields","parseZIP64ExtraField","fileComment","extraFields","findExtraFieldUnicodePath","findExtraFieldUnicodeComment","_data","_dataBinary","internalStream","_decompressWorker","async","nodeStream","MutationObserver","WebKitMutationObserver","document","createTextNode","observe","characterData","MessageChannel","createElement","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","port1","onmessage","port2","postMessage","global","window","TypeError","state","queue","outcome","promise","onFulfilled","callFulfilled","otherCallFulfilled","onRejected","callRejected","otherCallRejected","status","finally","constructor","catch","race","immediate","assign","method","chunkSize","windowBits","memLevel","strategy","to","gzip","err","msg","ended","chunks","strm","avail_out","deflateInit2","header","deflateSetHeader","dictionary","string2buf","deflateSetDictionary","_dict_set","input","next_in","avail_in","output","Buf8","next_out","deflate","onEnd","buf2binstring","shrinkBuf","deflateEnd","flattenChunks","Deflate","deflateRaw","inflateInit2","Z_OK","inflateGetHeader","Z_FINISH","Z_NO_FLUSH","binstring2buf","inflate","Z_NEED_DICT","inflateSetDictionary","Z_BUF_ERROR","Z_STREAM_END","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","inflateEnd","Inflate","inflateRaw","ungzip","Int32Array","setTyped","Buf16","Buf32","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_BLOCK","Z_TREES","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","T","D","F","pending","pending_buf","pending_out","total_out","N","_tr_flush_block","block_start","strstart","U","P","L","max_chain_length","prev_length","nice_match","w_size","w_mask","prev","good_match","lookahead","match_start","j","window_size","hash_size","head","wrap","adler","total_in","insert","ins_h","hash_shift","hash_mask","Z","match_length","_tr_tally","max_lazy_match","last_lit","W","prev_match","match_available","M","good_length","max_lazy","nice_length","max_chain","func","H","pending_buf_size","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","heap","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","G","data_type","_tr_init","K","Y","deflateInit","deflateReset","deflateResetKeep","text","hcrc","extra","time","os","_tr_align","_tr_stored_block","deflateInfo","xflags","extra_len","done","dmax","wsize","whave","wnext","hold","bits","lencode","distcode","lenbits","distbits","mode","sane","last","havedict","flags","check","total","wbits","offset","ncode","nlen","ndist","have","next","lens","work","lendyn","distdyn","back","was","inflateReset","inflateReset2","inflateResetKeep","inflateInit","inflateInfo","static_tree","extra_bits","extra_base","elems","max_length","has_stree","dyn_tree","max_code","stat_desc","X","V","q","J","getPrototypeOf","process","nextTick","importScripts","random","addEventListener","attachEvent","Function","callback","args","clearImmediate","source","define","IS_PAPA_WORKER","parse","dynamicTyping","dynamicTypingFunction","transform","worker","WORKERS_SUPPORTED","URL","webkitURL","BLOB_URL","createObjectURL","Worker","userStep","step","userChunk","chunk","userComplete","complete","userError","config","workerId","NODE_STREAM_INPUT","download","readable","read","File","unparse","delimiter","BAD_DELIMITERS","quotes","isArray","skipEmptyLines","newline","quoteChar","columns","escapeChar","escapeFormulae","RegExp","Q","JSON","keys","fields","trim","stringify","RECORD_SEP","UNIT_SEP","BYTE_ORDER_MARK","LocalChunkSize","RemoteChunkSize","DefaultDelimiter","Parser","ParserHandle","NetworkStreamer","FileStreamer","StringStreamer","ReadableStreamStreamer","jQuery","fn","each","prop","attr","inputElem","instanceConfig","before","action","reason","splice","_handle","_finished","_completed","_halted","_input","_baseIndex","_partialLine","_rowCount","_start","_nextChunk","isFirstChunk","_completeResults","errors","streamer","_config","parseChunk","beforeFirstChunk","paused","aborted","cursor","preview","results","WORKER_ID","finished","_sendError","_readChunk","_chunkLoaded","XMLHttpRequest","withCredentials","_chunkError","open","downloadRequestBody","downloadRequestHeaders","setRequestHeader","send","message","readyState","responseText","getResponseHeader","statusText","webkitSlice","mozSlice","FileReaderSync","readAsText","encoding","_streamData","_streamEnd","_streamError","_checkIsFinished","_streamCleanUp","removeListener","pow","abort","transformHeader","map","parseFloat","row","comments","successful","bestDelimiter","delimitersToGuess","getCharIndex","fastMode","includes","linebreak","truncated","terminate","factory","randomColor","seed","colorDictionary","loadColorBounds","colorRanges","undefined","stringToInteger","count","totalColors","colors","color","setFormat","pickHue","pickSaturation","pickBrightness","hue","randomWithin","hueRange","getRealHueRange","getHueRange","luminosity","saturationRange","getSaturationRange","sMin","sMax","bMin","getMinimumBrightness","bMax","hsv","format","HSVtoHSL","hsl","hslColor","alpha","HSVtoRGB","rgbColor","HSVtoHex","lowerBounds","getColorInfo","s1","v1","s2","v2","colorInput","number","match","HexToHSB","colorName","range","golden_ratio","rnd","rgb","componentToHex","hex","defineColor","brightnessRange","h_i","red","green","blue","cMax","delta","saturation","round","Number","MAX_SAFE_INTEGER","colorHue","isNaN","_arrayLikeToArray","arr","len","arr2","_arrayWithHoles","_arrayWithoutHoles","_classCheckPrivateStaticAccess","receiver","classConstructor","_classCheckPrivateStaticFieldDescriptor","descriptor","_classPrivateMethodGet","privateSet","has","_classPrivateMethodInitSpec","obj","add","_classStaticPrivateFieldSpecGet","_classStaticPrivateFieldSpecSet","_classStaticPrivateMethodGet","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","_e","normalCompletion","didErr","_e2","_iterableToArray","iter","_iterableToArrayLimit","_i","_s","_x","_r","_arr","_n","_d","_nonIterableRest","_nonIterableSpread","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread2","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_toConsumableArray","_unsupportedIterableToArray","minLen","freeCache","scran","changedParametersIllegal","xskip","yskip","isView","changedParameters","xnull","ynull","xarr","yarr","xkeys","ykeys","sort","_xkeys","allocateCachedArray","cache","reallocate","candidate","className","owner","free","findValidUpstreamStates","states","to_use","_i2","_Object$entries","entries","_Object$entries$_i","valid","defaultDownload","_defaultDownload","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","resp","_context","fetch","sent","ok","t0","arrayBuffer","t1","abrupt","stop","SimpleFile","_ref$name","_classCallCheck","_classPrivateFieldInitSpec","_mode","writable","_buffer","_file","_name","_classPrivateFieldSet","_createClass","_ref2$copy","copy","_classPrivateFieldGet","_ref3$copy","guess_compression","astream","merge_bytes","leftovers","decoder","_step","_iterator","combined","_step2","_iterator2","stream_callback","_x2","_x3","_x4","_x5","_stream_callback","afile","content","gz","readLines2","_x6","_readLines","_callee2","_ref4","_ref4$compression","_ref4$chunkSize","dec","lines","_args2","_context2","TextDecoder","current","RAW_SUBSET_OVERRIDE","_parameters","WeakMap","_cache","_abbreviated","_preserve_dataset_cache","_configureIndices","WeakSet","InputsState","parameters","abbreviated","changed","utils","matrix","raw_matrix","block_ids","raw_block_ids","multi_block_ids","genes","row_ids","annotations","block_levels","_this$constructor","_objectSpread","subset","_cloneSubset","datasets","_ref$copy","inferred_rna_types","rn","rowNames","row_names","forceTaxonomy","columnNames","column","_compute","block_factor","tmp_abbreviated","val","_this$constructor2","details","abbreviate","load_and_cache","block_and_cache","subset_and_cache","indices","max_index","fetchCountMatrix","numberOfColumns","keep","harvest_subset_indices","_ref2","_ref2$onOriginal","onOriginal","_configureIndices2","_ref3","_ref3$onOriginal","new_cache","_i3","_arr2","new_params","fetchParameters","values","ranges","undoSubset","known_modalities","bind_single_modality","modality","loaded","gnames","mats","get","primary_id","primary_ids","merged","features","bioc","bind_datasets","names","blocks","common_modes","_step3","mod","okay","_iterator3","_i4","_common_modes","annos","cells","ncells","nice_barr","$setColumn","rename_dataset","single","available","_step4","_iterator4","load_datasets","_load_datasets","preserve_dataset_cache","_i9","_names","_iterator8","_step8","_iterator9","_step9","_x15","t2","t3","invalid_block_id","raw_annotations","hasColumn","field","anno","allowed","Set","_step5","_iterator5","bids","keep2","_step6","_iterator6","_x7","_x8","_load_and_cache","_callee3","new_datasets","res","_context3","multi_block_levels","anno_batch","converted","placeholder","ids","levels","view","raw_block_levels","new_annotations","new_matrix","new_block_ids","new_block_levels","_step7","_iterator7","baseUrl","_inputs","_automatic","_acquire_reference","RnaQualityControlState","inputs","inputs_module","metrics","filters","metrics_buffer","discard_buffer","species","mito_prefix","nmads","automatic","use_reference_mito","gene_id_column","gene_id_type","def","gene_id_column2","species2","gene_id_type2","guesses","backcomp","gene_info","subsets","lists","sub_arr","lower_mito","mat","block","discard","use_mito_default","guessRnaFeatureTypes","configureFeatureParameters","fetchFeatureAnnotations","numberOfRows","_acquire_reference2","startsWith","fetchBlock","numberOfMADs","numberOfCells","best_key","best","confidence","_mito_lists","fun","_downloadFun","_acquire_reference3","feature_type","mito_lists","contents","rutils","finish","_defineProperty","AdtQualityControlState","tag_id_column","igg_prefix","min_detected_drop","tag_info","lower_igg","minDetectedDrop","counter","latest","CrisprQualityControlState","find_usable_upstream_states","qc_states","in_use","tmp","_qc_states","_raw_compute_matrix","_raw_compute_block","CellFilteringState","RNA","rna_qc_module","ADT","adt_qc_module","CRISPR","crispr_qc_module","block_buffer","_raw_compute_matrix2","_raw_compute_block2","use_rna","use_adt","use_crispr","first","fetchDiscards","disc_buffer","disc_arr","fetchFilteredMatrix","src","sub","bcache","subsetSums","qc","discards","sums","fetchMetrics","oarr","_qc","_filter","_raw_compute","RnaNormalizationState","qc_module","filter_module","sum_buffer","_raw_compute2","buff","fetchFilteredBlock","nutils","sizeFactors","allowZeros","AdtNormalizationState","total_buffer","sf_buffer","centered_sf_buffer","num_pcs","num_clusters","remove_bias","totals","numberOfPCs","numberOfClusters","step_name","CrisprNormalizationState","centered_buffer","handle","ghandle","createGroup","_norm","FeatureSelectionState","norm","norm_module","sorted_residuals","span","fetchNormalizedMatrix","residuals","_feat","RnaPcaState","feat","feat_module","hvg_buffer","pcs","num_hvgs","block_method","choose_hvgs","blockMethod","sorted_resids","fetchSortedResiduals","threshold_at","unsorted_resids","fetchResults","element","AdtPcaState","CrisprPcaState","find_nonzero_upstream_states","pca_states","weights","_pca_states","CombineEmbeddingsState","rna_pca_module","adt_pca_module","crispr_pca_module","combined_buffer","num_cells","total_dims","rna_weight","adt_weight","crispr_weight","approximate","_Object$values","weight_arr","collected","curpcs","fetchPCs","principalComponents","createPcsView","upstream","_combined","BatchCorrectionState","combine_module","corrected","fetchNumberOfCells","fetchNumberOfDimensions","num_neighbors","needs_correction","fetchCombined","numberOfDims","_correct","NeighborIndexState","correct","correct_module","fetchCorrected","_index","_valid","_compute_neighbors","_compute_graph","_compute_clusters","SnnGraphClusterState","neighbor_module","neighbors","graph","clusters","_valid2","membership","run_me","scheme","algorithm","multilevel_resolution","leiden_resolution","walktrap_steps","_compute_neighbors2","_compute_graph2","_compute_clusters2","fetchIndex","multiLevelResolution","leidenResolution","leidenModularityObjective","walktrapSteps","freeVersusResults","_i8","_Object$values2","_i10","_Object$values3","_i11","_Object$keys2","KmeansClusterState","initMethod","_snn_cluster","_kmeans_cluster","ChooseClusteringState","snn","kmeans","snn_module","kmeans_module","fetchClusters","_free","markers","versus","_computeVersus","left","right","matrices","_ref","_ref$cache","_ref$block","_ref$lfc_threshold","lfc_threshold","_ref$compute_auc","compute_auc","cache_info","left_small","bigg","biggversus","smal","rerun","cached","run","left_index","right_index","new_clusters","leftfound","rightfound","new_block","modmat","lfcThreshold","computeAuc","_norm_states","_choice","MarkerDetectionState","norm_states","choice","rna_norm_module","adt_norm_module","crispr_norm_module","choice_module","changed_params","_Object$entries2","_Object$entries2$_i","_ref2$cache","_ref2$block","_ref2$lfc_threshold","_ref2$compute_auc","computeVersus","_markers","_flush_prepared","_load_reference","_build_reference","CellLabellingState","markers_module","_flush_prepared2","out","references","perref","integrated","integrated_results","_Object$keys","prepared","built","sharedFeatures","auto","allowable","feats","gene_ids","ref","used_refs","_feats","marker_results","ngroups","ngenes","cluster_means","means","labels","_key","as_names","_this","human_references","mouse_references","availableReferences","_load_reference2","_build_reference2","numberOfGroups","numberOfFeatures","_Object$entries3","_Object$entries3$_i","_i5","_Object$entries4","_all_loaded","_Object$entries4$_i","_i7","_load_reference3","all_loaded","suffixes","gene_lines","ensembl","symbol","entrez","empty2null","suffix","full","chosen_ids","wa","cloneCached","registry","check_class","accepted","base","packageName","populate_list_columns","lhandle","colnames","nhandle","ndx","findAttribute","attribute","load_listData_names","curhandle","curcol","nrow","load_data_frame","rnhandle","nrhandle","rndx","NR","extract_matrix_rownames","idx","dimhandle","firsthandle","_id","_rowdata","_coldata","_counts_handle","_counts_loaded","_options","_counts","_features","_cells","_fetchPrimaryId","ExperimentHubDataset","clear","_summary","my_rd","_args","_features2","_cells2","modality_features","_previewPrimaryIds","_fetchPrimaryId2","_load","_ref3$cache","counts","perm_features","_args3","_counts2","consume","TextEncoder","bakana","primaryRnaFeatureIdColumn","_counts3","_callee5","counts_deets","_context5","_features3","_callee6","rowdata_deets","rowdata_load","rowdata_handle","rowdata","_context6","_cells3","_callee7","coldata_deets","coldata_load","coldata_handle","cd_df","_context7","coldata","ncol","curfeat","_value","_callee4","_context4","_wrapNativeSuper","Class","Map","Wrapper","construct","configurable","setPrototypeOf","_h5_file","_h5_path","_h5_flush","_raw_features","_raw_cells","_dump_summary","_instantiate","_feature_type_mapping","_primary_mapping","TenxHdf5Dataset","h5File","_dump_summary2","futils","_feature_type_mapping2","_primary_mapping2","featureTypeRnaName","featureTypeAdtName","featureTypeCrisprName","primaryAdtFeatureIdColumn","primaryCrisprFeatureIdColumn","_unserialize","_instantiate2","info","path","children","mhandle","fhandle","eutils","ftype","_load_data_frame","navigator","rownames","parsed","chandle","dhandle","_current","_type","replacement","new_columns","new_colnames","nest_meta","metadata","delim","data_frame","Float64Array","hdf5_data_frame","group","Float32Array","attributes","readAttribute","resource","console","warn","columnOrder","dimensions","main_experiment_name","extract_all_features","_extract_all_features","_callee9","extract_features","full_meta","alt","alt_meta","_context9","_ref6","_callee8","se_meta","row_path","_context8","summarized_experiment","row_data","_x19","single_cell_experiment","alternative_experiments","extract_all_assay_names","_extract_all_assay_names","_callee10","extract_assay_names","assays","_iterator10","_step10","_context10","ass","extract_logcounts","_extract_logcounts","_callee11","ghandle2","ghandle3","sf","ahandle","_context11","log","extract_assay_raw","center","extract_assay","_x9","_x10","_x11","_x12","_extract_assay","_callee12","assay","forceInteger","_iterator11","_step11","asspath","_context12","_x13","_x14","_extract_assay_raw","_callee13","assmeta","schema","is_dense","is_sparse","stuff","_stuff","_context13","hdf5_sparse_matrix","hdf5_dense_array","dataset","hdf5_delayed_array","extract_other_data","_x16","_x17","_extract_other_data","_callee14","other_path","othermeta","ofile","unpacked","_context14","json_simple_list","extract_list_data_internal","NaN","_navigator","_metadata_cache","MetadataCacheWrapper","nav","_metadata","_x18","_path","_navigator2","_reset_local_caches","AbstractArtifactdbDataset","_reset_local_caches2","modality_assay_names","fmapping","rnaExperiment","adtExperiment","crisprExperiment","mapping","altmap","alts","out_ids","_args4","exp","rnaCountAssay","adtCountAssay","crisprCountAssay","_features5","_callee15","_context15","_cells5","_callee16","col_path","_context16","column_data","_path2","_navigator3","_raw_features2","_raw_cells2","_raw_other","_options2","_reset_local_caches3","_other","AbstractArtifactdbResult","_reset_local_caches4","_summary2","_ref4$cache","redmeta","_args5","_features4","_cells4","_other2","t4","reduced_dimension_names","other_metadata","reduced_dimensions","t5","_load2","_ref5$cache","reddims","redmap","_red","dims","redcontents","realized","acquired","_k","curassay","curnormalized","normed","_args6","reducedDimensionNames","primaryAssay","isPrimaryNormalized","_features6","_callee17","_context17","_cells6","_callee18","_context18","_other3","_callee19","_context19","other_data","_matrix_file","_feature_file","_barcode_file","_dimensions","_fetch_dimensions","TenxMatrixMarketDataset","matrixFile","featureFile","barcodeFile","is_gz","endsWith","_serialize","barcode","mtx","_fetch_dimensions2","headers","rows","fname","_output","symb","types","bname","diff","conv","extractHDF5Strings","summarizeArray","_ref$limit","limit","chosen","POSITIVE_INFINITY","NEGATIVE_INFINITY","unpackText","_ref2$compression","txt","readTable2","_readTable","_ref6$compression","_ref6$delim","_ref6$chunkSize","size_left","str","ppp","promoteToNumber","as_num","opt1","opt2","create_solo_default_object","reportFeatures","rawFeatures","typeField","by_type","removeColumn","renameByModality","featureTypeMapping","splitByModality","extractSplitPrimaryIds","featureTypeDefault","primary","col","extractPrimaryIdColumn","new_default","found","multiple","findUnnamedDefault","splitScranMatrixAndFeatures","current_features","out_mat","deepCopy","type_keys","skip_subset","full_length","is_subset_noop","store","rename","extractPrimaryIds","extractRemappedPrimaryIds","createTsneWorker","createUmapWorker","filtered_ncols","_matrices","_groups","_group_levels","_block","_block_levels","_cache2","_parameters2","MarkerDetectionStandalone","normalized","groups","_ref3$block","arrays","new_matrices","dump","retain","temp","init","_ref4$copy","ret","_ref5$copy","_classPrivateFieldGet2","_reloaded","_worker_id","_ready","_run","_core","TsneState","reloaded","aworkers","_vizutils$initializeW","vizutils","worker_id","ready","_fetchResults","iterations","perplexity","animate","same_neighbors","_core2","reneighbor","nn_out","UmapState","num_epochs","min_dist","registerCallback","sendMessage","transfer","terminateWorker","checkIndices","guessFeatureTypes","subsetInvalidFactors","invalid","transformed","num_invalid","_loop","new_ids","new_levels","summaries2int","formatMarkerResults","rankEffect","ordering","ranking","increasing","cohen","summary","auc","lfc","deltaDetected","reorder","stats","thing","stat_detected","detected","stat_mean","stat_lfc","stat_delta_d","locateVersusCache","computeVersusResults","_get","Reflect","bind","property","desc","areArraysEqual","isArrayLike","formatLengthError","checkStringArray","typeMessage","checkNamesArray","numExpected","lengthMessage","sum","combineNames","all_names","all_lengths","total_n","all_null","createSequence","convertToInt32Array","checkNonNegative","object2map","presplitFactor","factor","by","LENGTH","_bioconductor_LENGTH","SLICE","_ref$allowView","allowView","_bioconductor_SLICE","start","COMBINE","objects","_bioconductor_COMBINE","con1","con2","total_LENGTH","BigInt64Array","BigUint64Array","position","CLONE","_ref2$deepCopy","_bioconductor_CLONE","_step3$value","SPLIT","misc","_bioconductor_SPLIT","NUMBER_OF_ROWS","_bioconductor_NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","_bioconductor_NUMBER_OF_COLUMNS","SLICE_2D","_ref3$allowView","_bioconductor_SLICE_2D","COMBINE_ROWS","_bioconductor_COMBINE_ROWS","COMBINE_COLUMNS","_bioconductor_COMBINE_COLUMNS","setterTarget","inPlace","generics","cloneField","Annotated","_ref$inPlace","cutils","setMetadata","_check_entry_index","InternalList","order","expected","observed","_entries","_order","_check_entry_index2","ii","delete","_ref2$inPlace","_ref3$inPlace","new_entries","_ref4$inPlace","new_order","_ref5$inPlace","_ref6$deepCopy","FUN","_ref7$inPlace","combiner","first_order","DataFrame","_ann$Annotated","_inherits","_super","_createSuper","_ref$numberOfRows","_ref$rowNames","_ref$columnOrder","_ref$metadata","_possibleConstructorReturn","_numberOfRows","_rowNames","_columns","il","cause","entry","numberOfEntries","setColumn","setNames","setColumnNames","setRowNames","_ref6$inPlace","sliceColumns","_ref7","new_numberOfRows","_ref7$allowView","new_rowNames","all_n","all_l","yi","_ref8","_ref8$deepCopy","_getPrototypeOf","ann","flexibleCombineRows","ckeys","corder","cnames","copies","dummy","verifyElementMetadata","elementMetadata","df","Vector","_ref$names","_ref$elementMetadata","_elementMetadata","setElementMetadata","_ref4$allowView","all_em","_ref5","_ref5$deepCopy","buildIntervalTree","_ref2$slice","_convertPositionToRan","_ref$slice","positions","fillIndex","at","rank2position","new_starts","new_ends","pos","startRanks","endRanks","convertPositionToRank","tree","create_node","recursive_build_tree","one_past_the_end","_tree","left_bound","right_bound","start_overlaps_sorted","overlaps","end_overlaps_sorted","left_node","right_node","node","queryIntervalTree","recursive_query_tree","overlap","IRanges","_vec$Vector","width","_width","_this2","setStart","setWidth","olap","IRangesOverlapIndex","all_s","all_w","vec","query","GRanges","seqnames","_ref$strand","strand","_seqnames","_ranges","_convertToInt8Array","_checkStrandedness","Int8Array","_strand","setSeqnames","ir","setRanges","setStrand","_ref5$restrictToSeqna","restrictToSeqnames","_ref5$restrictToStran","restrictToStrand","by_seqname","starts","ends","seqname_indices","by_strand","str_indices","GRangesOverlapIndex","_ref6$allowView","all_sn","all_rr","all_st","_ref7$deepCopy","_ref8$ignoreStrand","ignoreStrand","my_results","allowed_strands","seq_index","sstr","_staged_setGroup","_flush_staged_setGroup","GroupedGRanges","_ref$rangeLengths","rangeLengths","_assertThisInitialized","gr","_rangeLengths","accumulated","_computeStarts","_rangeStarts","_flush_staged_setGroup2","_ref2$allowView","nops","setGroup","GroupedGRangesOverlapIndex","buildOverlapIndex","runs","lengths","staged","last_start","more_ranges","current_start","nranges","fullLength","rangeStarts","rev_map","_reverseMapping","_loop2","_extractor","_inserter","_primarySlicer","_secondarySlicer","DenseMatrix","_ref$columnMajor","columnMajor","_numberOfColumns","_values","_columnMajor","_extractor2","setValues","_inserter2","setRow","_objectDestructuringEmpty","full_rows","is_row_range","new_rows","full_columns","is_column_range","new_values","_primarySlicer2","primaryFun","secondaryFun","isPrimaryMajor","secondaryName","num_primary","num_secondary","primary_major","used_primary","cur_primary","out_offset","in_offset","out_offset2","view_offset","_combiner","nprimary","nsecondary","primaryMajor","primarySlice","fullPrimary","isPrimaryRange","primaryDim","secondarySlice","fullSecondary","isSecondaryRange","inSecondaryDim","outSecondaryDim","outputValues","_secondarySlicer2","pi","inPrimary","outPrimary","si","SummarizedExperiment","_ref$assayOrder","assayOrder","_ref$rowData","rowData","_ref$columnData","columnData","_ref$columnNames","_assays","nrows","ncols","nr","nc","_rowData","_columnData","_columnNames","removeAssay","setAssay","setAssayNames","sliceAssays","setRowData","setColumnData","_ref8$inPlace","_ref9$inPlace","_ref10","_ref10$allowView","all_dfs","_ref11","_ref11$deepCopy","_check_rowRanges","RangedSummarizedExperiment","_se$SummarizedExperim","rowRanges","ggr","_check_rowRanges2","_rowRanges","setRowRanges","has_empty","has_ggr","se","widths","SingleCellExperiment","_rse$RangedSummarized","_options$reducedDimen","reducedDimensions","_options$reducedDimen2","reducedDimensionOrder","_options$alternativeE","alternativeExperiments","_options$alternativeE2","alternativeExperimentOrder","_options$rowRanges","_reducedDimensions","_alternativeExperiments","removeReducedDimension","setReducedDimension","setReducedDimensionNames","sliceReducedDimensions","removeAlternativeExperiment","setAlternativeExperiment","setAlternativeExperimentNames","sliceAlternativeExperiments","_ref9","_ref9$allowView","rse","_collections","fetchAllCollections","_fetchAllCollections","_ref$download","cres","coll_data","reference_download","decompressLines","_genes","fetchAllGenes","_fetchAllGenes","_ref$types","promises","processing","_t","resolved","gene_data","processed","gene_download","_sets","fetchAllSets","_fetchAllSets","_yield$Promise$all","_yield$Promise$all2","sres","set_data","collection","fetchGenesForAllSets","_fetchGenesForAllSets","fetchSetsForAllGenes","_fetchSetsForAllGenes","by_symbol","by_symbol_lower","mapGenesByIdentifier","_mapGenesByIdentifier","_ref$lowerCase","lowerCase","host","sfound","tfound","_step2$value","reindexGenesForAllSets","geneMapping","genesForSets","reverse_mapping","gesel_gene","new_sets","gene","reindexSetsForAllGenes","setsForGenes","remapped","_store","_ncols","MultiMatrix","_ref$store","old","_matrix","ScranMatrix","gc","_ref$buffer","_ref2$buffer","sparse","reorganized","_ref3$buffer","identities","wipe_identities","prefix","extension","tmppath","methods","handleString","createBlock","local_buffer","barr","sofar","subsetBlock","_ref3$filter","filterBlock","_ref4$buffer","dropUnusedBlock","uniq","uniq_arr","harvest_matrices","BigInt","$$","ptr","cbindWithNames","mat_ptrs","name_ptrs","renamed","common","universe","names_arr","replacement_arr","cbind_with_rownames","internames","_renamed","computeTopThreshold","_ref$largest","largest","_results","_filledClusters","_filledSizes","_filledCenters","_filledWcss","_filledIterations","_filledStatus","ClusterKmeansResults","filled","num_obs","set_iterations","set_status","_ref$fillable","fillable","COPY","_ref2$fillable","cluster_sizes","_this3","_ref3$fillable","wcss","_this4","_ref4$fillable","centers","clusterKmeans","_ref5$numberOfDims","_ref5$numberOfCells","_ref5$initMethod","_ref5$initSeed","initSeed","_ref5$initPCASizeAdju","initPCASizeAdjust","_ref5$numberOfThreads","numberOfThreads","nthreads","pptr","RunPCAResults","byteOffset","cluster_kmeans","_graph","BuildSNNGraphResults","buildSNNGraph","my_neighbors","_ref$scheme","_ref$neighbors","_ref$numberOfThreads","FindNearestNeighborsResults","findNearestNeighbors","build_snn_graph","_id2","_filledBest","_filledModularity","_filledMembership","_chooseLevel","ClusterSNNGraphMultiLevelResults","numberOfLevels","set_best","_ref2$level","_chooseLevel2","modularity","set_modularity","_ref3$level","_id3","_results2","_filledModularity2","_filledModularityDetails","_filledMembership2","ClusterSNNGraphWalktrapResults","numberOfMergeSteps","which","remaining","num_merge_steps","_ref4$at","_ref5$fillable","_id4","_results3","_filledModularity3","_filledMembership3","ClusterSNNGraphLeidenResults","_ref6$copy","_ref6$fillable","clusterSNNGraph","_ref7$method","_ref7$multiLevelResol","_ref7$leidenResolutio","_ref7$leidenModularit","_ref7$walktrapSteps","cluster_snn_graph_multilevel","cluster_snn_graph_walktrap","cluster_snn_graph_leiden","factorize","failure","_ref$asWasmArray","asWasmArray","_ref$action","_ref$placeholder","warned","isFinite","existing","filterCells","filter_data","filter_cells","BuildNeighborSearchIndexResults","num_dim","buildNeighborSearchIndex","_ref$numberOfDims","_ref$numberOfCells","_ref$approximate","build_neighbor_index","run_data","ind_data","dist_data","_ref2$runs","_ref2$indices","_ref2$distances","distances","serialize","NeighborResults","_ref3$numberOfThreads","find_nearest_neighbors","groupedSizeFactors","group_arr","_ref$center","_ref$priorCount","priorCount","_ref$reference","reference","wasm","grouped_size_factors","guessFeatures","_ref$forceTaxonomy","ntotal","early_threshold","ceil","payload","ensembl_human","ensembl_mouse","ensembl_6239","ensembl_10116","ensembl_9541","ensembl_7227","ensembl_7955","ensembl_9598","symbol_human","symbol_mouse","symbol_6239","symbol_7955","hsid","mmid","any_ens","highest","hypergeometricTest","markersInSet","numberOfMarkers","featureSetSize","markersInSet_data","numberOfMarkers_data","featureSetSize_data","numberOfFeatures_data","output_data","_ref$assumeSorted","assumeSorted","ntests","check_length","hypergeometric_test","initializeSparseMatrixFromMatrixMarket","buf_data","_ref3$compressed","compressed","_ref3$layered","layered","convert_compressed","read_matrix_market_from_buffer","read_matrix_market_from_file","isReorganized","wipeIdentities","extractMatrixMarketDimensions","_ref4$compressed","read_matrix_market_header_from_buffer","read_matrix_market_header_from_file","sarr","initializeSparseMatrixFromHDF5","_ref5$forceInteger","_ref5$layered","read_hdf5_matrix","extractHDF5MatrixDetails","extract_hdf5_matrix_details","vals","integer","initializeDenseMatrixFromDenseArray","_ref6$forceInteger","initialize_dense_matrix","initializeSparseMatrixFromRds","_ref7$consume","_ref7$forceInteger","_ref7$layered","initialize_sparse_matrix_from_rds","computePerCellQcFilters","block_data","bptr","use_blocks","applyFilter","thresholds","rebuffer","optr","computePerCellQcMetrics","subset_offsets","tmp_subsets","nsubsets","offset_offset","offset_arr","_tmp_subsets","unpack_strings","repack_strings","lengths_arr","enc","buffer_arr","_reference","LoadLabelledReferenceResults","num_samples","num_features","num_labels","loadLabelledReferenceFromBuffers","ranks","matbuf","markbuf","labbuf","load_singlepp_reference","_reference2","BuildLabelledReferenceResults","shared_features","create_feature_availability","mat_id_buffer","mat_id_array","convert_reference_features","referenceFeatures","ref_id_buffer","ref_id_array","buildLabelledReference","_ref$top","top","nfeat","build_singlepp_reference","expectedNumberOfFeatures","label_cells","tempmat","tempbuf","use_buffer","labelCells","_ref2$numberOfFeature","_ref2$numberOfCells","_ref2$quantile","quantile","_ref2$numberOfThreads","run_singlepp","_integrated","IntegrateLabelledReferencesResults","num_references","integrateLabelledReferences","id_arr","loaded_arr2","ref_arr2","built_arr2","nrefs","ref_arr","la2","ra2","ba2","integrate_singlepp_references","_ref_arr","integrateCellLabels","assigned","aptrs","_ref4$numberOfFeature","_ref4$numberOfCells","_ref4$quantile","_ref4$numberOfThreads","numberOfReferences","assigned_arrs","aptrs_arr","fail","integrate_singlepp","_assigned_arrs","logNormCounts","sf_data","_ref$sizeFactors","_ref$allowZeros","sfptr","use_sf","log_norm_counts","centerSizeFactors","center_size_factors","mnnCorrect","x_data","_ref$k","_ref$numberOfMADs","_ref$robustIterations","robustIterations","_ref$robustTrim","robustTrim","_ref$referencePolicy","referencePolicy","mnn_correct","_filledMeans","_filledVariances","_filledFitted","_filledResiduals","_extract","ModelGeneVarResults","numberOfBlocks","_extract2","_ref4$block","num_blocks","fillcheck","fillindex","nblocks","modelGeneVar","_ref5$block","_ref5$span","model_gene_var","_filledSums","_filledDetected","_filledSubsetTotals","PerCellAdtQcMetricsResults","numberOfSubsets","subset_totals","num_subsets","perCellAdtQcMetrics","internal","subset_offset","per_cell_adt_qc_metrics","_filledMaxProportions","_filledMaxIndex","PerCellCrisprQcMetricsResults","max_proportion","perCellCrisprQcMetrics","per_cell_crispr_qc_metrics","_filledSubsetProportions","PerCellRnaQcMetricsResults","subset_proportions","perCellRnaQcMetrics","per_cell_rna_qc_metrics","quickAdtSizeFactors","clust","_ref$numberOfClusters","_ref$numberOfPCs","_ref$totals","runPCA","RdsObject","par","parent","RdsVector","_RdsObject","fill_attribute_names","anames_buf","attribute_names_buffer","anames_len","attribute_names_length","packer","find_attribute","dispatch","load_attribute_by_index","load_attribute_by_name","RdsIntegerVector","_RdsVector","_super2","numeric_vector","RdsBooleanVector","_RdsVector2","_super3","RdsDoubleVector","_RdsVector3","_super4","RdsStringVector","_RdsVector4","_super5","fill_string_vector","buf","string_vector_buffer","string_vector_length","RdsGenericVector","_RdsVector5","_super6","_this5","load_list_element","RdsS4Object","_RdsObject2","_super7","_this6","class_name","_this7","package_name","_this8","_this9","_this10","RdsNull","_RdsVector6","_super8","cons","tt","_obj","RdsDetails","format_version","writer_version","reader_version","_this11","readRds","parse_rds_from_file","parse_rds_from_buffer","_filledComponents","_filledTotalVariance","set_total_variance","variance_explained","total_variance","feat_data","_ref3$features","_ref3$numberOfPCs","_ref3$scale","scale","_ref3$blockMethod","use_feat","fptr","run_pca","run_blocked_pca","run_multibatch_pca","perplexityToNeighbors","perplexity_to_k","scaleByNeighbors","embeddings","embed_ptrs","index_ptrs","holding_ndims","holding_weights","_ref$indices","_ref$weights","nembed","embed_arr","weight_offset","use_weights","allocator","total_ndim","total_len","index_arr","scale_by_neighbors_indices","ndims_arr","scale_by_neighbors_matrices","_deletable","scoreFeatureSet","feature_data","_ref$scale","score_feature_set","scores","checkFillness2","getfun","intifySummary","_filledCohen","_filledLfc","_filledAuc","_filledDeltaDetected","_extractBlockedStat","ScoreMarkersResults","createBlockedStatsFilled","createEffectsFilled","num_groups","_extractBlockedStat2","_ref3$summary","_ref4$summary","_ref5$summary","_ref6$summary","delta_detected","scoreMarkers","group_data","_ref7$block","_ref7$numberOfThreads","_ref7$lfcThreshold","_ref7$computeAuc","_ref7$computeMedian","computeMedian","_ref7$computeMaximum","computeMaximum","score_markers","subsetRows","xcopy","wasm_indices","row_subset","subsetColumns","column_subset","splitRows","_ref3$singleNull","singleNull","_ref3$createMultiMatr","createMultiMatrix","tkeys","consec","_tkeys","SuggestAdtQcFiltersResults","thresholds_detected","thresholds_subset_totals","suggestAdtQcFilters","_ref4$numberOfMADs","_ref4$minDetectedDrop","suggest_adt_qc_filters","_filledMaxCount","SuggestCrisprQcFiltersResults","thresholds_max_count","suggestCrisprQcFilters","_ref3$numberOfMADs","suggest_crispr_qc_filters","SuggestRnaQcFiltersResults","thresholds_sums","thresholds_proportions","suggestRnaQcFilters","_ref5$numberOfMADs","suggest_rna_qc_filters","createUint8WasmArray","wasmArraySpace","createInt32WasmArray","createBigUint64WasmArray","createFloat64WasmArray","wasmifyArray","space","chooseNumberOfThreads","threads","maximumThreads","possibleCopy","view_class","matchOptions","choices","spawnArray","checkFillness","setFilledFun","getFun","initialize","_initialize","_ref$localFile","localFile","scran_custom_nthreads","locateFile","import","loadScran","register","get_error_message","wasmMemory","Uint8WasmArray","_WasmArray","WasmArray","Int8WasmArray","_WasmArray2","Uint16WasmArray","_WasmArray3","Int16WasmArray","_WasmArray4","Int16Array","Uint32WasmArray","_WasmArray5","Int32WasmArray","_WasmArray6","BigUint64WasmArray","_WasmArray7","BigInt64WasmArray","_WasmArray8","Float32WasmArray","_WasmArray9","_super9","Float64WasmArray","_WasmArray10","_super10","stringToClass","createWasmArray","arrayClass","allocate","createWasmArrayView"],"sourceRoot":""}