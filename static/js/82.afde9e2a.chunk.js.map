{"version":3,"file":"static/js/82.afde9e2a.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","../node_modules/hash-wasm/dist/index.esm.js","../node_modules/papaparse/papaparse.min.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticAccess.js","../node_modules/scran.js/module/initializeSparseMatrix.js","../node_modules/scran.js/module/hdf5.js","../node_modules/scran.js/module/permute.js","../node_modules/scran.js/module/guessFeatures.js","../node_modules/scran.js/module/ArrayCollection.js","../node_modules/scran.js/module/block.js","../node_modules/scran.js/module/cbind.js","../node_modules/scran.js/module/MultiMatrix.js","../node_modules/scran.js/module/subset.js","../node_modules/scran.js/module/internal/computePerCellQcMetrics.js","../node_modules/scran.js/module/computePerCellQCMetrics.js","../node_modules/scran.js/module/computePerCellAdtQcMetrics.js","../node_modules/scran.js/module/internal/computePerCellQcFilters.js","../node_modules/scran.js/module/computePerCellQCFilters.js","../node_modules/scran.js/module/computePerCellAdtQcFilters.js","../node_modules/scran.js/module/filterCells.js","../node_modules/scran.js/module/groupedSizeFactors.js","../node_modules/scran.js/module/runPCA.js","../node_modules/scran.js/module/clusterKmeans.js","../node_modules/scran.js/module/logNormCounts.js","../node_modules/scran.js/module/findNearestNeighbors.js","../node_modules/scran.js/module/clusterSNNGraph.js","../node_modules/scran.js/module/runTSNE.js","../node_modules/scran.js/module/scoreMarkers.js","../node_modules/scran.js/module/labelCells.js","../node_modules/bakana/module/steps/utils/general.js","../node_modules/pako/dist/pako.esm.mjs","../node_modules/bakana/module/readers/utils/extract.js","../node_modules/bakana/module/readers/utils/features.js","../node_modules/bakana/module/abstract/file.js","../node_modules/bakana/module/readers/utils/serialize.js","../node_modules/bakana/module/readers/10x.js","../node_modules/bakana/module/readers/h5ad.js","../node_modules/bakana/module/readers/mtx.js","../node_modules/bakana/module/readers/index.js","../node_modules/bakana/module/steps/inputs.js","../node_modules/bakana/module/steps/utils/quality_control.js","../node_modules/bakana/module/steps/mito.js","../node_modules/bakana/module/steps/quality_control.js","../node_modules/bakana/module/steps/adt_quality_control.js","../node_modules/bakana/module/steps/cell_filtering.js","../node_modules/bakana/module/steps/utils/normalization.js","../node_modules/bakana/module/steps/normalization.js","../node_modules/bakana/module/steps/adt_normalization.js","../node_modules/scran.js/module/quickAdtSizeFactors.js","../node_modules/bakana/module/steps/utils/pca.js","../node_modules/bakana/module/steps/feature_selection.js","../node_modules/bakana/module/steps/pca.js","../node_modules/bakana/module/steps/adt_pca.js","../node_modules/bakana/module/steps/combine_embeddings.js","../node_modules/scran.js/module/scaleByNeighbors.js","../node_modules/bakana/module/steps/batch_correction.js","../node_modules/scran.js/module/mnnCorrect.js","../node_modules/bakana/module/steps/neighbor_index.js","../node_modules/bakana/module/steps/utils/markers.js","../node_modules/bakana/module/steps/snn_graph_cluster.js","../node_modules/bakana/module/steps/kmeans_cluster.js","../node_modules/bakana/module/steps/choose_clustering.js","../node_modules/bakana/module/steps/marker_detection.js","../node_modules/bakana/module/steps/custom_selections.js","../node_modules/bakana/module/defaults.js","../node_modules/bakana/module/abstract/worker_parent.js","../node_modules/bakana/module/steps/utils/viz_parent.js","../node_modules/bakana/module/steps/tsne.js","../node_modules/bakana/module/steps/umap.js","../node_modules/bakana/module/steps/cell_labelling.js","../node_modules/bakana/module/analysis.js","../node_modules/bakana/module/abstract/utils/legacy_v0.js","../node_modules/bakana/module/abstract/utils/serialize.js","../node_modules/bakana/module/abstract/serialize.js","../node_modules/bakana/module/serialize.js","../node_modules/bakana/module/preflight.js","../node_modules/bakana/module/index.js","../node_modules/scran.js/module/ScranMatrix.js","../node_modules/scran.js/module/modelGeneVar.js","../node_modules/scran.js/module/utils.js","../node_modules/scran.js/module/wasm.js","../node_modules/wasmarrays.js/src/derived.js","../node_modules/wasmarrays.js/src/create.js","../node_modules/wasmarrays.js/src/view.js"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","/*!\n * hash-wasm (https://www.npmjs.com/package/hash-wasm)\n * (c) Dani Biro\n * @license MIT\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nclass Mutex {\n    constructor() {\n        this.mutex = Promise.resolve();\n    }\n    lock() {\n        let begin = () => { };\n        this.mutex = this.mutex.then(() => new Promise(begin));\n        return new Promise((res) => {\n            begin = res;\n        });\n    }\n    dispatch(fn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const unlock = yield this.lock();\n            try {\n                return yield Promise.resolve(fn());\n            }\n            finally {\n                unlock();\n            }\n        });\n    }\n}\n\n/* eslint-disable import/prefer-default-export */\n/* eslint-disable no-bitwise */\nvar _a;\nfunction getGlobal() {\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof self !== 'undefined')\n        return self;\n    if (typeof window !== 'undefined')\n        return window;\n    return global;\n}\nconst globalObject = getGlobal();\nconst nodeBuffer = (_a = globalObject.Buffer) !== null && _a !== void 0 ? _a : null;\nconst textEncoder = globalObject.TextEncoder ? new globalObject.TextEncoder() : null;\nfunction intArrayToString(arr, len) {\n    return String.fromCharCode(...arr.subarray(0, len));\n}\nfunction hexCharCodesToInt(a, b) {\n    return (((a & 0xF) + ((a >> 6) | ((a >> 3) & 0x8))) << 4) | ((b & 0xF) + ((b >> 6) | ((b >> 3) & 0x8)));\n}\nfunction writeHexToUInt8(buf, str) {\n    const size = str.length >> 1;\n    for (let i = 0; i < size; i++) {\n        const index = i << 1;\n        buf[i] = hexCharCodesToInt(str.charCodeAt(index), str.charCodeAt(index + 1));\n    }\n}\nfunction hexStringEqualsUInt8(str, buf) {\n    if (str.length !== buf.length * 2) {\n        return false;\n    }\n    for (let i = 0; i < buf.length; i++) {\n        const strIndex = i << 1;\n        if (buf[i] !== hexCharCodesToInt(str.charCodeAt(strIndex), str.charCodeAt(strIndex + 1))) {\n            return false;\n        }\n    }\n    return true;\n}\nconst alpha = 'a'.charCodeAt(0) - 10;\nconst digit = '0'.charCodeAt(0);\nfunction getDigestHex(tmpBuffer, input, hashLength) {\n    let p = 0;\n    /* eslint-disable no-plusplus */\n    for (let i = 0; i < hashLength; i++) {\n        let nibble = input[i] >>> 4;\n        tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n        nibble = input[i] & 0xF;\n        tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n    }\n    /* eslint-enable no-plusplus */\n    return String.fromCharCode.apply(null, tmpBuffer);\n}\nconst getUInt8Buffer = nodeBuffer !== null\n    ? (data) => {\n        if (typeof data === 'string') {\n            const buf = nodeBuffer.from(data, 'utf8');\n            return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n        }\n        if (nodeBuffer.isBuffer(data)) {\n            return new Uint8Array(data.buffer, data.byteOffset, data.length);\n        }\n        if (ArrayBuffer.isView(data)) {\n            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new Error('Invalid data type!');\n    }\n    : (data) => {\n        if (typeof data === 'string') {\n            return textEncoder.encode(data);\n        }\n        if (ArrayBuffer.isView(data)) {\n            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new Error('Invalid data type!');\n    };\nconst base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64Lookup = new Uint8Array(256);\nfor (let i = 0; i < base64Chars.length; i++) {\n    base64Lookup[base64Chars.charCodeAt(i)] = i;\n}\nfunction encodeBase64(data, pad = true) {\n    const len = data.length;\n    const extraBytes = len % 3;\n    const parts = [];\n    const len2 = len - extraBytes;\n    for (let i = 0; i < len2; i += 3) {\n        const tmp = ((data[i] << 16) & 0xFF0000)\n            + ((data[i + 1] << 8) & 0xFF00)\n            + (data[i + 2] & 0xFF);\n        const triplet = base64Chars.charAt((tmp >> 18) & 0x3F)\n            + base64Chars.charAt((tmp >> 12) & 0x3F)\n            + base64Chars.charAt((tmp >> 6) & 0x3F)\n            + base64Chars.charAt(tmp & 0x3F);\n        parts.push(triplet);\n    }\n    if (extraBytes === 1) {\n        const tmp = data[len - 1];\n        const a = base64Chars.charAt(tmp >> 2);\n        const b = base64Chars.charAt((tmp << 4) & 0x3F);\n        parts.push(`${a}${b}`);\n        if (pad) {\n            parts.push('==');\n        }\n    }\n    else if (extraBytes === 2) {\n        const tmp = (data[len - 2] << 8) + data[len - 1];\n        const a = base64Chars.charAt(tmp >> 10);\n        const b = base64Chars.charAt((tmp >> 4) & 0x3F);\n        const c = base64Chars.charAt((tmp << 2) & 0x3F);\n        parts.push(`${a}${b}${c}`);\n        if (pad) {\n            parts.push('=');\n        }\n    }\n    return parts.join('');\n}\nfunction getDecodeBase64Length(data) {\n    let bufferLength = Math.floor(data.length * 0.75);\n    const len = data.length;\n    if (data[len - 1] === '=') {\n        bufferLength -= 1;\n        if (data[len - 2] === '=') {\n            bufferLength -= 1;\n        }\n    }\n    return bufferLength;\n}\nfunction decodeBase64(data) {\n    const bufferLength = getDecodeBase64Length(data);\n    const len = data.length;\n    const bytes = new Uint8Array(bufferLength);\n    let p = 0;\n    for (let i = 0; i < len; i += 4) {\n        const encoded1 = base64Lookup[data.charCodeAt(i)];\n        const encoded2 = base64Lookup[data.charCodeAt(i + 1)];\n        const encoded3 = base64Lookup[data.charCodeAt(i + 2)];\n        const encoded4 = base64Lookup[data.charCodeAt(i + 3)];\n        bytes[p] = (encoded1 << 2) | (encoded2 >> 4);\n        p += 1;\n        bytes[p] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        p += 1;\n        bytes[p] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n        p += 1;\n    }\n    return bytes;\n}\n\nconst MAX_HEAP = 16 * 1024;\nconst WASM_FUNC_HASH_LENGTH = 4;\nconst wasmMutex = new Mutex();\nconst wasmModuleCache = new Map();\nfunction WASMInterface(binary, hashLength) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let wasmInstance = null;\n        let memoryView = null;\n        let initialized = false;\n        if (typeof WebAssembly === 'undefined') {\n            throw new Error('WebAssembly is not supported in this environment!');\n        }\n        const writeMemory = (data, offset = 0) => {\n            memoryView.set(data, offset);\n        };\n        const getMemory = () => memoryView;\n        const getExports = () => wasmInstance.exports;\n        const setMemorySize = (totalSize) => {\n            wasmInstance.exports.Hash_SetMemorySize(totalSize);\n            const arrayOffset = wasmInstance.exports.Hash_GetBuffer();\n            const memoryBuffer = wasmInstance.exports.memory.buffer;\n            memoryView = new Uint8Array(memoryBuffer, arrayOffset, totalSize);\n        };\n        const getStateSize = () => {\n            const view = new DataView(wasmInstance.exports.memory.buffer);\n            const stateSize = view.getUint32(wasmInstance.exports.STATE_SIZE, true);\n            return stateSize;\n        };\n        const loadWASMPromise = wasmMutex.dispatch(() => __awaiter(this, void 0, void 0, function* () {\n            if (!wasmModuleCache.has(binary.name)) {\n                const asm = decodeBase64(binary.data);\n                const promise = WebAssembly.compile(asm);\n                wasmModuleCache.set(binary.name, promise);\n            }\n            const module = yield wasmModuleCache.get(binary.name);\n            wasmInstance = yield WebAssembly.instantiate(module, {\n            // env: {\n            //   emscripten_memcpy_big: (dest, src, num) => {\n            //     const memoryBuffer = wasmInstance.exports.memory.buffer;\n            //     const memView = new Uint8Array(memoryBuffer, 0);\n            //     memView.set(memView.subarray(src, src + num), dest);\n            //   },\n            //   print_memory: (offset, len) => {\n            //     const memoryBuffer = wasmInstance.exports.memory.buffer;\n            //     const memView = new Uint8Array(memoryBuffer, 0);\n            //     console.log('print_int32', memView.subarray(offset, offset + len));\n            //   },\n            // },\n            });\n            // wasmInstance.exports._start();\n        }));\n        const setupInterface = () => __awaiter(this, void 0, void 0, function* () {\n            if (!wasmInstance) {\n                yield loadWASMPromise;\n            }\n            const arrayOffset = wasmInstance.exports.Hash_GetBuffer();\n            const memoryBuffer = wasmInstance.exports.memory.buffer;\n            memoryView = new Uint8Array(memoryBuffer, arrayOffset, MAX_HEAP);\n        });\n        const init = (bits = null) => {\n            initialized = true;\n            wasmInstance.exports.Hash_Init(bits);\n        };\n        const updateUInt8Array = (data) => {\n            let read = 0;\n            while (read < data.length) {\n                const chunk = data.subarray(read, read + MAX_HEAP);\n                read += chunk.length;\n                memoryView.set(chunk);\n                wasmInstance.exports.Hash_Update(chunk.length);\n            }\n        };\n        const update = (data) => {\n            if (!initialized) {\n                throw new Error('update() called before init()');\n            }\n            const Uint8Buffer = getUInt8Buffer(data);\n            updateUInt8Array(Uint8Buffer);\n        };\n        const digestChars = new Uint8Array(hashLength * 2);\n        const digest = (outputType, padding = null) => {\n            if (!initialized) {\n                throw new Error('digest() called before init()');\n            }\n            initialized = false;\n            wasmInstance.exports.Hash_Final(padding);\n            if (outputType === 'binary') {\n                // the data is copied to allow GC of the original memory object\n                return memoryView.slice(0, hashLength);\n            }\n            return getDigestHex(digestChars, memoryView, hashLength);\n        };\n        const save = () => {\n            if (!initialized) {\n                throw new Error('save() can only be called after init() and before digest()');\n            }\n            const stateOffset = wasmInstance.exports.Hash_GetState();\n            const stateLength = getStateSize();\n            const memoryBuffer = wasmInstance.exports.memory.buffer;\n            const internalState = new Uint8Array(memoryBuffer, stateOffset, stateLength);\n            // prefix is 4 bytes from SHA1 hash of the WASM binary\n            // it is used to detect incompatible internal states between different versions of hash-wasm\n            const prefixedState = new Uint8Array(WASM_FUNC_HASH_LENGTH + stateLength);\n            writeHexToUInt8(prefixedState, binary.hash);\n            prefixedState.set(internalState, WASM_FUNC_HASH_LENGTH);\n            return prefixedState;\n        };\n        const load = (state) => {\n            if (!(state instanceof Uint8Array)) {\n                throw new Error('load() expects an Uint8Array generated by save()');\n            }\n            const stateOffset = wasmInstance.exports.Hash_GetState();\n            const stateLength = getStateSize();\n            const overallLength = WASM_FUNC_HASH_LENGTH + stateLength;\n            const memoryBuffer = wasmInstance.exports.memory.buffer;\n            if (state.length !== overallLength) {\n                throw new Error(`Bad state length (expected ${overallLength} bytes, got ${state.length})`);\n            }\n            if (!hexStringEqualsUInt8(binary.hash, state.subarray(0, WASM_FUNC_HASH_LENGTH))) {\n                throw new Error('This state was written by an incompatible hash implementation');\n            }\n            const internalState = state.subarray(WASM_FUNC_HASH_LENGTH);\n            new Uint8Array(memoryBuffer, stateOffset, stateLength).set(internalState);\n            initialized = true;\n        };\n        const isDataShort = (data) => {\n            if (typeof data === 'string') {\n                // worst case is 4 bytes / char\n                return data.length < MAX_HEAP / 4;\n            }\n            return data.byteLength < MAX_HEAP;\n        };\n        let canSimplify = isDataShort;\n        switch (binary.name) {\n            case 'argon2':\n            case 'scrypt':\n                canSimplify = () => true;\n                break;\n            case 'blake2b':\n            case 'blake2s':\n                // if there is a key at blake2 then cannot simplify\n                canSimplify = (data, initParam) => initParam <= 512 && isDataShort(data);\n                break;\n            case 'blake3':\n                // if there is a key at blake3 then cannot simplify\n                canSimplify = (data, initParam) => initParam === 0 && isDataShort(data);\n                break;\n            case 'xxhash64': // cannot simplify\n            case 'xxhash3':\n            case 'xxhash128':\n                canSimplify = () => false;\n                break;\n        }\n        // shorthand for (init + update + digest) for better performance\n        const calculate = (data, initParam = null, digestParam = null) => {\n            if (!canSimplify(data, initParam)) {\n                init(initParam);\n                update(data);\n                return digest('hex', digestParam);\n            }\n            const buffer = getUInt8Buffer(data);\n            memoryView.set(buffer);\n            wasmInstance.exports.Hash_Calculate(buffer.length, initParam, digestParam);\n            return getDigestHex(digestChars, memoryView, hashLength);\n        };\n        yield setupInterface();\n        return {\n            getMemory,\n            writeMemory,\n            getExports,\n            setMemorySize,\n            init,\n            update,\n            digest,\n            save,\n            load,\n            calculate,\n            hashLength,\n        };\n    });\n}\n\nvar name$k = \"adler32\";\nvar data$k = \"AGFzbQEAAAABDANgAAF/YAAAYAF/AAMHBgABAgEAAgQFAXABAQEFBAEBAgIGDgJ/AUGAiQULfwBBgAgLB3AIBm1lbW9yeQIADkhhc2hfR2V0QnVmZmVyAAAJSGFzaF9Jbml0AAELSGFzaF9VcGRhdGUAAgpIYXNoX0ZpbmFsAAMNSGFzaF9HZXRTdGF0ZQAEDkhhc2hfQ2FsY3VsYXRlAAUKU1RBVEVfU0laRQMBCoAIBgUAQYAJCwoAQQBBATYChAgL9gYBBn9BACgChAgiAUH//wNxIQIgAUEQdiEDAkACQCAAQQFHDQAgAkEALQCACWoiAUGPgHxqIAEgAUHw/wNLGyIBIANqIgRBEHQiBUGAgDxqIAUgBEHw/wNLGyABciEBDAELAkACQAJAAkACQCAAQRBJDQBBgAkhBiAAQbArSQ0BQYAJIQYDQEEAIQUDQCAGIAVqIgEoAgAiBEH/AXEgAmoiAiADaiACIARBCHZB/wFxaiICaiACIARBEHZB/wFxaiICaiACIARBGHZqIgJqIAIgAUEEaigCACIEQf8BcWoiAmogAiAEQQh2Qf8BcWoiAmogAiAEQRB2Qf8BcWoiAmogAiAEQRh2aiICaiACIAFBCGooAgAiBEH/AXFqIgJqIAIgBEEIdkH/AXFqIgJqIAIgBEEQdkH/AXFqIgJqIAIgBEEYdmoiBGogBCABQQxqKAIAIgFB/wFxaiIEaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgJqIQMgBUEQaiIFQbArRw0ACyADQfH/A3AhAyACQfH/A3AhAiAGQbAraiEGIABB0FRqIgBBrytLDQALIABFDQQgAEEPSw0BDAILAkAgAEUNAEEAIQEDQCACIAFBgAlqLQAAaiICIANqIQMgACABQQFqIgFHDQALCyACQY+AfGogAiACQfD/A0sbIANB8f8DcEEQdHIhAQwECwNAIAYoAgAiAUH/AXEgAmoiBCADaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgRqIAQgBkEEaigCACIBQf8BcWoiBGogBCABQQh2Qf8BcWoiBGogBCABQRB2Qf8BcWoiBGogBCABQRh2aiIEaiAEIAZBCGooAgAiAUH/AXFqIgRqIAQgAUEIdkH/AXFqIgRqIAQgAUEQdkH/AXFqIgRqIAQgAUEYdmoiBGogBCAGQQxqKAIAIgFB/wFxaiIEaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgJqIQMgBkEQaiEGIABBcGoiAEEPSw0ACyAARQ0BCwNAIAIgBi0AAGoiAiADaiEDIAZBAWohBiAAQX9qIgANAAsLIANB8f8DcCEDIAJB8f8DcCECCyACIANBEHRyIQELQQAgATYChAgLMgEBf0EAQQAoAoQIIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYCgAkLBQBBhAgLPABBAEEBNgKECCAAEAJBAEEAKAKECCIAQRh0IABBCHRBgID8B3FyIABBCHZBgP4DcSAAQRh2cnI2AoAJCwsVAgBBgAgLBAQAAAAAQYQICwQBAAAA\";\nvar hash$k = \"321174b4\";\nvar wasmJson$k = {\n\tname: name$k,\n\tdata: data$k,\n\thash: hash$k\n};\n\nfunction lockedCreate(mutex, binary, hashLength) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const unlock = yield mutex.lock();\n        const wasm = yield WASMInterface(binary, hashLength);\n        unlock();\n        return wasm;\n    });\n}\n\nconst mutex$l = new Mutex();\nlet wasmCache$l = null;\n/**\n * Calculates Adler-32 hash. The resulting 32-bit hash is stored in\n * network byte order (big-endian).\n *\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction adler32(data) {\n    if (wasmCache$l === null) {\n        return lockedCreate(mutex$l, wasmJson$k, 4)\n            .then((wasm) => {\n            wasmCache$l = wasm;\n            return wasmCache$l.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$l.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new Adler-32 hash instance\n */\nfunction createAdler32() {\n    return WASMInterface(wasmJson$k, 4).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 4,\n            digestSize: 4,\n        };\n        return obj;\n    });\n}\n\nvar name$j = \"blake2b\";\nvar data$j = \"\";\nvar hash$j = \"68afc9cf\";\nvar wasmJson$j = {\n\tname: name$j,\n\tdata: data$j,\n\thash: hash$j\n};\n\nconst mutex$k = new Mutex();\nlet wasmCache$k = null;\nfunction validateBits$4(bits) {\n    if (!Number.isInteger(bits) || bits < 8 || bits > 512 || bits % 8 !== 0) {\n        return new Error('Invalid variant! Valid values: 8, 16, ..., 512');\n    }\n    return null;\n}\nfunction getInitParam$1(outputBits, keyBits) {\n    // eslint-disable-next-line no-bitwise\n    return outputBits | (keyBits << 16);\n}\n/**\n * Calculates BLAKE2b hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8, between 8 and 512. Defaults to 512.\n * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.\n * @returns Computed hash as a hexadecimal string\n */\nfunction blake2b(data, bits = 512, key = null) {\n    if (validateBits$4(bits)) {\n        return Promise.reject(validateBits$4(bits));\n    }\n    let keyBuffer = null;\n    let initParam = bits;\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length > 64) {\n            return Promise.reject(new Error('Max key length is 64 bytes'));\n        }\n        initParam = getInitParam$1(bits, keyBuffer.length);\n    }\n    const hashLength = bits / 8;\n    if (wasmCache$k === null || wasmCache$k.hashLength !== hashLength) {\n        return lockedCreate(mutex$k, wasmJson$j, hashLength)\n            .then((wasm) => {\n            wasmCache$k = wasm;\n            if (initParam > 512) {\n                wasmCache$k.writeMemory(keyBuffer);\n            }\n            return wasmCache$k.calculate(data, initParam);\n        });\n    }\n    try {\n        if (initParam > 512) {\n            wasmCache$k.writeMemory(keyBuffer);\n        }\n        const hash = wasmCache$k.calculate(data, initParam);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new BLAKE2b hash instance\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8, between 8 and 512. Defaults to 512.\n * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.\n */\nfunction createBLAKE2b(bits = 512, key = null) {\n    if (validateBits$4(bits)) {\n        return Promise.reject(validateBits$4(bits));\n    }\n    let keyBuffer = null;\n    let initParam = bits;\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length > 64) {\n            return Promise.reject(new Error('Max key length is 64 bytes'));\n        }\n        initParam = getInitParam$1(bits, keyBuffer.length);\n    }\n    const outputSize = bits / 8;\n    return WASMInterface(wasmJson$j, outputSize).then((wasm) => {\n        if (initParam > 512) {\n            wasm.writeMemory(keyBuffer);\n        }\n        wasm.init(initParam);\n        const obj = {\n            init: initParam > 512\n                ? () => {\n                    wasm.writeMemory(keyBuffer);\n                    wasm.init(initParam);\n                    return obj;\n                }\n                : () => {\n                    wasm.init(initParam);\n                    return obj;\n                },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 128,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nvar name$i = \"argon2\";\nvar data$i = \"\";\nvar hash$i = \"59aa4fb4\";\nvar wasmJson$i = {\n\tname: name$i,\n\tdata: data$i,\n\thash: hash$i\n};\n\nfunction encodeResult(salt, options, res) {\n    const parameters = [\n        `m=${options.memorySize}`,\n        `t=${options.iterations}`,\n        `p=${options.parallelism}`,\n    ].join(',');\n    return `$argon2${options.hashType}$v=19$${parameters}$${encodeBase64(salt, false)}$${encodeBase64(res, false)}`;\n}\nconst uint32View = new DataView(new ArrayBuffer(4));\nfunction int32LE(x) {\n    uint32View.setInt32(0, x, true);\n    return new Uint8Array(uint32View.buffer);\n}\nfunction hashFunc(blake512, buf, len) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (len <= 64) {\n            const blake = yield createBLAKE2b(len * 8);\n            blake.update(int32LE(len));\n            blake.update(buf);\n            return blake.digest('binary');\n        }\n        const r = Math.ceil(len / 32) - 2;\n        const ret = new Uint8Array(len);\n        blake512.init();\n        blake512.update(int32LE(len));\n        blake512.update(buf);\n        let vp = blake512.digest('binary');\n        ret.set(vp.subarray(0, 32), 0);\n        for (let i = 1; i < r; i++) {\n            blake512.init();\n            blake512.update(vp);\n            vp = blake512.digest('binary');\n            ret.set(vp.subarray(0, 32), i * 32);\n        }\n        const partialBytesNeeded = len - 32 * r;\n        let blakeSmall;\n        if (partialBytesNeeded === 64) {\n            blakeSmall = blake512;\n            blakeSmall.init();\n        }\n        else {\n            blakeSmall = yield createBLAKE2b(partialBytesNeeded * 8);\n        }\n        blakeSmall.update(vp);\n        vp = blakeSmall.digest('binary');\n        ret.set(vp.subarray(0, partialBytesNeeded), r * 32);\n        return ret;\n    });\n}\nfunction getHashType(type) {\n    switch (type) {\n        case 'd':\n            return 0;\n        case 'i':\n            return 1;\n        default:\n            return 2;\n    }\n}\nfunction argon2Internal(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { parallelism, iterations, hashLength } = options;\n        const password = getUInt8Buffer(options.password);\n        const salt = getUInt8Buffer(options.salt);\n        const version = 0x13;\n        const hashType = getHashType(options.hashType);\n        const { memorySize } = options; // in KB\n        const [argon2Interface, blake512] = yield Promise.all([\n            WASMInterface(wasmJson$i, 1024),\n            createBLAKE2b(512),\n        ]);\n        // last block is for storing the init vector\n        argon2Interface.setMemorySize(memorySize * 1024 + 1024);\n        const initVector = new Uint8Array(24);\n        const initVectorView = new DataView(initVector.buffer);\n        initVectorView.setInt32(0, parallelism, true);\n        initVectorView.setInt32(4, hashLength, true);\n        initVectorView.setInt32(8, memorySize, true);\n        initVectorView.setInt32(12, iterations, true);\n        initVectorView.setInt32(16, version, true);\n        initVectorView.setInt32(20, hashType, true);\n        argon2Interface.writeMemory(initVector, memorySize * 1024);\n        blake512.init();\n        blake512.update(initVector);\n        blake512.update(int32LE(password.length));\n        blake512.update(password);\n        blake512.update(int32LE(salt.length));\n        blake512.update(salt);\n        blake512.update(int32LE(0)); // key length + key\n        blake512.update(int32LE(0)); // associatedData length + associatedData\n        const segments = Math.floor(memorySize / (parallelism * 4)); // length of each lane\n        const lanes = segments * 4;\n        const param = new Uint8Array(72);\n        const H0 = blake512.digest('binary');\n        param.set(H0);\n        for (let lane = 0; lane < parallelism; lane++) {\n            param.set(int32LE(0), 64);\n            param.set(int32LE(lane), 68);\n            let position = lane * lanes;\n            let chunk = yield hashFunc(blake512, param, 1024);\n            argon2Interface.writeMemory(chunk, position * 1024);\n            position += 1;\n            param.set(int32LE(1), 64);\n            chunk = yield hashFunc(blake512, param, 1024);\n            argon2Interface.writeMemory(chunk, position * 1024);\n        }\n        const C = new Uint8Array(1024);\n        writeHexToUInt8(C, argon2Interface.calculate(new Uint8Array([]), memorySize));\n        const res = yield hashFunc(blake512, C, hashLength);\n        if (options.outputType === 'hex') {\n            const digestChars = new Uint8Array(hashLength * 2);\n            return getDigestHex(digestChars, res, hashLength);\n        }\n        if (options.outputType === 'encoded') {\n            return encodeResult(salt, options, res);\n        }\n        // return binary format\n        return res;\n    });\n}\nconst validateOptions$3 = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (!options.password) {\n        throw new Error('Password must be specified');\n    }\n    options.password = getUInt8Buffer(options.password);\n    if (options.password.length < 1) {\n        throw new Error('Password must be specified');\n    }\n    if (!options.salt) {\n        throw new Error('Salt must be specified');\n    }\n    options.salt = getUInt8Buffer(options.salt);\n    if (options.salt.length < 8) {\n        throw new Error('Salt should be at least 8 bytes long');\n    }\n    if (!Number.isInteger(options.iterations) || options.iterations < 1) {\n        throw new Error('Iterations should be a positive number');\n    }\n    if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {\n        throw new Error('Parallelism should be a positive number');\n    }\n    if (!Number.isInteger(options.hashLength) || options.hashLength < 4) {\n        throw new Error('Hash length should be at least 4 bytes.');\n    }\n    if (!Number.isInteger(options.memorySize)) {\n        throw new Error('Memory size should be specified.');\n    }\n    if (options.memorySize < 8 * options.parallelism) {\n        throw new Error('Memory size should be at least 8 * parallelism.');\n    }\n    if (options.outputType === undefined) {\n        options.outputType = 'hex';\n    }\n    if (!['hex', 'binary', 'encoded'].includes(options.outputType)) {\n        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);\n    }\n};\n/**\n * Calculates hash using the argon2i password-hashing function\n * @returns Computed hash\n */\nfunction argon2i(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$3(options);\n        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'i' }));\n    });\n}\n/**\n * Calculates hash using the argon2id password-hashing function\n * @returns Computed hash\n */\nfunction argon2id(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$3(options);\n        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'id' }));\n    });\n}\n/**\n * Calculates hash using the argon2d password-hashing function\n * @returns Computed hash\n */\nfunction argon2d(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$3(options);\n        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'd' }));\n    });\n}\nconst getHashParameters = (password, encoded) => {\n    const regex = /^\\$argon2(id|i|d)\\$v=([0-9]+)\\$((?:[mtp]=[0-9]+,){2}[mtp]=[0-9]+)\\$([A-Za-z0-9+/]+)\\$([A-Za-z0-9+/]+)$/;\n    const match = encoded.match(regex);\n    if (!match) {\n        throw new Error('Invalid hash');\n    }\n    const [, hashType, version, parameters, salt, hash] = match;\n    if (version !== '19') {\n        throw new Error(`Unsupported version: ${version}`);\n    }\n    const parsedParameters = {};\n    const paramMap = { m: 'memorySize', p: 'parallelism', t: 'iterations' };\n    parameters.split(',').forEach((x) => {\n        const [n, v] = x.split('=');\n        parsedParameters[paramMap[n]] = parseInt(v, 10);\n    });\n    return Object.assign(Object.assign({}, parsedParameters), { password, hashType: hashType, salt: decodeBase64(salt), hashLength: getDecodeBase64Length(hash), outputType: 'encoded' });\n};\nconst validateVerifyOptions$1 = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (options.hash === undefined || typeof options.hash !== 'string') {\n        throw new Error('Hash should be specified');\n    }\n};\n/**\n * Verifies password using the argon2 password-hashing function\n * @returns True if the encoded hash matches the password\n */\nfunction argon2Verify(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateVerifyOptions$1(options);\n        const params = getHashParameters(options.password, options.hash);\n        validateOptions$3(params);\n        const hashStart = options.hash.lastIndexOf('$') + 1;\n        const result = yield argon2Internal(params);\n        return result.substring(hashStart) === options.hash.substring(hashStart);\n    });\n}\n\nvar name$h = \"blake2s\";\nvar data$h = \"\";\nvar hash$h = \"0f570f49\";\nvar wasmJson$h = {\n\tname: name$h,\n\tdata: data$h,\n\thash: hash$h\n};\n\nconst mutex$j = new Mutex();\nlet wasmCache$j = null;\nfunction validateBits$3(bits) {\n    if (!Number.isInteger(bits) || bits < 8 || bits > 256 || bits % 8 !== 0) {\n        return new Error('Invalid variant! Valid values: 8, 16, ..., 256');\n    }\n    return null;\n}\nfunction getInitParam(outputBits, keyBits) {\n    // eslint-disable-next-line no-bitwise\n    return outputBits | (keyBits << 16);\n}\n/**\n * Calculates BLAKE2s hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8, between 8 and 256. Defaults to 256.\n * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.\n * @returns Computed hash as a hexadecimal string\n */\nfunction blake2s(data, bits = 256, key = null) {\n    if (validateBits$3(bits)) {\n        return Promise.reject(validateBits$3(bits));\n    }\n    let keyBuffer = null;\n    let initParam = bits;\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length > 32) {\n            return Promise.reject(new Error('Max key length is 32 bytes'));\n        }\n        initParam = getInitParam(bits, keyBuffer.length);\n    }\n    const hashLength = bits / 8;\n    if (wasmCache$j === null || wasmCache$j.hashLength !== hashLength) {\n        return lockedCreate(mutex$j, wasmJson$h, hashLength)\n            .then((wasm) => {\n            wasmCache$j = wasm;\n            if (initParam > 512) {\n                wasmCache$j.writeMemory(keyBuffer);\n            }\n            return wasmCache$j.calculate(data, initParam);\n        });\n    }\n    try {\n        if (initParam > 512) {\n            wasmCache$j.writeMemory(keyBuffer);\n        }\n        const hash = wasmCache$j.calculate(data, initParam);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new BLAKE2s hash instance\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8, between 8 and 256. Defaults to 256.\n * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.\n */\nfunction createBLAKE2s(bits = 256, key = null) {\n    if (validateBits$3(bits)) {\n        return Promise.reject(validateBits$3(bits));\n    }\n    let keyBuffer = null;\n    let initParam = bits;\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length > 32) {\n            return Promise.reject(new Error('Max key length is 32 bytes'));\n        }\n        initParam = getInitParam(bits, keyBuffer.length);\n    }\n    const outputSize = bits / 8;\n    return WASMInterface(wasmJson$h, outputSize).then((wasm) => {\n        if (initParam > 512) {\n            wasm.writeMemory(keyBuffer);\n        }\n        wasm.init(initParam);\n        const obj = {\n            init: initParam > 512\n                ? () => {\n                    wasm.writeMemory(keyBuffer);\n                    wasm.init(initParam);\n                    return obj;\n                }\n                : () => {\n                    wasm.init(initParam);\n                    return obj;\n                },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nvar name$g = \"blake3\";\nvar data$g = \"\";\nvar hash$g = \"e8655383\";\nvar wasmJson$g = {\n\tname: name$g,\n\tdata: data$g,\n\thash: hash$g\n};\n\nconst mutex$i = new Mutex();\nlet wasmCache$i = null;\nfunction validateBits$2(bits) {\n    if (!Number.isInteger(bits) || bits < 8 || bits % 8 !== 0) {\n        return new Error('Invalid variant! Valid values: 8, 16, ...');\n    }\n    return null;\n}\n/**\n * Calculates BLAKE3 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8. Defaults to 256.\n * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.\n * @returns Computed hash as a hexadecimal string\n */\nfunction blake3(data, bits = 256, key = null) {\n    if (validateBits$2(bits)) {\n        return Promise.reject(validateBits$2(bits));\n    }\n    let keyBuffer = null;\n    let initParam = 0; // key is empty by default\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length !== 32) {\n            return Promise.reject(new Error('Key length must be exactly 32 bytes'));\n        }\n        initParam = 32;\n    }\n    const hashLength = bits / 8;\n    const digestParam = hashLength;\n    if (wasmCache$i === null || wasmCache$i.hashLength !== hashLength) {\n        return lockedCreate(mutex$i, wasmJson$g, hashLength)\n            .then((wasm) => {\n            wasmCache$i = wasm;\n            if (initParam === 32) {\n                wasmCache$i.writeMemory(keyBuffer);\n            }\n            return wasmCache$i.calculate(data, initParam, digestParam);\n        });\n    }\n    try {\n        if (initParam === 32) {\n            wasmCache$i.writeMemory(keyBuffer);\n        }\n        const hash = wasmCache$i.calculate(data, initParam, digestParam);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new BLAKE3 hash instance\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8. Defaults to 256.\n * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.\n */\nfunction createBLAKE3(bits = 256, key = null) {\n    if (validateBits$2(bits)) {\n        return Promise.reject(validateBits$2(bits));\n    }\n    let keyBuffer = null;\n    let initParam = 0; // key is empty by default\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length !== 32) {\n            return Promise.reject(new Error('Key length must be exactly 32 bytes'));\n        }\n        initParam = 32;\n    }\n    const outputSize = bits / 8;\n    const digestParam = outputSize;\n    return WASMInterface(wasmJson$g, outputSize).then((wasm) => {\n        if (initParam === 32) {\n            wasm.writeMemory(keyBuffer);\n        }\n        wasm.init(initParam);\n        const obj = {\n            init: initParam === 32\n                ? () => {\n                    wasm.writeMemory(keyBuffer);\n                    wasm.init(initParam);\n                    return obj;\n                }\n                : () => {\n                    wasm.init(initParam);\n                    return obj;\n                },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType, digestParam),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nvar name$f = \"crc32\";\nvar data$f = \"AGFzbQEAAAABEQRgAAF/YAF/AGAAAGACf38AAwgHAAEBAQIAAwQFAXABAQEFBAEBAgIGDgJ/AUGQyQULfwBBgAgLB3AIBm1lbW9yeQIADkhhc2hfR2V0QnVmZmVyAAAJSGFzaF9Jbml0AAILSGFzaF9VcGRhdGUAAwpIYXNoX0ZpbmFsAAQNSGFzaF9HZXRTdGF0ZQAFDkhhc2hfQ2FsY3VsYXRlAAYKU1RBVEVfU0laRQMBCq0HBwUAQYAJC8MDAQN/QYCJASEBQQAhAgNAIAFBAEEAQQBBAEEAQQBBAEEAIAJBAXFrIABxIAJBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzNgIAIAFBBGohASACQQFqIgJBgAJHDQALQQAhAANAIABBhJEBaiAAQYSJAWooAgAiAkH/AXFBAnRBgIkBaigCACACQQh2cyICNgIAIABBhJkBaiACQf8BcUECdEGAiQFqKAIAIAJBCHZzIgI2AgAgAEGEoQFqIAJB/wFxQQJ0QYCJAWooAgAgAkEIdnMiAjYCACAAQYSpAWogAkH/AXFBAnRBgIkBaigCACACQQh2cyICNgIAIABBhLEBaiACQf8BcUECdEGAiQFqKAIAIAJBCHZzIgI2AgAgAEGEuQFqIAJB/wFxQQJ0QYCJAWooAgAgAkEIdnMiAjYCACAAQYTBAWogAkH/AXFBAnRBgIkBaigCACACQQh2czYCACAAQQRqIgBB/AdHDQALCycAAkBBACgCgMkBIABGDQAgABABQQAgADYCgMkBC0EAQQA2AoTJAQuhAgEDf0EAKAKEyQFBf3MhAUGACSECAkAgAEEISQ0AQYAJIQIDQCACQQRqKAIAIgNBDnZB/AdxQYCRAWooAgAgA0EWdkH8B3FBgIkBaigCAHMgA0EGdkH8B3FBgJkBaigCAHMgA0H/AXFBAnRBgKEBaigCAHMgAigCACABcyIBQRZ2QfwHcUGAqQFqKAIAcyABQQ52QfwHcUGAsQFqKAIAcyABQQZ2QfwHcUGAuQFqKAIAcyABQf8BcUECdEGAwQFqKAIAcyEBIAJBCGohAiAAQXhqIgBBB0sNAAsLAkAgAEUNAANAIAFB/wFxIAItAABzQQJ0QYCJAWooAgAgAUEIdnMhASACQQFqIQIgAEF/aiIADQALC0EAIAFBf3M2AoTJAQszAQF/QQBBACgChMkBIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYCgAkLBgBBhMkBC1oAAkBBACgCgMkBIAFGDQAgARABQQAgATYCgMkBC0EAQQA2AoTJASAAEANBAEEAKAKEyQEiAUEYdCABQQh0QYCA/AdxciABQQh2QYD+A3EgAUEYdnJyNgKACQsLCwEAQYAICwQEAAAA\";\nvar hash$f = \"749723dc\";\nvar wasmJson$f = {\n\tname: name$f,\n\tdata: data$f,\n\thash: hash$f\n};\n\nconst mutex$h = new Mutex();\nlet wasmCache$h = null;\n/**\n * Calculates CRC-32 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction crc32(data) {\n    if (wasmCache$h === null) {\n        return lockedCreate(mutex$h, wasmJson$f, 4)\n            .then((wasm) => {\n            wasmCache$h = wasm;\n            return wasmCache$h.calculate(data, 0xEDB88320);\n        });\n    }\n    try {\n        const hash = wasmCache$h.calculate(data, 0xEDB88320);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new CRC-32 hash instance\n */\nfunction createCRC32() {\n    return WASMInterface(wasmJson$f, 4).then((wasm) => {\n        wasm.init(0xEDB88320);\n        const obj = {\n            init: () => { wasm.init(0xEDB88320); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 4,\n            digestSize: 4,\n        };\n        return obj;\n    });\n}\n\nconst mutex$g = new Mutex();\nlet wasmCache$g = null;\n/**\n * Calculates CRC-32C hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction crc32c(data) {\n    if (wasmCache$g === null) {\n        return lockedCreate(mutex$g, wasmJson$f, 4)\n            .then((wasm) => {\n            wasmCache$g = wasm;\n            return wasmCache$g.calculate(data, 0x82F63B78);\n        });\n    }\n    try {\n        const hash = wasmCache$g.calculate(data, 0x82F63B78);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new CRC-32C hash instance\n */\nfunction createCRC32C() {\n    return WASMInterface(wasmJson$f, 4).then((wasm) => {\n        wasm.init(0x82F63B78);\n        const obj = {\n            init: () => { wasm.init(0x82F63B78); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 4,\n            digestSize: 4,\n        };\n        return obj;\n    });\n}\n\nvar name$e = \"md4\";\nvar data$e = \"AGFzbQEAAAABEgRgAAF/YAAAYAF/AGACf38BfwMIBwABAgMBAAIEBQFwAQEBBQQBAQICBg4CfwFBoIoFC38AQYAICwdwCAZtZW1vcnkCAA5IYXNoX0dldEJ1ZmZlcgAACUhhc2hfSW5pdAABC0hhc2hfVXBkYXRlAAIKSGFzaF9GaW5hbAAEDUhhc2hfR2V0U3RhdGUABQ5IYXNoX0NhbGN1bGF0ZQAGClNUQVRFX1NJWkUDAQqXEQcFAEGACQstAEEAQv6568XpjpWZEDcCkIkBQQBCgcaUupbx6uZvNwKIiQFBAEIANwKAiQEL6AIBA39BAEEAKAKAiQEiASAAakH/////AXEiAjYCgIkBQQAoAoSJASEDAkAgAiABTw0AQQAgA0EBaiIDNgKEiQELQQAgAyAAQR12ajYChIkBAkACQAJAAkACQAJAIAFBP3EiAw0AQYAJIQIMAQtBwAAgA2siAiAASw0BIANBGGohA0EAIQEDQCADIAFqQYCJAWogAUGACWotAAA6AAAgAyABQQFqIgFqQdgARw0AC0GYiQFBwAAQAxogACACayEAIAJBgAlqIQILIABBwABPDQEgACEDDAILIABFDQJBACEBIANBmIkBakEALQCACToAACAAQQFGDQIgA0GZiQFqIQMgAEF/aiECA0AgAyABaiABQYEJai0AADoAACACIAFBAWoiAUcNAAwDCwsgAEE/cSEDIAIgAEFAcRADIQILIANFDQBBACEBA0AgAUGYiQFqIAIgAWotAAA6AAAgAyABQQFqIgFHDQALCwuYCwEXf0EAKAKUiQEhAkEAKAKQiQEhA0EAKAKMiQEhBEEAKAKIiQEhBQNAIABBHGooAgAiBiAAQRRqKAIAIgcgAEEYaigCACIIIABBEGooAgAiCSAAQSxqKAIAIgogAEEoaigCACILIABBJGooAgAiDCAAQSBqKAIAIg0gCyAIIABBCGooAgAiDiADaiAAQQRqKAIAIg8gAmogBCADIAJzcSACcyAFaiAAKAIAIhBqQQN3IhEgBCADc3EgA3NqQQd3IhIgESAEc3EgBHNqQQt3IhNqIBIgB2ogESAJaiAAQQxqKAIAIhQgBGogEyASIBFzcSARc2pBE3ciESATIBJzcSASc2pBA3ciEiARIBNzcSATc2pBB3ciEyASIBFzcSARc2pBC3ciFWogEyAMaiASIA1qIBEgBmogFSATIBJzcSASc2pBE3ciESAVIBNzcSATc2pBA3ciEiARIBVzcSAVc2pBB3ciEyASIBFzcSARc2pBC3ciFSAAQThqKAIAIhZqIBMgAEE0aigCACIXaiASIABBMGooAgAiGGogESAKaiAVIBMgEnNxIBJzakETdyISIBUgE3NxIBNzakEDdyITIBIgFXNxIBVzakEHdyIVIBMgEnNxIBJzakELdyIRaiAJIBVqIBAgE2ogEiAAQTxqKAIAIglqIBEgFSATc3EgE3NqQRN3IhIgESAVcnEgESAVcXJqQZnzidQFakEDdyITIBIgEXJxIBIgEXFyakGZ84nUBWpBBXciESATIBJycSATIBJxcmpBmfOJ1AVqQQl3IhVqIAcgEWogDyATaiAYIBJqIBUgESATcnEgESATcXJqQZnzidQFakENdyISIBUgEXJxIBUgEXFyakGZ84nUBWpBA3ciESASIBVycSASIBVxcmpBmfOJ1AVqQQV3IhMgESAScnEgESAScXJqQZnzidQFakEJdyIVaiAIIBNqIA4gEWogFyASaiAVIBMgEXJxIBMgEXFyakGZ84nUBWpBDXciESAVIBNycSAVIBNxcmpBmfOJ1AVqQQN3IhIgESAVcnEgESAVcXJqQZnzidQFakEFdyITIBIgEXJxIBIgEXFyakGZ84nUBWpBCXciFWogBiATaiAUIBJqIBYgEWogFSATIBJycSATIBJxcmpBmfOJ1AVqQQ13IhEgFSATcnEgFSATcXJqQZnzidQFakEDdyISIBEgFXJxIBEgFXFyakGZ84nUBWpBBXciEyASIBFycSASIBFxcmpBmfOJ1AVqQQl3IhVqIBAgEmogCSARaiAVIBMgEnJxIBMgEnFyakGZ84nUBWpBDXciBiAVcyISIBNzakGh1+f2BmpBA3ciESAGcyANIBNqIBIgEXNqQaHX5/YGakEJdyISc2pBodfn9gZqQQt3IhNqIA4gEWogEyAScyAYIAZqIBIgEXMgE3NqQaHX5/YGakEPdyIRc2pBodfn9gZqQQN3IhUgEXMgCyASaiARIBNzIBVzakGh1+f2BmpBCXciEnNqQaHX5/YGakELdyITaiAPIBVqIBMgEnMgFiARaiASIBVzIBNzakGh1+f2BmpBD3ciEXNqQaHX5/YGakEDdyIVIBFzIAwgEmogESATcyAVc2pBodfn9gZqQQl3IhJzakGh1+f2BmpBC3ciE2ogFCAVaiATIBJzIBcgEWogEiAVcyATc2pBodfn9gZqQQ93IhFzakGh1+f2BmpBA3ciFSARcyAKIBJqIBEgE3MgFXNqQaHX5/YGakEJdyISc2pBodfn9gZqQQt3IhMgA2ohAyAJIBFqIBIgFXMgE3NqQaHX5/YGakEPdyAEaiEEIBIgAmohAiAVIAVqIQUgAEHAAGohACABQUBqIgENAAtBACACNgKUiQFBACADNgKQiQFBACAENgKMiQFBACAFNgKIiQEgAAuhAgEDf0EAKAKAiQEiAEE/cSIBQZiJAWpBgAE6AAACQAJAAkAgAUE/cyICQQdLDQACQCACRQ0AIAFBmYkBaiEAA0AgAEEAOgAAIABBAWohACACQX9qIgINAAsLQcAAIQJBmIkBQcAAEAMaQQAhAAwBCyACQQhGDQEgAUEBaiEACyAAQY+JAWohAQNAIAEgAmpBADoAACACQXdqIQAgAkF/aiECIABBAEoNAAtBACgCgIkBIQALQQAgAEEVdjoA04kBQQAgAEENdjoA0okBQQAgAEEFdjoA0YkBQQAgAEEDdCICOgDQiQFBACACNgKAiQFBAEEAKAKEiQE2AtSJAUGYiQFBwAAQAxpBAEEAKQKIiQE3A4AJQQBBACkCkIkBNwOICQsGAEGAiQELMwBBAEL+uevF6Y6VmRA3ApCJAUEAQoHGlLqW8ermbzcCiIkBQQBCADcCgIkBIAAQAhAECwsLAQBBgAgLBJgAAAA=\";\nvar hash$e = \"1bf01052\";\nvar wasmJson$e = {\n\tname: name$e,\n\tdata: data$e,\n\thash: hash$e\n};\n\nconst mutex$f = new Mutex();\nlet wasmCache$f = null;\n/**\n * Calculates MD4 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction md4(data) {\n    if (wasmCache$f === null) {\n        return lockedCreate(mutex$f, wasmJson$e, 16)\n            .then((wasm) => {\n            wasmCache$f = wasm;\n            return wasmCache$f.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$f.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new MD4 hash instance\n */\nfunction createMD4() {\n    return WASMInterface(wasmJson$e, 16).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 16,\n        };\n        return obj;\n    });\n}\n\nvar name$d = \"md5\";\nvar data$d = \"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\";\nvar hash$d = \"9b0fac7d\";\nvar wasmJson$d = {\n\tname: name$d,\n\tdata: data$d,\n\thash: hash$d\n};\n\nconst mutex$e = new Mutex();\nlet wasmCache$e = null;\n/**\n * Calculates MD5 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction md5(data) {\n    if (wasmCache$e === null) {\n        return lockedCreate(mutex$e, wasmJson$d, 16)\n            .then((wasm) => {\n            wasmCache$e = wasm;\n            return wasmCache$e.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$e.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new MD5 hash instance\n */\nfunction createMD5() {\n    return WASMInterface(wasmJson$d, 16).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 16,\n        };\n        return obj;\n    });\n}\n\nvar name$c = \"sha1\";\nvar data$c = \"AGFzbQEAAAABEQRgAAF/YAJ/fwBgAABgAX8AAwkIAAECAQMCAAMEBQFwAQEBBQQBAQICBg4CfwFB4IkFC38AQYAICwdwCAZtZW1vcnkCAA5IYXNoX0dldEJ1ZmZlcgAACUhhc2hfSW5pdAACC0hhc2hfVXBkYXRlAAQKSGFzaF9GaW5hbAAFDUhhc2hfR2V0U3RhdGUABg5IYXNoX0NhbGN1bGF0ZQAHClNUQVRFX1NJWkUDAQqfKQgFAEGACQurIgoBfgJ/AX4BfwF+A38BfgF/AX5HfyAAIAEpAxAiAkIgiKciA0EYdCADQQh0QYCA/AdxciACQiiIp0GA/gNxIAJCOIincnIiBCABKQMIIgVCIIinIgNBGHQgA0EIdEGAgPwHcXIgBUIoiKdBgP4DcSAFQjiIp3JyIgZzIAEpAygiB0IgiKciA0EYdCADQQh0QYCA/AdxciAHQiiIp0GA/gNxIAdCOIincnIiCHMgBaciA0EYdCADQQh0QYCA/AdxciADQQh2QYD+A3EgA0EYdnJyIgkgASkDACIFpyIDQRh0IANBCHRBgID8B3FyIANBCHZBgP4DcSADQRh2cnIiCnMgASkDICILpyIDQRh0IANBCHRBgID8B3FyIANBCHZBgP4DcSADQRh2cnIiDHMgASkDMCINQiCIpyIDQRh0IANBCHRBgID8B3FyIA1CKIinQYD+A3EgDUI4iKdyciIDc0EBdyIOc0EBdyIPIAYgBUIgiKciEEEYdCAQQQh0QYCA/AdxciAFQiiIp0GA/gNxIAVCOIincnIiEXMgC0IgiKciEEEYdCAQQQh0QYCA/AdxciALQiiIp0GA/gNxIAtCOIincnIiEnMgASkDOCIFpyIQQRh0IBBBCHRBgID8B3FyIBBBCHZBgP4DcSAQQRh2cnIiEHNBAXciE3MgCCAScyATcyAMIAEpAxgiC6ciAUEYdCABQQh0QYCA/AdxciABQQh2QYD+A3EgAUEYdnJyIhRzIBBzIA9zQQF3IgFzQQF3IhVzIA4gEHMgAXMgAyAIcyAPcyAHpyIWQRh0IBZBCHRBgID8B3FyIBZBCHZBgP4DcSAWQRh2cnIiFyAMcyAOcyALQiCIpyIWQRh0IBZBCHRBgID8B3FyIAtCKIinQYD+A3EgC0I4iKdyciIYIARzIANzIAKnIhZBGHQgFkEIdEGAgPwHcXIgFkEIdkGA/gNxIBZBGHZyciIZIAlzIBdzIAVCIIinIhZBGHQgFkEIdEGAgPwHcXIgBUIoiKdBgP4DcSAFQjiIp3JyIhZzQQF3IhpzQQF3IhtzQQF3IhxzQQF3Ih1zQQF3Ih5zQQF3Ih8gEyAWcyASIBhzIBZzIBQgGXMgDaciIEEYdCAgQQh0QYCA/AdxciAgQQh2QYD+A3EgIEEYdnJyIiFzIBNzQQF3IiBzQQF3IiJzIBAgIXMgIHMgFXNBAXciI3NBAXciJHMgFSAicyAkcyABICBzICNzIB9zQQF3IiVzQQF3IiZzIB4gI3MgJXMgHSAVcyAfcyAcIAFzIB5zIBsgD3MgHXMgGiAOcyAccyAWIANzIBtzICEgF3MgGnMgInNBAXciJ3NBAXciKHNBAXciKXNBAXciKnNBAXciK3NBAXciLHNBAXciLXNBAXciLiAkIChzICIgG3MgKHMgICAacyAncyAkc0EBdyIvc0EBdyIwcyAjICdzIC9zICZzQQF3IjFzQQF3IjJzICYgMHMgMnMgJSAvcyAxcyAuc0EBdyIzc0EBdyI0cyAtIDFzIDNzICwgJnMgLnMgKyAlcyAtcyAqIB9zICxzICkgHnMgK3MgKCAdcyAqcyAnIBxzIClzIDBzQQF3IjVzQQF3IjZzQQF3IjdzQQF3IjhzQQF3IjlzQQF3IjpzQQF3IjtzQQF3IjwgMiA2cyAwICpzIDZzIC8gKXMgNXMgMnNBAXciPXNBAXciPnMgMSA1cyA9cyA0c0EBdyI/c0EBdyJAcyA0ID5zIEBzIDMgPXMgP3MgPHNBAXciQXNBAXciQnMgOyA/cyBBcyA6IDRzIDxzIDkgM3MgO3MgOCAucyA6cyA3IC1zIDlzIDYgLHMgOHMgNSArcyA3cyA+c0EBdyJDc0EBdyJEc0EBdyJFc0EBdyJGc0EBdyJHc0EBdyJIc0EBdyJJc0EBdyJKID8gQ3MgPSA3cyBDcyBAc0EBdyJLcyBCc0EBdyJMID4gOHMgRHMgS3NBAXciTSBFIDogMyAyIDUgKiAeIBUgICAWIBcgACgCACJOQQV3IAAoAhAiT2ogCmogACgCDCJQIAAoAggiCnMgACgCBCJRcSBQc2pBmfOJ1AVqIlJBHnciUyAEaiBRQR53IgQgBmogUCAEIApzIE5xIApzaiARaiBSQQV3akGZ84nUBWoiESBTIE5BHnciBnNxIAZzaiAKIAlqIFIgBCAGc3EgBHNqIBFBBXdqQZnzidQFaiJSQQV3akGZ84nUBWoiVCBSQR53IgQgEUEedyIJc3EgCXNqIAYgGWogUiAJIFNzcSBTc2ogVEEFd2pBmfOJ1AVqIgZBBXdqQZnzidQFaiIZQR53IlNqIAwgVEEedyIXaiAJIBRqIAYgFyAEc3EgBHNqIBlBBXdqQZnzidQFaiIJIFMgBkEedyIMc3EgDHNqIBggBGogGSAMIBdzcSAXc2ogCUEFd2pBmfOJ1AVqIgZBBXdqQZnzidQFaiIUIAZBHnciFyAJQR53IgRzcSAEc2ogEiAMaiAGIAQgU3NxIFNzaiAUQQV3akGZ84nUBWoiEkEFd2pBmfOJ1AVqIlNBHnciDGogAyAUQR53IhZqIAggBGogEiAWIBdzcSAXc2ogU0EFd2pBmfOJ1AVqIgggDCASQR53IgNzcSADc2ogISAXaiBTIAMgFnNxIBZzaiAIQQV3akGZ84nUBWoiEkEFd2pBmfOJ1AVqIhcgEkEedyIWIAhBHnciCHNxIAhzaiAQIANqIBIgCCAMc3EgDHNqIBdBBXdqQZnzidQFaiIMQQV3akGZ84nUBWoiEkEedyIDaiATIBZqIBIgDEEedyIQIBdBHnciE3NxIBNzaiAOIAhqIAwgEyAWc3EgFnNqIBJBBXdqQZnzidQFaiIOQQV3akGZ84nUBWoiFkEedyIgIA5BHnciCHMgGiATaiAOIAMgEHNxIBBzaiAWQQV3akGZ84nUBWoiDnNqIA8gEGogFiAIIANzcSADc2ogDkEFd2pBmfOJ1AVqIgNBBXdqQaHX5/YGaiIPQR53IhBqIAEgIGogA0EedyIBIA5BHnciDnMgD3NqIBsgCGogDiAgcyADc2ogD0EFd2pBodfn9gZqIgNBBXdqQaHX5/YGaiIPQR53IhMgA0EedyIVcyAiIA5qIBAgAXMgA3NqIA9BBXdqQaHX5/YGaiIDc2ogHCABaiAVIBBzIA9zaiADQQV3akGh1+f2BmoiAUEFd2pBodfn9gZqIg5BHnciD2ogHSATaiABQR53IhAgA0EedyIDcyAOc2ogJyAVaiADIBNzIAFzaiAOQQV3akGh1+f2BmoiAUEFd2pBodfn9gZqIg5BHnciEyABQR53IhVzICMgA2ogDyAQcyABc2ogDkEFd2pBodfn9gZqIgFzaiAoIBBqIBUgD3MgDnNqIAFBBXdqQaHX5/YGaiIDQQV3akGh1+f2BmoiDkEedyIPaiApIBNqIANBHnciECABQR53IgFzIA5zaiAkIBVqIAEgE3MgA3NqIA5BBXdqQaHX5/YGaiIDQQV3akGh1+f2BmoiDkEedyITIANBHnciFXMgHyABaiAPIBBzIANzaiAOQQV3akGh1+f2BmoiAXNqIC8gEGogFSAPcyAOc2ogAUEFd2pBodfn9gZqIgNBBXdqQaHX5/YGaiIOQR53Ig9qICsgAUEedyIBaiAPIANBHnciEHMgJSAVaiABIBNzIANzaiAOQQV3akGh1+f2BmoiFXNqIDAgE2ogECABcyAOc2ogFUEFd2pBodfn9gZqIg5BBXdqQaHX5/YGaiIBIA5BHnciA3IgFUEedyITcSABIANxcmogJiAQaiATIA9zIA5zaiABQQV3akGh1+f2BmoiDkEFd2pB3Pnu+HhqIg9BHnciEGogNiABQR53IgFqICwgE2ogDiABciADcSAOIAFxcmogD0EFd2pB3Pnu+HhqIhMgEHIgDkEedyIOcSATIBBxcmogMSADaiAPIA5yIAFxIA8gDnFyaiATQQV3akHc+e74eGoiAUEFd2pB3Pnu+HhqIgMgAUEedyIPciATQR53IhNxIAMgD3FyaiAtIA5qIAEgE3IgEHEgASATcXJqIANBBXdqQdz57vh4aiIBQQV3akHc+e74eGoiDkEedyIQaiA9IANBHnciA2ogNyATaiABIANyIA9xIAEgA3FyaiAOQQV3akHc+e74eGoiEyAQciABQR53IgFxIBMgEHFyaiAuIA9qIA4gAXIgA3EgDiABcXJqIBNBBXdqQdz57vh4aiIDQQV3akHc+e74eGoiDiADQR53Ig9yIBNBHnciE3EgDiAPcXJqIDggAWogAyATciAQcSADIBNxcmogDkEFd2pB3Pnu+HhqIgFBBXdqQdz57vh4aiIDQR53IhBqIDQgDkEedyIOaiA+IBNqIAEgDnIgD3EgASAOcXJqIANBBXdqQdz57vh4aiITIBByIAFBHnciAXEgEyAQcXJqIDkgD2ogAyABciAOcSADIAFxcmogE0EFd2pB3Pnu+HhqIgNBBXdqQdz57vh4aiIOIANBHnciD3IgE0EedyITcSAOIA9xcmogQyABaiADIBNyIBBxIAMgE3FyaiAOQQV3akHc+e74eGoiAUEFd2pB3Pnu+HhqIgNBHnciEGogRCAPaiADIAFBHnciFXIgDkEedyIOcSADIBVxcmogPyATaiABIA5yIA9xIAEgDnFyaiADQQV3akHc+e74eGoiAUEFd2pB3Pnu+HhqIgNBHnciEyABQR53Ig9zIDsgDmogASAQciAVcSABIBBxcmogA0EFd2pB3Pnu+HhqIgFzaiBAIBVqIAMgD3IgEHEgAyAPcXJqIAFBBXdqQdz57vh4aiIDQQV3akHWg4vTfGoiDkEedyIQaiBLIBNqIANBHnciFSABQR53IgFzIA5zaiA8IA9qIAEgE3MgA3NqIA5BBXdqQdaDi9N8aiIDQQV3akHWg4vTfGoiDkEedyIPIANBHnciE3MgRiABaiAQIBVzIANzaiAOQQV3akHWg4vTfGoiAXNqIEEgFWogEyAQcyAOc2ogAUEFd2pB1oOL03xqIgNBBXdqQdaDi9N8aiIOQR53IhBqIEIgD2ogA0EedyIVIAFBHnciAXMgDnNqIEcgE2ogASAPcyADc2ogDkEFd2pB1oOL03xqIgNBBXdqQdaDi9N8aiIOQR53Ig8gA0EedyITcyBDIDlzIEVzIE1zQQF3IhYgAWogECAVcyADc2ogDkEFd2pB1oOL03xqIgFzaiBIIBVqIBMgEHMgDnNqIAFBBXdqQdaDi9N8aiIDQQV3akHWg4vTfGoiDkEedyIQaiBJIA9qIANBHnciFSABQR53IgFzIA5zaiBEIDpzIEZzIBZzQQF3IhogE2ogASAPcyADc2ogDkEFd2pB1oOL03xqIgNBBXdqQdaDi9N8aiIOQR53Ig8gA0EedyITcyBAIERzIE1zIExzQQF3IhsgAWogECAVcyADc2ogDkEFd2pB1oOL03xqIgFzaiBFIDtzIEdzIBpzQQF3IhwgFWogEyAQcyAOc2ogAUEFd2pB1oOL03xqIgNBBXdqQdaDi9N8aiIOQR53IhAgT2o2AhAgACBQIEsgRXMgFnMgG3NBAXciFSATaiABQR53IgEgD3MgA3NqIA5BBXdqQdaDi9N8aiITQR53IhZqNgIMIAAgCiBGIDxzIEhzIBxzQQF3IA9qIANBHnciAyABcyAOc2ogE0EFd2pB1oOL03xqIg5BHndqNgIIIAAgUSBBIEtzIExzIEpzQQF3IAFqIBAgA3MgE3NqIA5BBXdqQdaDi9N8aiIBajYCBCAAIE4gTSBGcyAacyAVc0EBd2ogA2ogFiAQcyAOc2ogAUEFd2pB1oOL03xqNgIACzoAQQBC/rnrxemOlZkQNwKIiQFBAEKBxpS6lvHq5m83AoCJAUEAQvDDy54MNwKQiQFBAEEANgKYiQELqgIBBH9BACECQQBBACgClIkBIgMgAUEDdGoiBDYClIkBQQAoApiJASEFAkAgBCADTw0AQQAgBUEBaiIFNgKYiQELQQAgBSABQR12ajYCmIkBAkAgA0EDdkE/cSIEIAFqQcAASQ0AQcAAIARrIQJBACEDQQAhBQNAIAMgBGpBnIkBaiAAIANqLQAAOgAAIAIgBUEBaiIFQf8BcSIDSw0AC0GAiQFBnIkBEAEgBEH/AHMhA0EAIQQgAyABTw0AA0BBgIkBIAAgAmoQASACQf8AaiEDIAJBwABqIgUhAiADIAFJDQALIAUhAgsCQCABIAJrIgFFDQBBACEDQQAhBQNAIAMgBGpBnIkBaiAAIAMgAmpqLQAAOgAAIAEgBUEBaiIFQf8BcSIDSw0ACwsLCQBBgAkgABADC60DAQJ/IwBBEGsiACQAIABBgAE6AAcgAEEAKAKYiQEiAUEYdCABQQh0QYCA/AdxciABQQh2QYD+A3EgAUEYdnJyNgAIIABBACgClIkBIgFBGHQgAUEIdEGAgPwHcXIgAUEIdkGA/gNxIAFBGHZycjYADCAAQQdqQQEQAwJAQQAoApSJAUH4A3FBwANGDQADQCAAQQA6AAcgAEEHakEBEANBACgClIkBQfgDcUHAA0cNAAsLIABBCGpBCBADQQBBACgCgIkBIgFBGHQgAUEIdEGAgPwHcXIgAUEIdkGA/gNxIAFBGHZycjYCgAlBAEEAKAKEiQEiAUEYdCABQQh0QYCA/AdxciABQQh2QYD+A3EgAUEYdnJyNgKECUEAQQAoAoiJASIBQRh0IAFBCHRBgID8B3FyIAFBCHZBgP4DcSABQRh2cnI2AogJQQBBACgCjIkBIgFBGHQgAUEIdEGAgPwHcXIgAUEIdkGA/gNxIAFBGHZycjYCjAlBAEEAKAKQiQEiAUEYdCABQQh0QYCA/AdxciABQQh2QYD+A3EgAUEYdnJyNgKQCSAAQRBqJAALBgBBgIkBC0MAQQBC/rnrxemOlZkQNwKIiQFBAEKBxpS6lvHq5m83AoCJAUEAQvDDy54MNwKQiQFBAEEANgKYiQFBgAkgABADEAULCwsBAEGACAsEXAAAAA==\";\nvar hash$c = \"40d92e5d\";\nvar wasmJson$c = {\n\tname: name$c,\n\tdata: data$c,\n\thash: hash$c\n};\n\nconst mutex$d = new Mutex();\nlet wasmCache$d = null;\n/**\n * Calculates SHA-1 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha1(data) {\n    if (wasmCache$d === null) {\n        return lockedCreate(mutex$d, wasmJson$c, 20)\n            .then((wasm) => {\n            wasmCache$d = wasm;\n            return wasmCache$d.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$d.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-1 hash instance\n */\nfunction createSHA1() {\n    return WASMInterface(wasmJson$c, 20).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 20,\n        };\n        return obj;\n    });\n}\n\nvar name$b = \"sha3\";\nvar data$b = \"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\";\nvar hash$b = \"ec266d91\";\nvar wasmJson$b = {\n\tname: name$b,\n\tdata: data$b,\n\thash: hash$b\n};\n\nconst mutex$c = new Mutex();\nlet wasmCache$c = null;\nfunction validateBits$1(bits) {\n    if (![224, 256, 384, 512].includes(bits)) {\n        return new Error('Invalid variant! Valid values: 224, 256, 384, 512');\n    }\n    return null;\n}\n/**\n * Calculates SHA-3 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha3(data, bits = 512) {\n    if (validateBits$1(bits)) {\n        return Promise.reject(validateBits$1(bits));\n    }\n    const hashLength = bits / 8;\n    if (wasmCache$c === null || wasmCache$c.hashLength !== hashLength) {\n        return lockedCreate(mutex$c, wasmJson$b, hashLength)\n            .then((wasm) => {\n            wasmCache$c = wasm;\n            return wasmCache$c.calculate(data, bits, 0x06);\n        });\n    }\n    try {\n        const hash = wasmCache$c.calculate(data, bits, 0x06);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-3 hash instance\n * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n */\nfunction createSHA3(bits = 512) {\n    if (validateBits$1(bits)) {\n        return Promise.reject(validateBits$1(bits));\n    }\n    const outputSize = bits / 8;\n    return WASMInterface(wasmJson$b, outputSize).then((wasm) => {\n        wasm.init(bits);\n        const obj = {\n            init: () => { wasm.init(bits); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType, 0x06),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 200 - 2 * outputSize,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nconst mutex$b = new Mutex();\nlet wasmCache$b = null;\nfunction validateBits(bits) {\n    if (![224, 256, 384, 512].includes(bits)) {\n        return new Error('Invalid variant! Valid values: 224, 256, 384, 512');\n    }\n    return null;\n}\n/**\n * Calculates Keccak hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n * @returns Computed hash as a hexadecimal string\n */\nfunction keccak(data, bits = 512) {\n    if (validateBits(bits)) {\n        return Promise.reject(validateBits(bits));\n    }\n    const hashLength = bits / 8;\n    if (wasmCache$b === null || wasmCache$b.hashLength !== hashLength) {\n        return lockedCreate(mutex$b, wasmJson$b, hashLength)\n            .then((wasm) => {\n            wasmCache$b = wasm;\n            return wasmCache$b.calculate(data, bits, 0x01);\n        });\n    }\n    try {\n        const hash = wasmCache$b.calculate(data, bits, 0x01);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new Keccak hash instance\n * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n */\nfunction createKeccak(bits = 512) {\n    if (validateBits(bits)) {\n        return Promise.reject(validateBits(bits));\n    }\n    const outputSize = bits / 8;\n    return WASMInterface(wasmJson$b, outputSize).then((wasm) => {\n        wasm.init(bits);\n        const obj = {\n            init: () => { wasm.init(bits); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType, 0x01),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 200 - 2 * outputSize,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nvar name$a = \"sha256\";\nvar data$a = \"\";\nvar hash$a = \"817d957e\";\nvar wasmJson$a = {\n\tname: name$a,\n\tdata: data$a,\n\thash: hash$a\n};\n\nconst mutex$a = new Mutex();\nlet wasmCache$a = null;\n/**\n * Calculates SHA-2 (SHA-224) hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha224(data) {\n    if (wasmCache$a === null) {\n        return lockedCreate(mutex$a, wasmJson$a, 28)\n            .then((wasm) => {\n            wasmCache$a = wasm;\n            return wasmCache$a.calculate(data, 224);\n        });\n    }\n    try {\n        const hash = wasmCache$a.calculate(data, 224);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-2 (SHA-224) hash instance\n */\nfunction createSHA224() {\n    return WASMInterface(wasmJson$a, 28).then((wasm) => {\n        wasm.init(224);\n        const obj = {\n            init: () => { wasm.init(224); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 28,\n        };\n        return obj;\n    });\n}\n\nconst mutex$9 = new Mutex();\nlet wasmCache$9 = null;\n/**\n * Calculates SHA-2 (SHA-256) hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha256(data) {\n    if (wasmCache$9 === null) {\n        return lockedCreate(mutex$9, wasmJson$a, 32)\n            .then((wasm) => {\n            wasmCache$9 = wasm;\n            return wasmCache$9.calculate(data, 256);\n        });\n    }\n    try {\n        const hash = wasmCache$9.calculate(data, 256);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-2 (SHA-256) hash instance\n */\nfunction createSHA256() {\n    return WASMInterface(wasmJson$a, 32).then((wasm) => {\n        wasm.init(256);\n        const obj = {\n            init: () => { wasm.init(256); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 32,\n        };\n        return obj;\n    });\n}\n\nvar name$9 = \"sha512\";\nvar data$9 = \"\";\nvar hash$9 = \"a5d1ca7c\";\nvar wasmJson$9 = {\n\tname: name$9,\n\tdata: data$9,\n\thash: hash$9\n};\n\nconst mutex$8 = new Mutex();\nlet wasmCache$8 = null;\n/**\n * Calculates SHA-2 (SHA-384) hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha384(data) {\n    if (wasmCache$8 === null) {\n        return lockedCreate(mutex$8, wasmJson$9, 48)\n            .then((wasm) => {\n            wasmCache$8 = wasm;\n            return wasmCache$8.calculate(data, 384);\n        });\n    }\n    try {\n        const hash = wasmCache$8.calculate(data, 384);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-2 (SHA-384) hash instance\n */\nfunction createSHA384() {\n    return WASMInterface(wasmJson$9, 48).then((wasm) => {\n        wasm.init(384);\n        const obj = {\n            init: () => { wasm.init(384); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 128,\n            digestSize: 48,\n        };\n        return obj;\n    });\n}\n\nconst mutex$7 = new Mutex();\nlet wasmCache$7 = null;\n/**\n * Calculates SHA-2 (SHA-512) hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha512(data) {\n    if (wasmCache$7 === null) {\n        return lockedCreate(mutex$7, wasmJson$9, 64)\n            .then((wasm) => {\n            wasmCache$7 = wasm;\n            return wasmCache$7.calculate(data, 512);\n        });\n    }\n    try {\n        const hash = wasmCache$7.calculate(data, 512);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-2 (SHA-512) hash instance\n */\nfunction createSHA512() {\n    return WASMInterface(wasmJson$9, 64).then((wasm) => {\n        wasm.init(512);\n        const obj = {\n            init: () => { wasm.init(512); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 128,\n            digestSize: 64,\n        };\n        return obj;\n    });\n}\n\nvar name$8 = \"xxhash32\";\nvar data$8 = \"AGFzbQEAAAABEQRgAAF/YAF/AGAAAGACf38AAwcGAAEBAgADBAUBcAEBAQUEAQECAgYOAn8BQbCJBQt/AEGACAsHcAgGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAlIYXNoX0luaXQAAQtIYXNoX1VwZGF0ZQACCkhhc2hfRmluYWwAAw1IYXNoX0dldFN0YXRlAAQOSGFzaF9DYWxjdWxhdGUABQpTVEFURV9TSVpFAwEKswkGBQBBgAkLTQBBAEIANwOoiQFBACAANgKIiQFBACAAQc+Moo4GajYCjIkBQQAgAEH3lK+veGo2AoSJAUEAIABBqIiNoQJqNgKAiQFBAEEANgKgiQELswUBBn8CQCAARQ0AQQBBACkDqIkBIACtfDcDqIkBAkBBACgCoIkBIgEgAGpBD0sNAEEAIAFBAWo2AqCJASABQZCJAWpBAC0AgAk6AAAgAEEBRg0BQQEhAgNAQQBBACgCoIkBIgFBAWo2AqCJASABQZCJAWogAkGACWotAAA6AAAgACACQQFqIgJHDQAMAgsLIABB8AhqIQMCQAJAIAENAEEAKAKMiQEhAUEAKAKIiQEhBEEAKAKEiQEhBUEAKAKAiQEhBkGACSECDAELQYAJIQICQCABQQ9LDQBBgAkhAgNAIAItAAAhBEEAIAFBAWo2AqCJASABQZCJAWogBDoAACACQQFqIQJBACgCoIkBIgFBEEkNAAsLQQBBACgCkIkBQfeUr694bEEAKAKAiQFqQQ13QbHz3fF5bCIGNgKAiQFBAEEAKAKUiQFB95Svr3hsQQAoAoSJAWpBDXdBsfPd8XlsIgU2AoSJAUEAQQAoApiJAUH3lK+veGxBACgCiIkBakENd0Gx893xeWwiBDYCiIkBQQBBACgCnIkBQfeUr694bEEAKAKMiQFqQQ13QbHz3fF5bCIBNgKMiQELIABBgAlqIQACQCACIANLDQADQCACKAIAQfeUr694bCAGakENd0Gx893xeWwhBiACQQxqKAIAQfeUr694bCABakENd0Gx893xeWwhASACQQhqKAIAQfeUr694bCAEakENd0Gx893xeWwhBCACQQRqKAIAQfeUr694bCAFakENd0Gx893xeWwhBSACQRBqIgIgA00NAAsLQQAgATYCjIkBQQAgBDYCiIkBQQAgBTYChIkBQQAgBjYCgIkBQQAgACACayIBNgKgiQEgAUUNAEEAIQEDQCABQZCJAWogAiABai0AADoAACABQQFqIgFBACgCoIkBSQ0ACwsLzAICAX4Gf0EAKQOoiQEiAKchAQJAAkAgAEIQVA0AQQAoAoSJAUEHd0EAKAKAiQFBAXdqQQAoAoiJAUEMd2pBACgCjIkBQRJ3aiECDAELQQAoAoiJAUGxz9myAWohAgsgAiABaiECQZCJASEBQQAoAqCJASIDQZCJAWohBAJAIANBBEgNAEGQiQEhBQNAIAUoAgBBvdzKlXxsIAJqQRF3Qa/W074CbCECIAVBCGohBiAFQQRqIgEhBSAGIARNDQALCwJAIAEgBEYNACADQZCJAWohBQNAIAEtAABBsc/ZsgFsIAJqQQt3QbHz3fF5bCECIAUgAUEBaiIBRw0ACwtBACACQQ92IAJzQfeUr694bCIBQQ12IAFzQb3cypV8bCIBQRB2IAFzIgFBGHQgAUEIdEGAgPwHcXIgAUEIdkGA/gNxIAFBGHZycq03A4AJCwYAQYCJAQtTAEEAQgA3A6iJAUEAIAE2AoiJAUEAIAFBz4yijgZqNgKMiQFBACABQfeUr694ajYChIkBQQAgAUGoiI2hAmo2AoCJAUEAQQA2AqCJASAAEAIQAwsLCwEAQYAICwQwAAAA\";\nvar hash$8 = \"5b6a5062\";\nvar wasmJson$8 = {\n\tname: name$8,\n\tdata: data$8,\n\thash: hash$8\n};\n\nconst mutex$6 = new Mutex();\nlet wasmCache$6 = null;\nfunction validateSeed$3(seed) {\n    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n        return new Error('Seed must be a valid 32-bit long unsigned integer.');\n    }\n    return null;\n}\n/**\n * Calculates xxHash32 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)\n * @returns Computed hash as a hexadecimal string\n */\nfunction xxhash32(data, seed = 0) {\n    if (validateSeed$3(seed)) {\n        return Promise.reject(validateSeed$3(seed));\n    }\n    if (wasmCache$6 === null) {\n        return lockedCreate(mutex$6, wasmJson$8, 4)\n            .then((wasm) => {\n            wasmCache$6 = wasm;\n            return wasmCache$6.calculate(data, seed);\n        });\n    }\n    try {\n        const hash = wasmCache$6.calculate(data, seed);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new xxHash32 hash instance\n * @param data Input data (string, Buffer or TypedArray)\n * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)\n */\nfunction createXXHash32(seed = 0) {\n    if (validateSeed$3(seed)) {\n        return Promise.reject(validateSeed$3(seed));\n    }\n    return WASMInterface(wasmJson$8, 4).then((wasm) => {\n        wasm.init(seed);\n        const obj = {\n            init: () => { wasm.init(seed); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 16,\n            digestSize: 4,\n        };\n        return obj;\n    });\n}\n\nvar name$7 = \"xxhash64\";\nvar data$7 = \"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\";\nvar hash$7 = \"bc315b2a\";\nvar wasmJson$7 = {\n\tname: name$7,\n\tdata: data$7,\n\thash: hash$7\n};\n\nconst mutex$5 = new Mutex();\nlet wasmCache$5 = null;\nconst seedBuffer$2 = new ArrayBuffer(8);\nfunction validateSeed$2(seed) {\n    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n        return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n    }\n    return null;\n}\nfunction writeSeed$2(arr, low, high) {\n    // write in little-endian format\n    const buffer = new DataView(arr);\n    buffer.setUint32(0, low, true);\n    buffer.setUint32(4, high, true);\n}\n/**\n * Calculates xxHash64 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @returns Computed hash as a hexadecimal string\n */\nfunction xxhash64(data, seedLow = 0, seedHigh = 0) {\n    if (validateSeed$2(seedLow)) {\n        return Promise.reject(validateSeed$2(seedLow));\n    }\n    if (validateSeed$2(seedHigh)) {\n        return Promise.reject(validateSeed$2(seedHigh));\n    }\n    if (wasmCache$5 === null) {\n        return lockedCreate(mutex$5, wasmJson$7, 8)\n            .then((wasm) => {\n            wasmCache$5 = wasm;\n            writeSeed$2(seedBuffer$2, seedLow, seedHigh);\n            wasmCache$5.writeMemory(new Uint8Array(seedBuffer$2));\n            return wasmCache$5.calculate(data);\n        });\n    }\n    try {\n        writeSeed$2(seedBuffer$2, seedLow, seedHigh);\n        wasmCache$5.writeMemory(new Uint8Array(seedBuffer$2));\n        const hash = wasmCache$5.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new xxHash64 hash instance\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n */\nfunction createXXHash64(seedLow = 0, seedHigh = 0) {\n    if (validateSeed$2(seedLow)) {\n        return Promise.reject(validateSeed$2(seedLow));\n    }\n    if (validateSeed$2(seedHigh)) {\n        return Promise.reject(validateSeed$2(seedHigh));\n    }\n    return WASMInterface(wasmJson$7, 8).then((wasm) => {\n        const instanceBuffer = new ArrayBuffer(8);\n        writeSeed$2(instanceBuffer, seedLow, seedHigh);\n        wasm.writeMemory(new Uint8Array(instanceBuffer));\n        wasm.init();\n        const obj = {\n            init: () => {\n                wasm.writeMemory(new Uint8Array(instanceBuffer));\n                wasm.init();\n                return obj;\n            },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 32,\n            digestSize: 8,\n        };\n        return obj;\n    });\n}\n\nvar name$6 = \"xxhash3\";\nvar data$6 = \"\";\nvar hash$6 = \"187bc2c6\";\nvar wasmJson$6 = {\n\tname: name$6,\n\tdata: data$6,\n\thash: hash$6\n};\n\nconst mutex$4 = new Mutex();\nlet wasmCache$4 = null;\nconst seedBuffer$1 = new ArrayBuffer(8);\nfunction validateSeed$1(seed) {\n    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n        return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n    }\n    return null;\n}\nfunction writeSeed$1(arr, low, high) {\n    // write in little-endian format\n    const buffer = new DataView(arr);\n    buffer.setUint32(0, low, true);\n    buffer.setUint32(4, high, true);\n}\n/**\n * Calculates xxHash3 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @returns Computed hash as a hexadecimal string\n */\nfunction xxhash3(data, seedLow = 0, seedHigh = 0) {\n    if (validateSeed$1(seedLow)) {\n        return Promise.reject(validateSeed$1(seedLow));\n    }\n    if (validateSeed$1(seedHigh)) {\n        return Promise.reject(validateSeed$1(seedHigh));\n    }\n    if (wasmCache$4 === null) {\n        return lockedCreate(mutex$4, wasmJson$6, 8)\n            .then((wasm) => {\n            wasmCache$4 = wasm;\n            writeSeed$1(seedBuffer$1, seedLow, seedHigh);\n            wasmCache$4.writeMemory(new Uint8Array(seedBuffer$1));\n            return wasmCache$4.calculate(data);\n        });\n    }\n    try {\n        writeSeed$1(seedBuffer$1, seedLow, seedHigh);\n        wasmCache$4.writeMemory(new Uint8Array(seedBuffer$1));\n        const hash = wasmCache$4.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new xxHash3 hash instance\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n */\nfunction createXXHash3(seedLow = 0, seedHigh = 0) {\n    if (validateSeed$1(seedLow)) {\n        return Promise.reject(validateSeed$1(seedLow));\n    }\n    if (validateSeed$1(seedHigh)) {\n        return Promise.reject(validateSeed$1(seedHigh));\n    }\n    return WASMInterface(wasmJson$6, 8).then((wasm) => {\n        const instanceBuffer = new ArrayBuffer(8);\n        writeSeed$1(instanceBuffer, seedLow, seedHigh);\n        wasm.writeMemory(new Uint8Array(instanceBuffer));\n        wasm.init();\n        const obj = {\n            init: () => {\n                wasm.writeMemory(new Uint8Array(instanceBuffer));\n                wasm.init();\n                return obj;\n            },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 512,\n            digestSize: 8,\n        };\n        return obj;\n    });\n}\n\nvar name$5 = \"xxhash128\";\nvar data$5 = \"\";\nvar hash$5 = \"e8e3fcf8\";\nvar wasmJson$5 = {\n\tname: name$5,\n\tdata: data$5,\n\thash: hash$5\n};\n\nconst mutex$3 = new Mutex();\nlet wasmCache$3 = null;\nconst seedBuffer = new ArrayBuffer(8);\nfunction validateSeed(seed) {\n    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n        return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n    }\n    return null;\n}\nfunction writeSeed(arr, low, high) {\n    // write in little-endian format\n    const buffer = new DataView(arr);\n    buffer.setUint32(0, low, true);\n    buffer.setUint32(4, high, true);\n}\n/**\n * Calculates xxHash128 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @returns Computed hash as a hexadecimal string\n */\nfunction xxhash128(data, seedLow = 0, seedHigh = 0) {\n    if (validateSeed(seedLow)) {\n        return Promise.reject(validateSeed(seedLow));\n    }\n    if (validateSeed(seedHigh)) {\n        return Promise.reject(validateSeed(seedHigh));\n    }\n    if (wasmCache$3 === null) {\n        return lockedCreate(mutex$3, wasmJson$5, 16)\n            .then((wasm) => {\n            wasmCache$3 = wasm;\n            writeSeed(seedBuffer, seedLow, seedHigh);\n            wasmCache$3.writeMemory(new Uint8Array(seedBuffer));\n            return wasmCache$3.calculate(data);\n        });\n    }\n    try {\n        writeSeed(seedBuffer, seedLow, seedHigh);\n        wasmCache$3.writeMemory(new Uint8Array(seedBuffer));\n        const hash = wasmCache$3.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new xxHash128 hash instance\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n */\nfunction createXXHash128(seedLow = 0, seedHigh = 0) {\n    if (validateSeed(seedLow)) {\n        return Promise.reject(validateSeed(seedLow));\n    }\n    if (validateSeed(seedHigh)) {\n        return Promise.reject(validateSeed(seedHigh));\n    }\n    return WASMInterface(wasmJson$5, 16).then((wasm) => {\n        const instanceBuffer = new ArrayBuffer(8);\n        writeSeed(instanceBuffer, seedLow, seedHigh);\n        wasm.writeMemory(new Uint8Array(instanceBuffer));\n        wasm.init();\n        const obj = {\n            init: () => {\n                wasm.writeMemory(new Uint8Array(instanceBuffer));\n                wasm.init();\n                return obj;\n            },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 512,\n            digestSize: 16,\n        };\n        return obj;\n    });\n}\n\nvar name$4 = \"ripemd160\";\nvar data$4 = \"\";\nvar hash$4 = \"42f1de39\";\nvar wasmJson$4 = {\n\tname: name$4,\n\tdata: data$4,\n\thash: hash$4\n};\n\nconst mutex$2 = new Mutex();\nlet wasmCache$2 = null;\n/**\n * Calculates RIPEMD-160 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction ripemd160(data) {\n    if (wasmCache$2 === null) {\n        return lockedCreate(mutex$2, wasmJson$4, 20)\n            .then((wasm) => {\n            wasmCache$2 = wasm;\n            return wasmCache$2.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$2.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new RIPEMD-160 hash instance\n */\nfunction createRIPEMD160() {\n    return WASMInterface(wasmJson$4, 20).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 20,\n        };\n        return obj;\n    });\n}\n\nfunction calculateKeyBuffer(hasher, key) {\n    const { blockSize } = hasher;\n    const buf = getUInt8Buffer(key);\n    if (buf.length > blockSize) {\n        hasher.update(buf);\n        const uintArr = hasher.digest('binary');\n        hasher.init();\n        return uintArr;\n    }\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n}\nfunction calculateHmac(hasher, key) {\n    hasher.init();\n    const { blockSize } = hasher;\n    const keyBuf = calculateKeyBuffer(hasher, key);\n    const keyBuffer = new Uint8Array(blockSize);\n    keyBuffer.set(keyBuf);\n    const opad = new Uint8Array(blockSize);\n    for (let i = 0; i < blockSize; i++) {\n        const v = keyBuffer[i];\n        opad[i] = v ^ 0x5C;\n        keyBuffer[i] = v ^ 0x36;\n    }\n    hasher.update(keyBuffer);\n    const obj = {\n        init: () => {\n            hasher.init();\n            hasher.update(keyBuffer);\n            return obj;\n        },\n        update: (data) => {\n            hasher.update(data);\n            return obj;\n        },\n        digest: ((outputType) => {\n            const uintArr = hasher.digest('binary');\n            hasher.init();\n            hasher.update(opad);\n            hasher.update(uintArr);\n            return hasher.digest(outputType);\n        }),\n        save: () => {\n            throw new Error('save() not supported');\n        },\n        load: () => {\n            throw new Error('load() not supported');\n        },\n        blockSize: hasher.blockSize,\n        digestSize: hasher.digestSize,\n    };\n    return obj;\n}\n/**\n * Calculates HMAC hash\n * @param hash Hash algorithm to use. It has to be the return value of a function like createSHA1()\n * @param key Key (string, Buffer or TypedArray)\n */\nfunction createHMAC(hash, key) {\n    if (!hash || !hash.then) {\n        throw new Error('Invalid hash function is provided! Usage: createHMAC(createMD5(), \"key\").');\n    }\n    return hash.then((hasher) => calculateHmac(hasher, key));\n}\n\nfunction calculatePBKDF2(digest, salt, iterations, hashLength, outputType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const DK = new Uint8Array(hashLength);\n        const block1 = new Uint8Array(salt.length + 4);\n        const block1View = new DataView(block1.buffer);\n        const saltBuffer = getUInt8Buffer(salt);\n        const saltUIntBuffer = new Uint8Array(saltBuffer.buffer, saltBuffer.byteOffset, saltBuffer.length);\n        block1.set(saltUIntBuffer);\n        let destPos = 0;\n        const hLen = digest.digestSize;\n        const l = Math.ceil(hashLength / hLen);\n        let T = null;\n        let U = null;\n        for (let i = 1; i <= l; i++) {\n            block1View.setUint32(salt.length, i);\n            digest.init();\n            digest.update(block1);\n            T = digest.digest('binary');\n            U = T.slice();\n            for (let j = 1; j < iterations; j++) {\n                digest.init();\n                digest.update(U);\n                U = digest.digest('binary');\n                for (let k = 0; k < hLen; k++) {\n                    T[k] ^= U[k];\n                }\n            }\n            DK.set(T.subarray(0, hashLength - destPos), destPos);\n            destPos += hLen;\n        }\n        if (outputType === 'binary') {\n            return DK;\n        }\n        const digestChars = new Uint8Array(hashLength * 2);\n        return getDigestHex(digestChars, DK, hashLength);\n    });\n}\nconst validateOptions$2 = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (!options.hashFunction || !options.hashFunction.then) {\n        throw new Error('Invalid hash function is provided! Usage: pbkdf2(\"password\", \"salt\", 1000, 32, createSHA1()).');\n    }\n    if (!Number.isInteger(options.iterations) || options.iterations < 1) {\n        throw new Error('Iterations should be a positive number');\n    }\n    if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {\n        throw new Error('Hash length should be a positive number');\n    }\n    if (options.outputType === undefined) {\n        options.outputType = 'hex';\n    }\n    if (!['hex', 'binary'].includes(options.outputType)) {\n        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);\n    }\n};\n/**\n * Generates a new PBKDF2 hash for the supplied password\n */\nfunction pbkdf2(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$2(options);\n        const hmac = yield createHMAC(options.hashFunction, options.password);\n        return calculatePBKDF2(hmac, options.salt, options.iterations, options.hashLength, options.outputType);\n    });\n}\n\nvar name$3 = \"scrypt\";\nvar data$3 = \"AGFzbQEAAAABIwZgAX8Bf2AAAX9gBX9/fn9/AGAEf39/fwBgAX8AYAN/f38AAwcGAAECAwQFBAUBcAEBAQUGAQECgIACBggBfwFBkIgECwc5BAZtZW1vcnkCABJIYXNoX1NldE1lbW9yeVNpemUAAA5IYXNoX0dldEJ1ZmZlcgABBnNjcnlwdAAFCpcmBlsBAX9BACEBAkAgAEEAKAKACGsiAEUNAAJAIABBEHYgAEGAgHxxIABJaiIAQABBf0cNAEH/ASEBDAELQQAhAUEAQQApA4AIIABBEHStfDcDgAgLIAFBGHRBGHULagECfwJAQQAoAogIIgANAEEAPwBBEHQiADYCiAhBgIAgQQAoAoAIayIBRQ0AAkAgAUEQdiABQYCAfHEgAUlqIgBAAEF/Rw0AQQAPC0EAQQApA4AIIABBEHStfDcDgAhBACgCiAghAAsgAAu5EAMMfwl+An8gAUEFdCEFIAQgAUEIdGohBiAEIAFBB3QiB2ohCAJAAkACQAJAIAFFDQBBACEJIAAhCiAEIQsDQCALIAooAgA2AgAgCkEEaiEKIAtBBGohCyAJQQFqIgkgBUkNAAsgAlANAiABQQh0IQxBACENIAMhDgNAQQAhCSABIQ8DQCAOIAlqIgogBCAJaiILKQMANwMAIApBCGogC0EIaikDADcDACAKQRBqIAtBEGopAwA3AwAgCkEYaiALQRhqKQMANwMAIApBIGogC0EgaikDADcDACAKQShqIAtBKGopAwA3AwAgCkEwaiALQTBqKQMANwMAIApBOGogC0E4aikDADcDACAKQcAAaiALQcAAaikDADcDACAKQcgAaiALQcgAaikDADcDACAKQdAAaiALQdAAaikDADcDACAKQdgAaiALQdgAaikDADcDACAKQeAAaiALQeAAaikDADcDACAKQegAaiALQegAaikDADcDACAKQfAAaiALQfAAaikDADcDACAKQfgAaiALQfgAaikDADcDACAJQYABaiEJIA9Bf2oiDw0ACyAEIAggBiABEAMgDiEJIAQhDyABIRADQCAJIAdqIgogDyAHaiILKQMANwMAIApBCGogC0EIaikDADcDACAKQRBqIAtBEGopAwA3AwAgCkEYaiALQRhqKQMANwMAIApBIGogC0EgaikDADcDACAKQShqIAtBKGopAwA3AwAgCkEwaiALQTBqKQMANwMAIApBOGogC0E4aikDADcDACAKQcAAaiALQcAAaikDADcDACAKQcgAaiALQcgAaikDADcDACAKQdAAaiALQdAAaikDADcDACAKQdgAaiALQdgAaikDADcDACAKQeAAaiALQeAAaikDADcDACAKQegAaiALQegAaikDADcDACAKQfAAaiALQfAAaikDADcDACAKQfgAaiALQfgAaikDADcDACAJQYABaiEJIA9BgAFqIQ8gEEF/aiIQDQALIAggBCAGIAEQAyAOIAxqIQ4gDUECaiINrSACVA0ADAILCyACUA0CIAhBQGoiCikDOCERIAopAzAhEiAKKQMoIRMgCikDICEUIAopAxghFSAKKQMQIRYgCikDCCEXIAopAwAhGEECIQoDQCAKrSEZIApBAmohCiAZIAJUDQALIAYgETcDOCAGIBI3AzAgBiATNwMoIAYgFDcDICAGIBU3AxggBiAWNwMQIAYgFzcDCCAGIBg3AwALAkAgAUUNACAHQUBqIgogCGohGiACp0F/aiEOIAogBGohGyABQQd0IQ1BACEMA0AgAyANIBsoAgAgDnFsaiEHQQAhCSABIQ8DQCAEIAlqIgogCikDACAHIAlqIgspAwCFNwMAIApBCGoiECAQKQMAIAtBCGopAwCFNwMAIApBEGoiECAQKQMAIAtBEGopAwCFNwMAIApBGGoiECAQKQMAIAtBGGopAwCFNwMAIApBIGoiECAQKQMAIAtBIGopAwCFNwMAIApBKGoiECAQKQMAIAtBKGopAwCFNwMAIApBMGoiECAQKQMAIAtBMGopAwCFNwMAIApBOGoiECAQKQMAIAtBOGopAwCFNwMAIApBwABqIhAgECkDACALQcAAaikDAIU3AwAgCkHIAGoiECAQKQMAIAtByABqKQMAhTcDACAKQdAAaiIQIBApAwAgC0HQAGopAwCFNwMAIApB2ABqIhAgECkDACALQdgAaikDAIU3AwAgCkHgAGoiECAQKQMAIAtB4ABqKQMAhTcDACAKQegAaiIQIBApAwAgC0HoAGopAwCFNwMAIApB8ABqIhAgECkDACALQfAAaikDAIU3AwAgCkH4AGoiCiAKKQMAIAtB+ABqKQMAhTcDACAJQYABaiEJIA9Bf2oiDw0ACyAEIAggBiABEAMgAyANIBooAgAgDnFsaiEHQQAhCSABIQ8DQCAIIAlqIgogCikDACAHIAlqIgspAwCFNwMAIApBCGoiECAQKQMAIAtBCGopAwCFNwMAIApBEGoiECAQKQMAIAtBEGopAwCFNwMAIApBGGoiECAQKQMAIAtBGGopAwCFNwMAIApBIGoiECAQKQMAIAtBIGopAwCFNwMAIApBKGoiECAQKQMAIAtBKGopAwCFNwMAIApBMGoiECAQKQMAIAtBMGopAwCFNwMAIApBOGoiECAQKQMAIAtBOGopAwCFNwMAIApBwABqIhAgECkDACALQcAAaikDAIU3AwAgCkHIAGoiECAQKQMAIAtByABqKQMAhTcDACAKQdAAaiIQIBApAwAgC0HQAGopAwCFNwMAIApB2ABqIhAgECkDACALQdgAaikDAIU3AwAgCkHgAGoiECAQKQMAIAtB4ABqKQMAhTcDACAKQegAaiIQIBApAwAgC0HoAGopAwCFNwMAIApB8ABqIhAgECkDACALQfAAaikDAIU3AwAgCkH4AGoiCiAKKQMAIAtB+ABqKQMAhTcDACAJQYABaiEJIA9Bf2oiDw0ACyAIIAQgBiABEAMgDEECaiIMrSACVA0ADAILCyAIQUBqIgopAzghESAKKQMwIRIgCikDKCETIAopAyAhFCAKKQMYIRUgCikDECEWIAopAwghFyAKKQMAIRhBAiEKA0AgCq0hGSAKQQJqIQogGSACVA0ACyAGIBE3AzggBiASNwMwIAYgEzcDKCAGIBQ3AyAgBiAVNwMYIAYgFjcDECAGIBc3AwggBiAYNwMACyABRQ0AQQAhCgNAIAAgBCgCADYCACAAQQRqIQAgBEEEaiEEIApBAWoiCiAFSQ0ACwsL4wUDAX8IfgJ/IAIgA0EHdCAAakFAaiIEKQMAIgU3AwAgAiAEKQMIIgY3AwggAiAEKQMQIgc3AxAgAiAEKQMYIgg3AxggAiAEKQMgIgk3AyAgAiAEKQMoIgo3AyggAiAEKQMwIgs3AzAgAiAEKQM4Igw3AzgCQCADRQ0AIANBAXQhDSAAQfgAaiEEIANBBnQhDkECIQADQCACIAUgBEGIf2opAwCFNwMAIAIgBiAEQZB/aikDAIU3AwggAiAHIARBmH9qKQMAhTcDECACIAggBEGgf2opAwCFNwMYIAIgCSAEQah/aikDAIU3AyAgAiAKIARBsH9qKQMAhTcDKCACIAsgBEG4f2opAwCFNwMwIAIgDCAEQUBqKQMAhTcDOCACEAQgASACKQMANwMAIAFBCGogAikDCDcDACABQRBqIAIpAxA3AwAgAUEYaiACKQMYNwMAIAFBIGogAikDIDcDACABQShqIAIpAyg3AwAgAUEwaiACKQMwNwMAIAFBOGogAikDODcDACACIAIpAwAgBEFIaikDAIU3AwAgAiACKQMIIARBUGopAwCFNwMIIAIgAikDECAEQVhqKQMAhTcDECACIAIpAxggBEFgaikDAIU3AxggAiACKQMgIARBaGopAwCFNwMgIAIgAikDKCAEQXBqKQMAhTcDKCACIAIpAzAgBEF4aikDAIU3AzAgAiACKQM4IAQpAwCFNwM4IAIQBCABIA5qIgMgAikDADcDACADQQhqIAIpAwg3AwAgA0EQaiACKQMQNwMAIANBGGogAikDGDcDACADQSBqIAIpAyA3AwAgA0EoaiACKQMoNwMAIANBMGogAikDMDcDACADQThqIAIpAzg3AwAgACANTw0BIARBgAFqIQQgAUHAAGohASAAQQJqIQAgAikDOCEMIAIpAzAhCyACKQMoIQogAikDICEJIAIpAxghCCACKQMQIQcgAikDCCEGIAIpAwAhBQwACwsLug0IAX4BfwF+AX8BfgF/AX4SfyAAIAAoAgQgACkDKCIBQiCIpyICIAApAzgiA0IgiKciBGpBB3cgACkDCCIFQiCIp3MiBiAEakEJdyAAKQMYIgdCIIincyIIIAZqQQ13IAJzIgkgB6ciCiABpyILakEHdyADp3MiAiALakEJdyAFp3MiDCACakENdyAKcyINIAxqQRJ3IAtzIg4gACkDACIBQiCIpyIPIAApAxAiA0IgiKciEGpBB3cgACkDICIFQiCIp3MiC2pBB3dzIgogCSAIakESdyAEcyIRIAJqQQd3IAApAzAiB6ciCSABpyISakEHdyADp3MiBCASakEJdyAFp3MiEyAEakENdyAJcyIUcyIJIBFqQQl3IAsgEGpBCXcgB0IgiKdzIhVzIhYgCWpBDXcgAnMiFyAWakESdyARcyIRakEHdyAGIBQgE2pBEncgEnMiEmpBB3cgFSALakENdyAPcyIUcyICIBJqQQl3IAxzIg8gAmpBDXcgBnMiGHMiBiARakEJdyAIIA0gFCAVakESdyAQcyIQIARqQQd3cyIMIBBqQQl3cyIIcyIVIAZqQQ13IApzIhQgDCAKIA5qQQl3IBNzIhMgCmpBDXcgC3MiGSATakESdyAOcyIKakEHdyAXcyILIApqQQl3IA9zIg4gC2pBDXcgDHMiFyAOakESdyAKcyINIAIgCCAMakENdyAEcyIMIAhqQRJ3IBBzIghqQQd3IBlzIgpqQQd3cyIEIBQgFWpBEncgEXMiECALakEHdyAJIBggD2pBEncgEnMiEWpBB3cgDHMiDCARakEJdyATcyISIAxqQQ13IAlzIg9zIgkgEGpBCXcgCiAIakEJdyAWcyITcyIWIAlqQQ13IAtzIhQgFmpBEncgEHMiEGpBB3cgBiAPIBJqQRJ3IBFzIhFqQQd3IBMgCmpBDXcgAnMiC3MiAiARakEJdyAOcyIOIAJqQQ13IAZzIhhzIgYgEGpBCXcgFSAXIAsgE2pBEncgCHMiCCAMakEHd3MiCyAIakEJd3MiE3MiFSAGakENdyAEcyIXIAsgBCANakEJdyAScyISIARqQQ13IApzIhkgEmpBEncgDXMiBGpBB3cgFHMiCiAEakEJdyAOcyIPIApqQQ13IAtzIhQgD2pBEncgBHMiDSACIBMgC2pBDXcgDHMiDCATakESdyAIcyIIakEHdyAZcyILakEHd3MiBCAXIBVqQRJ3IBBzIhAgCmpBB3cgCSAYIA5qQRJ3IBFzIg5qQQd3IAxzIgwgDmpBCXcgEnMiESAMakENdyAJcyIXcyIJIBBqQQl3IAsgCGpBCXcgFnMiEnMiEyAJakENdyAKcyIYIBNqQRJ3IBBzIhBqQQd3IAYgFyARakESdyAOcyIKakEHdyASIAtqQQ13IAJzIhdzIgIgCmpBCXcgD3MiDiACakENdyAGcyIWcyIGIAkgFiAOakESdyAKcyIWakEHdyAVIBQgFyASakESdyAIcyIIIAxqQQd3cyIKIAhqQQl3cyISIApqQQ13IAxzIg9zIgwgFmpBCXcgBCANakEJdyARcyIRcyIVIAxqQQ13IAlzIhQgFWpBEncgFnMiCWpBB3cgAiAPIBJqQRJ3IAhzIghqQQd3IBEgBGpBDXcgC3MiD3MiCyAIakEJdyATcyITIAtqQQ13IAJzIhdzIhZqNgIEIAAgACgCCCAWIAlqQQl3IAogDyARakESdyANcyIRakEHdyAYcyICIBFqQQl3IA5zIg5zIg9qNgIIIAAgACgCDCAPIBZqQQ13IAZzIg1qNgIMIAAgACgCECAGIBBqQQl3IBJzIhIgDiACakENdyAKcyIYIBcgE2pBEncgCHMiCiAMakEHd3MiCCAKakEJd3MiFiAIakENdyAMcyIMajYCECAAIAAoAgAgDSAPakESdyAJc2o2AgAgACAAKAIUIAwgFmpBEncgCnNqNgIUIAAgACgCGCAIajYCGCAAIAAoAhwgFmo2AhwgACAAKAIgIBIgBmpBDXcgBHMiCSAYIA5qQRJ3IBFzIgYgC2pBB3dzIgogBmpBCXcgFXMiBGo2AiAgACAAKAIkIAQgCmpBDXcgC3MiC2o2AiQgACAAKAIoIAsgBGpBEncgBnNqNgIoIAAgACgCLCAKajYCLCAAIAAoAjAgCSASakESdyAQcyIGIAJqQQd3IBRzIgtqNgIwIAAgACgCNCALIAZqQQl3IBNzIgpqNgI0IAAgACgCOCAKIAtqQQ13IAJzIgJqNgI4IAAgACgCPCACIApqQRJ3IAZzajYCPAtyAwF/AX4CfwJAIAJFDQBBACgCiAgiAyAAIAGtIgQgAyAAQQd0IgUgAmxqIgMgAyAFIAFsaiIGEAIgAkEBRg0AIAJBf2ohASAFIQIDQEEAKAKICCACaiAAIAQgAyAGEAIgAiAFaiECIAFBf2oiAQ0ACwsL\";\nvar hash$3 = \"d96fb75f\";\nvar wasmJson$3 = {\n\tname: name$3,\n\tdata: data$3,\n\thash: hash$3\n};\n\nfunction scryptInternal(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { costFactor, blockSize, parallelism, hashLength, } = options;\n        const SHA256Hasher = createSHA256();\n        const blockData = yield pbkdf2({\n            password: options.password,\n            salt: options.salt,\n            iterations: 1,\n            hashLength: 128 * blockSize * parallelism,\n            hashFunction: SHA256Hasher,\n            outputType: 'binary',\n        });\n        const scryptInterface = yield WASMInterface(wasmJson$3, 0);\n        // last block is for storing the temporary vectors\n        const VSize = 128 * blockSize * costFactor;\n        const XYSize = 256 * blockSize;\n        scryptInterface.setMemorySize(blockData.length + VSize + XYSize);\n        scryptInterface.writeMemory(blockData, 0);\n        // mix blocks\n        scryptInterface.getExports().scrypt(blockSize, costFactor, parallelism);\n        const expensiveSalt = scryptInterface\n            .getMemory()\n            .subarray(0, 128 * blockSize * parallelism);\n        const outputData = yield pbkdf2({\n            password: options.password,\n            salt: expensiveSalt,\n            iterations: 1,\n            hashLength,\n            hashFunction: SHA256Hasher,\n            outputType: 'binary',\n        });\n        if (options.outputType === 'hex') {\n            const digestChars = new Uint8Array(hashLength * 2);\n            return getDigestHex(digestChars, outputData, hashLength);\n        }\n        // return binary format\n        return outputData;\n    });\n}\n// eslint-disable-next-line no-bitwise\nconst isPowerOfTwo = (v) => v && !(v & (v - 1));\nconst validateOptions$1 = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (!Number.isInteger(options.blockSize) || options.blockSize < 1) {\n        throw new Error('Block size should be a positive number');\n    }\n    if (!Number.isInteger(options.costFactor)\n        || options.costFactor < 2\n        || !isPowerOfTwo(options.costFactor)) {\n        throw new Error('Cost factor should be a power of 2, greater than 1');\n    }\n    if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {\n        throw new Error('Parallelism should be a positive number');\n    }\n    if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {\n        throw new Error('Hash length should be a positive number.');\n    }\n    if (options.outputType === undefined) {\n        options.outputType = 'hex';\n    }\n    if (!['hex', 'binary'].includes(options.outputType)) {\n        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);\n    }\n};\n/**\n * Calculates hash using the scrypt password-based key derivation function\n * @returns Computed hash as a hexadecimal string or as\n *          Uint8Array depending on the outputType option\n */\nfunction scrypt(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$1(options);\n        return scryptInternal(options);\n    });\n}\n\nvar name$2 = \"bcrypt\";\nvar data$2 = \"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\";\nvar hash$2 = \"9f4c7b9e\";\nvar wasmJson$2 = {\n\tname: name$2,\n\tdata: data$2,\n\thash: hash$2\n};\n\nfunction bcryptInternal(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { costFactor, password, salt } = options;\n        const bcryptInterface = yield WASMInterface(wasmJson$2, 0);\n        bcryptInterface.writeMemory(getUInt8Buffer(salt), 0);\n        const passwordBuffer = getUInt8Buffer(password);\n        bcryptInterface.writeMemory(passwordBuffer, 16);\n        const shouldEncode = options.outputType === 'encoded' ? 1 : 0;\n        bcryptInterface.getExports().bcrypt(passwordBuffer.length, costFactor, shouldEncode);\n        const memory = bcryptInterface.getMemory();\n        if (options.outputType === 'encoded') {\n            return intArrayToString(memory, 60);\n        }\n        if (options.outputType === 'hex') {\n            const digestChars = new Uint8Array(24 * 2);\n            return getDigestHex(digestChars, memory, 24);\n        }\n        // return binary format\n        // the data is copied to allow GC of the original memory buffer\n        return memory.slice(0, 24);\n    });\n}\nconst validateOptions = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (!Number.isInteger(options.costFactor) || options.costFactor < 4 || options.costFactor > 31) {\n        throw new Error('Cost factor should be a number between 4 and 31');\n    }\n    options.password = getUInt8Buffer(options.password);\n    if (options.password.length < 1) {\n        throw new Error('Password should be at least 1 byte long');\n    }\n    if (options.password.length > 72) {\n        throw new Error('Password should be at most 72 bytes long');\n    }\n    options.salt = getUInt8Buffer(options.salt);\n    if (options.salt.length !== 16) {\n        throw new Error('Salt should be 16 bytes long');\n    }\n    if (options.outputType === undefined) {\n        options.outputType = 'encoded';\n    }\n    if (!['hex', 'binary', 'encoded'].includes(options.outputType)) {\n        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);\n    }\n};\n/**\n * Calculates hash using the bcrypt password-hashing function\n * @returns Computed hash\n */\nfunction bcrypt(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions(options);\n        return bcryptInternal(options);\n    });\n}\nconst validateHashCharacters = (hash) => {\n    if (!/^\\$2[axyb]\\$[0-3][0-9]\\$[./A-Za-z0-9]{53}$/.test(hash)) {\n        return false;\n    }\n    if (hash[4] === '0' && parseInt(hash[5], 10) < 4) {\n        return false;\n    }\n    if (hash[4] === '3' && parseInt(hash[5], 10) > 1) {\n        return false;\n    }\n    return true;\n};\nconst validateVerifyOptions = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (options.hash === undefined || typeof options.hash !== 'string') {\n        throw new Error('Hash should be specified');\n    }\n    if (options.hash.length !== 60) {\n        throw new Error('Hash should be 60 bytes long');\n    }\n    if (!validateHashCharacters(options.hash)) {\n        throw new Error('Invalid hash');\n    }\n    options.password = getUInt8Buffer(options.password);\n    if (options.password.length < 1) {\n        throw new Error('Password should be at least 1 byte long');\n    }\n    if (options.password.length > 72) {\n        throw new Error('Password should be at most 72 bytes long');\n    }\n};\n/**\n * Verifies password using bcrypt password-hashing function\n * @returns True if the encoded hash matches the password\n */\nfunction bcryptVerify(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateVerifyOptions(options);\n        const { hash, password } = options;\n        const bcryptInterface = yield WASMInterface(wasmJson$2, 0);\n        bcryptInterface.writeMemory(getUInt8Buffer(hash), 0);\n        const passwordBuffer = getUInt8Buffer(password);\n        bcryptInterface.writeMemory(passwordBuffer, 60);\n        return !!bcryptInterface.getExports().bcrypt_verify(passwordBuffer.length);\n    });\n}\n\nvar name$1 = \"whirlpool\";\nvar data$1 = \"AGFzbQEAAAABEQRgAAF/YAF/AGACf38AYAAAAwkIAAECAwEDAAEEBQFwAQEBBQQBAQICBg4CfwFB0JsFC38AQYAYCwdwCAZtZW1vcnkCAA5IYXNoX0dldEJ1ZmZlcgAACUhhc2hfSW5pdAADC0hhc2hfVXBkYXRlAAQKSGFzaF9GaW5hbAAFDUhhc2hfR2V0U3RhdGUABg5IYXNoX0NhbGN1bGF0ZQAHClNUQVRFX1NJWkUDAQrgGggFAEGAGQv0BgEIfiAAKQMAIQFBAEEAKQOAmwEiAjcDgJkBIAApAxghAyAAKQMQIQQgACkDCCEFQQBBACkDmJsBIgY3A5iZAUEAQQApA5CbASIHNwOQmQFBAEEAKQOImwEiCDcDiJkBQQAgASAChTcDwJkBQQAgBSAIhTcDyJkBQQAgBCAHhTcD0JkBQQAgAyAGhTcD2JkBIAApAyAhAUEAQQApA6CbASICNwOgmQFBACABIAKFNwPgmQEgACkDKCEBQQBBACkDqJsBIgI3A6iZAUEAIAEgAoU3A+iZASAAKQMwIQFBAEEAKQOwmwEiAjcDsJkBQQAgASAChTcD8JkBIAApAzghAUEAQQApA7ibASICNwO4mQFBACABIAKFNwP4mQFBAEKYxpjG/pDugM8ANwOAmgFBgJkBQYCaARACQcCZAUGAmQEQAkEAQrbMyq6f79vI0gA3A4CaAUGAmQFBgJoBEAJBwJkBQYCZARACQQBC4Pju9LiUw701NwOAmgFBgJkBQYCaARACQcCZAUGAmQEQAkEAQp3A35bs5ZL/1wA3A4CaAUGAmQFBgJoBEAJBwJkBQYCZARACQQBCle7dqf6TvKVaNwOAmgFBgJkBQYCaARACQcCZAUGAmQEQAkEAQtiSp9GQlui1hX83A4CaAUGAmQFBgJoBEAJBwJkBQYCZARACQQBCvbvBoL/Zz4LnADcDgJoBQYCZAUGAmgEQAkHAmQFBgJkBEAJBAELkz4Ta+LTfylg3A4CaAUGAmQFBgJoBEAJBwJkBQYCZARACQQBC+93zs9b7xaOefzcDgJoBQYCZAUGAmgEQAkHAmQFBgJkBEAJBAELK2/y90NXWwTM3A4CaAUGAmQFBgJoBEAJBwJkBQYCZARACQQBBACkDwJkBIAApAwCFQQApA4CbAYU3A4CbAUEAQQApA8iZASAAKQMIhUEAKQOImwGFNwOImwFBAEEAKQPQmQEgACkDEIVBACkDkJsBhTcDkJsBQQBBACkD2JkBIAApAxiFQQApA5ibAYU3A5ibAUEAQQApA+CZASAAKQMghUEAKQOgmwGFNwOgmwFBAEEAKQPomQEgACkDKIVBACkDqJsBhTcDqJsBQQBBACkD8JkBIAApAzCFQQApA7CbAYU3A7CbAUEAQQApA/iZASAAKQM4hUEAKQO4mwGFNwO4mwELhgwKAX4BfwF+AX8BfgF/AX4BfwR+A38gACAAKQMAIgKnIgNB/wFxQQN0QYAIaikDAEI4iSAAKQM4IgSnIgVBBXZB+A9xQYAIaikDAIVCOIkgACkDMCIGpyIHQQ12QfgPcUGACGopAwCFQjiJIAApAygiCKciCUEVdkH4D3FBgAhqKQMAhUI4iSAAKQMgIgpCIIinQf8BcUEDdEGACGopAwCFQjiJIAApAxgiC0IoiKdB/wFxQQN0QYAIaikDAIVCOIkgACkDECIMQjCIp0H/AXFBA3RBgAhqKQMAhUI4iSAAKQMIIg1COIinQQN0QYAIaikDAIVCOIkgASkDAIU3AwAgACANpyIOQf8BcUEDdEGACGopAwBCOIkgA0EFdkH4D3FBgAhqKQMAhUI4iSAFQQ12QfgPcUGACGopAwCFQjiJIAdBFXZB+A9xQYAIaikDAIVCOIkgCEIgiKdB/wFxQQN0QYAIaikDAIVCOIkgCkIoiKdB/wFxQQN0QYAIaikDAIVCOIkgC0IwiKdB/wFxQQN0QYAIaikDAIVCOIkgDEI4iKdBA3RBgAhqKQMAhUI4iSABKQMIhTcDCCAAIAynIg9B/wFxQQN0QYAIaikDAEI4iSAOQQV2QfgPcUGACGopAwCFQjiJIANBDXZB+A9xQYAIaikDAIVCOIkgBUEVdkH4D3FBgAhqKQMAhUI4iSAGQiCIp0H/AXFBA3RBgAhqKQMAhUI4iSAIQiiIp0H/AXFBA3RBgAhqKQMAhUI4iSAKQjCIp0H/AXFBA3RBgAhqKQMAhUI4iSALQjiIp0EDdEGACGopAwCFQjiJIAEpAxCFNwMQIAAgC6ciEEH/AXFBA3RBgAhqKQMAQjiJIA9BBXZB+A9xQYAIaikDAIVCOIkgDkENdkH4D3FBgAhqKQMAhUI4iSADQRV2QfgPcUGACGopAwCFQjiJIARCIIinQf8BcUEDdEGACGopAwCFQjiJIAZCKIinQf8BcUEDdEGACGopAwCFQjiJIAhCMIinQf8BcUEDdEGACGopAwCFQjiJIApCOIinQQN0QYAIaikDAIVCOIkgASkDGIU3AxggACAKpyIDQf8BcUEDdEGACGopAwBCOIkgEEEFdkH4D3FBgAhqKQMAhUI4iSAPQQ12QfgPcUGACGopAwCFQjiJIA5BFXZB+A9xQYAIaikDAIVCOIkgAkIgiKdB/wFxQQN0QYAIaikDAIVCOIkgBEIoiKdB/wFxQQN0QYAIaikDAIVCOIkgBkIwiKdB/wFxQQN0QYAIaikDAIVCOIkgCEI4iKdBA3RBgAhqKQMAhUI4iSABKQMghTcDICAAIAlB/wFxQQN0QYAIaikDAEI4iSADQQV2QfgPcUGACGopAwCFQjiJIBBBDXZB+A9xQYAIaikDAIVCOIkgD0EVdkH4D3FBgAhqKQMAhUI4iSANQiCIp0H/AXFBA3RBgAhqKQMAhUI4iSACQiiIp0H/AXFBA3RBgAhqKQMAhUI4iSAEQjCIp0H/AXFBA3RBgAhqKQMAhUI4iSAGQjiIp0EDdEGACGopAwCFQjiJIAEpAyiFNwMoIAAgB0H/AXFBA3RBgAhqKQMAQjiJIAlBBXZB+A9xQYAIaikDAIVCOIkgA0ENdkH4D3FBgAhqKQMAhUI4iSAQQRV2QfgPcUGACGopAwCFQjiJIAxCIIinQf8BcUEDdEGACGopAwCFQjiJIA1CKIinQf8BcUEDdEGACGopAwCFQjiJIAJCMIinQf8BcUEDdEGACGopAwCFQjiJIARCOIinQQN0QYAIaikDAIVCOIkgASkDMIU3AzAgACAFQf8BcUEDdEGACGopAwBCOIkgB0EFdkH4D3FBgAhqKQMAhUI4iSAJQQ12QfgPcUGACGopAwCFQjiJIANBFXZB+A9xQYAIaikDAIVCOIkgC0IgiKdB/wFxQQN0QYAIaikDAIVCOIkgDEIoiKdB/wFxQQN0QYAIaikDAIVCOIkgDUIwiKdB/wFxQQN0QYAIaikDAIVCOIkgAkI4iKdBA3RBgAhqKQMAhUI4iSABKQM4hTcDOAtcAEEAQgA3A8ibAUEAQgA3A7ibAUEAQgA3A7CbAUEAQgA3A6ibAUEAQgA3A6CbAUEAQgA3A5ibAUEAQgA3A5CbAUEAQgA3A4ibAUEAQgA3A4CbAUEAQQA2AsCbAQuWAgEFf0EAIQFBAEEAKQPImwEgAK18NwPImwECQEEAKALAmwEiAkUNAEEAIQECQCACIABqIgNBwAAgA0HAAEkbIgQgAkH/AXEiBU0NAEEAIQEDQCAFQcCaAWogAUGAGWotAAA6AAAgAUEBaiEBIAQgAkEBaiICQf8BcSIFSw0ACwsCQCADQT9NDQBBwJoBEAFBACEEC0EAIAQ2AsCbAQsCQCAAIAFrIgJBwABJDQADQCABQYAZahABIAFBwABqIQEgAkFAaiICQT9LDQALCwJAIAJFDQBBACACNgLAmwFBACECQQAhBQNAIAJBwJoBaiACIAFqQYAZai0AADoAAEEAKALAmwEgBUEBaiIFQf8BcSICSw0ACwsL+gMCBH8BfiMAQcAAayIAJAAgAEE4akIANwMAIABBMGpCADcDACAAQShqQgA3AwAgAEEgakIANwMAIABBGGpCADcDACAAQRBqQgA3AwAgAEIANwMIIABCADcDAEEAIQECQAJAQQAoAsCbASICRQ0AQQAhAwNAIAAgAWogAUHAmgFqLQAAOgAAIAIgA0EBaiIDQf8BcSIBSw0AC0EAIAJBAWo2AsCbASAAIAJqQYABOgAAIAJBYHFBIEcNASAAEAEgAEIANwMYIABCADcDECAAQgA3AwggAEIANwMADAELQQBBATYCwJsBIABBgAE6AAALQQApA8ibASEEQQBCADcDyJsBIABBADoANiAAQQA2ATIgAEIANwEqIABBADoAKSAAQgA3ACEgAEEAOgAgIAAgBEIFiDwAPiAAIARCDYg8AD0gACAEQhWIPAA8IAAgBEIdiDwAOyAAIARCJYg8ADogACAEQi2IPAA5IAAgBEI1iDwAOCAAIARCPYg8ADcgACAEp0EDdDoAPyAAEAFBAEEAKQOAmwE3A4AZQQBBACkDiJsBNwOIGUEAQQApA5CbATcDkBlBAEEAKQOYmwE3A5gZQQBBACkDoJsBNwOgGUEAQQApA6ibATcDqBlBAEEAKQOwmwE3A7AZQQBBACkDuJsBNwO4GSAAQcAAaiQACwYAQcCaAQtiAEEAQgA3A8ibAUEAQgA3A7ibAUEAQgA3A7CbAUEAQgA3A6ibAUEAQgA3A6CbAUEAQgA3A5ibAUEAQgA3A5CbAUEAQgA3A4ibAUEAQgA3A4CbAUEAQQA2AsCbASAAEAQQBQsLjBABAEGACAuEEBgYYBjAeDDYIyOMIwWvRibGxj/GfvmRuOjoh+gTb837h4cmh0yhE8u4uNq4qWJtEQEBBAEIBQIJT08hT0Jung02Ntg2re5sm6amoqZZBFH/0tJv0t69uQz19fP1+wb3Dnl5+XnvgPKWb2+hb1/O3jCRkX6R/O8/bVJSVVKqB6T4YGCdYCf9wEe8vMq8iXZlNZubVpuszSs3jo4CjgSMAYqjo7ajcRVb0gwMMAxgPBhse3vxe/+K9oQ1NdQ1teFqgB0ddB3oaTr14OCn4FNH3bPX13vX9qyzIcLCL8Je7ZmcLi64Lm2WXENLSzFLYnqWKf7+3/6jIeFdV1dBV4IWrtUVFVQVqEEqvXd3wXeftu7oNzfcN6XrbpLl5bPle1bXnp+fRp+M2SMT8PDn8NMX/SNKSjVKan+UINraT9qelalEWFh9WPolsKLJyQPJBsqPzykppClVjVJ8CgooClAiFFqxsf6x4U9/UKCguqBpGl3Ja2uxa3/a1hSFhS6FXKsX2b29zr2Bc2c8XV1pXdI0uo8QEEAQgFAgkPT09/TzA/UHy8sLyxbAi90+Pvg+7cZ80wUFFAUoEQotZ2eBZx/mznjk5Lfkc1PVlycnnCclu04CQUEZQTJYgnOLixaLLJ0Lp6enpqdRAVP2fX3pfc+U+rKVlW6V3Ps3SdjYR9iOn61W+/vL+4sw63Du7p/uI3HBzXx87XzHkfi7ZmaFZhfjzHHd3VPdpo6nexcXXBe4Sy6vR0cBRwJGjkWenkKehNwhGsrKD8oexYnULS20LXWZWli/v8a/kXljLgcHHAc4Gw4/ra2OrQEjR6xaWnVa6i+0sIODNoNstRvvMzPMM4X/ZrZjY5FjP/LGXAICCAIQCgQSqqqSqjk4SZNxcdlxr6ji3sjIB8gOz43GGRlkGch9MtFJSTlJcnCSO9nZQ9mGmq9f8vLv8sMd+THj46vjS0jbqFtbcVviKra5iIgaiDSSDbyamlKapMgpPiYmmCYtvkwLMjLIMo36ZL+wsPqw6Up9Wenpg+kbas/yDw88D3gzHnfV1XPV5qa3M4CAOoB0uh30vr7Cvpl8YSfNzRPNJt6H6zQ00DS95GiJSEg9SHp1kDL//9v/qyTjVHp69Xr3j/SNkJB6kPTqPWRfX2Ffwj6+nSAggCAdoEA9aGi9aGfV0A8aGmga0HI0yq6ugq4ZLEG3tLTqtMledX1UVE1UmhmozpOTdpPs5Tt/IiKIIg2qRC9kZI1kB+nIY/Hx4/HbEv8qc3PRc7+i5swSEkgSkFokgkBAHUA6XYB6CAggCEAoEEjDwyvDVuiblezsl+wze8Xf29tL25aQq02hob6hYR9fwI2NDo0cgweRPT30PfXJesiXl2aXzPEzWwAAAAAAAAAAz88bzzbUg/krK6wrRYdWbnZ2xXaXs+zhgoIygmSwGebW1n/W/qmxKBsbbBvYdzbDtbXutcFbd3Svr4avESlDvmpqtWp339QdUFBdULoNoOpFRQlFEkyKV/Pz6/PLGPs4MDDAMJ3wYK3v75vvK3TDxD8//D/lw37aVVVJVZIcqseiorKieRBZ2+rqj+oDZcnpZWWJZQ/symq6utK6uWhpAy8vvC9lk15KwMAnwE7nnY7e3l/evoGhYBwccBzgbDj8/f3T/bsu50ZNTSlNUmSaH5KScpLk4Dl2dXXJdY+86voGBhgGMB4MNoqKEookmAmusrLysvlAeUvm5r/mY1nRhQ4OOA5wNhx+Hx98H/hjPudiYpViN/fEVdTUd9Tuo7U6qKiaqCkyTYGWlmKWxPQxUvn5w/mbOu9ixcUzxWb2l6MlJZQlNbFKEFlZeVnyILKrhIQqhFSuFdByctVyt6fkxTk55DnV3XLsTEwtTFphmBZeXmVeyju8lHh4/XjnhfCfODjgON3YcOWMjAqMFIYFmNHRY9HGsr8XpaWupUELV+Ti4q/iQ03ZoWFhmWEv+MJOs7P2s/FFe0IhIYQhFaVCNJycSpyU1iUIHh54HvBmPO5DQxFDIlKGYcfHO8d2/JOx/PzX/LMr5U8EBBAEIBQIJFFRWVGyCKLjmZlembzHLyVtbaltT8TaIg0NNA1oORpl+vrP+oM16Xnf31vftoSjaX5+5X7Xm/ypJCSQJD20SBk7O+w7xdd2/qurlqsxPUuazs4fzj7RgfAREUQRiFUimY+PBo8MiQODTk4lTkprnAS3t+a30VFzZuvri+sLYMvgPDzwPP3MeMGBgT6BfL8f/ZSUapTU/jVA9/f79+sM8xy5ud65oWdvGBMTTBOYXyaLLCywLH2cWFHT02vT1ri7Befnu+drXNOMbm6lblfL3DnExDfEbvOVqgMDDAMYDwYbVlZFVooTrNxERA1EGkmIXn9/4X/fnv6gqameqSE3T4gqKqgqTYJUZ7u71ruxbWsKwcEjwUbin4dTU1FTogKm8dzcV9yui6VyCwssC1gnFlOdnU6dnNMnAWxsrWxHwdgrMTHEMZX1YqR0dM10h7no8/b2//bjCfEVRkYFRgpDjEysrIqsCSZFpYmJHok8lw+1FBRQFKBEKLTh4aPhW0LfuhYWWBawTiymOjroOs3SdPdpablpb9DSBgkJJAlILRJBcHDdcKet4Ne2tuK22VRxb9DQZ9DOt70e7e2T7Tt+x9bMzBfMLtuF4kJCFUIqV4RomJhamLTCLSykpKqkSQ5V7SgooChdiFB1XFxtXNoxuIb4+Mf4kz/ta4aGIoZEpBHCkAAAAA==\";\nvar hash$1 = \"358808f8\";\nvar wasmJson$1 = {\n\tname: name$1,\n\tdata: data$1,\n\thash: hash$1\n};\n\nconst mutex$1 = new Mutex();\nlet wasmCache$1 = null;\n/**\n * Calculates Whirlpool hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction whirlpool(data) {\n    if (wasmCache$1 === null) {\n        return lockedCreate(mutex$1, wasmJson$1, 64)\n            .then((wasm) => {\n            wasmCache$1 = wasm;\n            return wasmCache$1.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$1.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new Whirlpool hash instance\n */\nfunction createWhirlpool() {\n    return WASMInterface(wasmJson$1, 64).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 64,\n        };\n        return obj;\n    });\n}\n\nvar name = \"sm3\";\nvar data = \"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\";\nvar hash = \"6e6f46ad\";\nvar wasmJson = {\n\tname: name,\n\tdata: data,\n\thash: hash\n};\n\nconst mutex = new Mutex();\nlet wasmCache = null;\n/**\n * Calculates SM3 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sm3(data) {\n    if (wasmCache === null) {\n        return lockedCreate(mutex, wasmJson, 32)\n            .then((wasm) => {\n            wasmCache = wasm;\n            return wasmCache.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SM3 hash instance\n */\nfunction createSM3() {\n    return WASMInterface(wasmJson, 32).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 32,\n        };\n        return obj;\n    });\n}\n\nexport { adler32, argon2Verify, argon2d, argon2i, argon2id, bcrypt, bcryptVerify, blake2b, blake2s, blake3, crc32, crc32c, createAdler32, createBLAKE2b, createBLAKE2s, createBLAKE3, createCRC32, createCRC32C, createHMAC, createKeccak, createMD4, createMD5, createRIPEMD160, createSHA1, createSHA224, createSHA256, createSHA3, createSHA384, createSHA512, createSM3, createWhirlpool, createXXHash128, createXXHash3, createXXHash32, createXXHash64, keccak, md4, md5, pbkdf2, ripemd160, scrypt, sha1, sha224, sha256, sha3, sha384, sha512, sm3, whirlpool, xxhash128, xxhash3, xxhash32, xxhash64 };\n","/* @license\nPapa Parse\nv5.3.2\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=n&&/blob:/i.test((f.location||{}).protocol),a={},h=0,b={parse:function(e,t){var i=(t=t||{}).dynamicTyping||!1;M(i)&&(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!M(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var r=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(i=f.URL||f.webkitURL||null,r=s.toString(),b.BLOB_URL||(b.BLOB_URL=i.createObjectURL(new Blob([\"(\",r,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var i,r;return t.onmessage=_,t.id=h++,a[t.id]=t}();return r.userStep=t.step,r.userChunk=t.chunk,r.userComplete=t.complete,r.userError=t.error,t.step=M(t.step),t.chunk=M(t.chunk),t.complete=M(t.complete),t.error=M(t.error),delete t.worker,void r.postMessage({input:e,config:t,workerId:r.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?n=t.download?new l(t):new p(t):!0===e.readable&&M(e.read)&&M(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,i=!1,r=null,o=!1;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines);\"string\"==typeof t.newline&&(y=t.newline);\"string\"==typeof t.quoteChar&&(s=t.quoteChar);\"boolean\"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");r=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s);(\"boolean\"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(o=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\\-@\\t\\r].*$/)}();var h=new RegExp(j(s),\"g\");\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if(\"object\"==typeof e[0])return u(r||Object.keys(e[0]),e,i)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||r),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error(\"Unable to serialize unrecognized input\");function u(e,t,i){var r=\"\";\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(r+=m),r+=v(e[a],a);0<t.length&&(r+=y)}for(var o=0;o<t.length;o++){var h=n?e.length:t[o].length,u=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&&!n&&(u=\"greedy\"===i?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===i&&n){for(var d=[],l=0;l<h;l++){var c=s?e[l]:l;d.push(t[o][c])}u=\"\"===d.join(\"\").trim()}if(!u){for(var p=0;p<h;p++){0<p&&!f&&(r+=m);var g=n&&s?e[p]:p;r+=v(t[o][g],p)}o<t.length-1&&(!i||0<h&&!f)&&(r+=y)}}return r}function v(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var i=!1;o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,i=!0);var r=e.toString().replace(h,a);return(i=i||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1}(r,b.BAD_DELIMITERS)||-1<r.indexOf(m)||\" \"===r.charAt(0)||\" \"===r.charAt(r.length-1))?s+r+s:r}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=E,b.ParserHandle=i,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0!==h.length){var e,t,i,r,n=h[0];if(M(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,i=n.inputElem,r=s.reason,void(M(o.error)&&o.error({name:e},t,i,r));if(\"skip\"===s.action)return void u();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){M(a)&&a(e,n.file,n.inputElem),u()},b.parse(n.file,n.instanceConfig)}else M(o.complete)&&o.complete()}function u(){h.splice(0,1),e()}}}function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&M(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(e);void 0!==i&&(e=i)}this.isFirstChunk=!1,this._halted=!1;var r=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(r,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=r.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(M(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!M(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){M(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var r;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),u.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),n||(r.onload=v(this._chunkLoaded,this),r.onerror=v(this._chunkError,this)),r.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)r.setRequestHeader(t,e[t])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;r.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+i)}try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===r.status&&this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:r.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){var t=r.statusText||e;this._sendError(new Error(t))}}function c(e){var r,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),u.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((r=new FileReader).onload=v(this._chunkLoaded,this),r.onerror=v(this._chunkError,this)):r=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var i=r.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(r.error)}}function p(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=i.substring(0,t),i=i.substring(t)):(e=i,i=\"\"),this._finished=!i,this.parseChunk(e)}}}function g(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=v(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),r=!0,this._streamData(\"\")},this),this._streamCleanUp=v(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function i(m){var a,o,h,r=Math.pow(2,53),n=-r,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,u=/^(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))$/,t=this,i=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(M(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;i+=e.data.length,m.preview&&i>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){return c&&h&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),h=!1),m.skipEmptyLines&&(c.data=c.data.filter(function(e){return!y(e)})),_()&&function(){if(!c)return;function e(e,t){M(m.transformHeader)&&(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var i,r=m.header?{}:[];for(i=0;i<e.length;i++){var n=i,s=e[i];m.header&&(n=i>=l.length?\"__parsed_extra\":l[i]),m.transform&&(s=m.transform(s,n)),s=v(n,s),\"__parsed_extra\"===n?(r[n]=r[n]||[],r[n].push(s)):r[n]=s}return m.header&&(i>l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+i,f+t):i<l.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+i,f+t)),r}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function v(e,t){return i=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[i]&&(m.dynamicTyping[i]=m.dynamicTypingFunction(i)),!0===(m.dynamicTyping[i]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<r)return!0}return!1}(t)?parseFloat(t):u.test(t)?new Date(t):\"\"===t?null:t):t;var i}function k(e,t,i,r){var n={type:e,code:t,message:i};void 0!==r&&(n.row=r),c.errors.push(n)}this.parse=function(e,t,i){var r=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var i=new RegExp(j(t)+\"([^]*?)\"+j(t),\"gm\"),r=(e=e.replace(i,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1<n.length&&n[0].length<r[0].length;if(1===r.length||s)return\"\\n\";for(var a=0,o=0;o<r.length;o++)\"\\n\"===r[o][0]&&a++;return a>=r.length/2?\"\\r\\n\":\"\\r\"}(e,r)),h=!1,m.delimiter)M(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,i,r,n){var s,a,o,h;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var u=0;u<n.length;u++){var f=n[u],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:r,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(i&&y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===h||h<l)&&1.99<l&&(a=d,s=f,h=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(h=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&&m.header&&s.preview++,a=e,o=new E(s),c=o.parse(a,t,i),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=M(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,M(m.complete)&&m.complete(c),a=\"\"}}function j(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(e){var S,O=(e=e||{}).delimiter,x=e.newline,I=e.comments,T=e.step,D=e.preview,A=e.fastMode,L=S=void 0===e.quoteChar||null===e.quoteChar?'\"':e.quoteChar;if(void 0!==e.escapeChar&&(L=e.escapeChar),(\"string\"!=typeof O||-1<b.BAD_DELIMITERS.indexOf(O))&&(O=\",\"),I===O)throw new Error(\"Comment character same as delimiter\");!0===I?I=\"#\":(\"string\"!=typeof I||-1<b.BAD_DELIMITERS.indexOf(I))&&(I=!1),\"\\n\"!==x&&\"\\r\"!==x&&\"\\r\\n\"!==x&&(x=\"\\n\");var F=0,z=!1;this.parse=function(r,t,i){if(\"string\"!=typeof r)throw new Error(\"Input must be a string\");var n=r.length,e=O.length,s=x.length,a=I.length,o=M(T),h=[],u=[],f=[],d=F=0;if(!r)return C();if(A||!1!==A&&-1===r.indexOf(S)){for(var l=r.split(x),c=0;c<l.length;c++){if(f=l[c],F+=f.length,c!==l.length-1)F+=x.length;else if(i)return C();if(!I||f.substring(0,a)!==I){if(o){if(h=[],k(f.split(O)),R(),z)return C()}else k(f.split(O));if(D&&D<=c)return h=h.slice(0,D),C(!0)}}return C()}for(var p=r.indexOf(O,F),g=r.indexOf(x,F),_=new RegExp(j(L)+j(S),\"g\"),m=r.indexOf(S,F);;)if(r[F]!==S)if(I&&0===f.length&&r.substring(F,F+a)===I){if(-1===g)return C();F=g+s,g=r.indexOf(x,F),p=r.indexOf(O,F)}else if(-1!==p&&(p<g||-1===g))f.push(r.substring(F,p)),F=p+e,p=r.indexOf(O,F);else{if(-1===g)break;if(f.push(r.substring(F,g)),w(g+s),o&&(R(),z))return C();if(D&&h.length>=D)return C(!0)}else for(m=F,F++;;){if(-1===(m=r.indexOf(S,m+1)))return i||u.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:h.length,index:F}),E();if(m===n-1)return E(r.substring(F,m).replace(_,S));if(S!==L||r[m+1]!==L){if(S===L||0===m||r[m-1]!==L){-1!==p&&p<m+1&&(p=r.indexOf(O,m+1)),-1!==g&&g<m+1&&(g=r.indexOf(x,m+1));var y=b(-1===g?p:Math.min(p,g));if(r.substr(m+1+y,e)===O){f.push(r.substring(F,m).replace(_,S)),r[F=m+1+y+e]!==S&&(m=r.indexOf(S,F)),p=r.indexOf(O,F),g=r.indexOf(x,F);break}var v=b(g);if(r.substring(m+1+v,m+1+v+s)===x){if(f.push(r.substring(F,m).replace(_,S)),w(m+1+v+s),p=r.indexOf(O,F),m=r.indexOf(S,F),o&&(R(),z))return C();if(D&&h.length>=D)return C(!0);break}u.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:h.length,index:F}),m++}}else m++}return E();function k(e){h.push(e),d=F}function b(e){var t=0;if(-1!==e){var i=r.substring(m+1,e);i&&\"\"===i.trim()&&(t=i.length)}return t}function E(e){return i||(void 0===e&&(e=r.substring(F)),f.push(e),F=n,k(f),o&&R()),C()}function w(e){F=e,k(f),f=[],g=r.indexOf(x,F)}function C(e){return{data:h,errors:u,meta:{delimiter:O,linebreak:x,aborted:z,truncated:!!e,cursor:d+(t||0)}}}function R(){T(C()),h=[],u=[]}},this.abort=function(){z=!0},this.getCharIndex=function(){return F}}function _(e){var t=e.data,i=a[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){r=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(M(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else M(i.userChunk)&&(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!r&&m(t.workerId,t.results)}function m(e,t){var i=a[e];M(i.userComplete)&&i.userComplete(t),i.terminate(),delete a[e]}function y(){throw new Error(\"Not implemented.\")}function w(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var i in e)t[i]=w(e[i]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function M(e){return\"function\"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var i=b.parse(t.input,t.config);i&&f.postMessage({workerId:b.WORKER_ID,results:i,finished:!0})}}),(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(u.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(u.prototype)).constructor=g,b});","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return fn;\n}","import classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nexport default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  return method;\n}","export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {\n  if (receiver !== classConstructor) {\n    throw new TypeError(\"Private static access of wrong provenance\");\n  }\n}","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Initialize a sparse matrix from its compressed components.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray|Array|TypedArray} values Values of all elements in the matrix, stored in column-major order.\n * These should all be non-negative integers, even if they are stored in floating-point.\n *\n * @return {ScranMatrix} A layered sparse matrix.\n */\nexport function initializeSparseMatrixFromDenseArray(numberOfRows, numberOfColumns, values) {\n    var val_data; \n    var output;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        if (val_data.length !== numberOfRows * numberOfColumns) {\n            throw new Error(\"length of 'values' is not consistent with supplied dimensions\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_dense_vector(\n                numberOfRows, \n                numberOfColumns, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\")\n            ),\n            ScranMatrix\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a sparse matrix from its compressed components.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray} values Values of the non-zero elements.\n * These should all be non-negative integers, even if they are stored in floating-point.\n * @param {WasmArray} indices Row indices of the non-zero elements.\n * This should be of the same length as `values`.\n * @param {WasmArray} pointers Pointers specifying the start of each column in `indices`.\n * This should have length equal to `numberOfColumns + 1`.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.byColumn=true] - Whether the supplied arrays refer to the compressed sparse column format.\n * If `true`, `indices` should contain column indices and `pointers` should specify the start of each row in `indices`.\n *\n * @return {ScranMatrix} A layered sparse matrix.\n */ \nexport function initializeSparseMatrixFromCompressedVectors(numberOfRows, numberOfColumns, values, indices, pointers, { byColumn = true } = {}) {\n    var val_data;\n    var ind_data;\n    var indp_data;\n    var output;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        ind_data = utils.wasmifyArray(indices, null);\n        indp_data = utils.wasmifyArray(pointers, null);\n        if (val_data.length != ind_data.length) {\n            throw new Error(\"'values' and 'indices' should have the same length\");\n        }\n        if (indp_data.length != (byColumn ? numberOfColumns : numberOfRows) + 1) {\n            throw new Error(\"'pointers' does not have an appropriate length\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix(\n                numberOfRows, \n                numberOfColumns, \n                val_data.length, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"), \n                ind_data.offset, \n                ind_data.constructor.className.replace(\"Wasm\", \"\"), \n                indp_data.offset, \n                indp_data.constructor.className.replace(\"Wasm\", \"\"), \n                byColumn \n            ),\n            ScranMatrix\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n        utils.free(ind_data);\n        utils.free(indp_data);\n    }\n\n    return output;\n}\n\n/** \n * Initialize a sparse matrix from a buffer containing a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n *\n * @return {ScranMatrix} A layered sparse matrix.\n */\nexport function initializeSparseMatrixFromMatrixMarket(x, { compressed = null } = {}) {\n    var buf_data;\n    var output;\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(\n                module => module.read_matrix_market_from_buffer(buf_data.offset, buf_data.length, compressed),\n                ScranMatrix\n            );\n        } else {\n            output = gc.call(\n                module => module.read_matrix_market_from_file(x, compressed),\n                ScranMatrix\n            );\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buf_data);\n    }\n\n    return output;\n}\n\nfunction convert_compressed(compressed) {\n    if (compressed === null) {\n        return -1;\n    } else if (compressed) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n// For back-compatibility, deprecated as of 0.3.0.\nexport function initializeSparseMatrixFromMatrixMarketBuffer(x, { compressed = null } = {}) {\n    return initializeSparseMatrixFromMatrixMarket(x, { compressed: compressed });\n}\n\n/** \n * Extract dimensions and other details from a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n *\n * @return {object} An object containing the number of `rows`, `columns` and `lines` in the matrix.\n */\nexport function extractMatrixMarketDimensions(x, { compressed = null } = {}) {\n    var buf_data;\n    var stats = utils.createFloat64WasmArray(3);\n    let output = {};\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            wasm.call(module => module.read_matrix_market_header_from_buffer(buf_data.offset, buf_data.length, compressed, stats.offset));\n        } else {\n            wasm.call(module => module.read_matrix_market_header_from_file(x, compressed, stats.offset));\n        }\n\n        let sarr = stats.array();\n        output.rows = sarr[0];\n        output.columns = sarr[1];\n        output.lines = sarr[2];\n\n    } finally {\n        utils.free(buf_data);\n        utils.free(stats);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from a HDF5 file.\n *\n * @param {string} file Path to the HDF5 file.\n * For web contexts, this should be saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n *\n * @return {ScranMatrix} A layered sparse matrix.\n */\nexport function initializeSparseMatrixFromHDF5(file, name) {\n    return gc.call(\n        module => module.read_hdf5_matrix(file, name),\n        ScranMatrix\n    );\n}\n\n/**\n * Initialize a dense matrix from a column-major array.\n *\n * @param {number} numberOfRows - Number of rows.\n * @param {number} numberOfColumns - Number of columns.\n * @param {(WasmArray|TypedArray|Array)} values - Array of length equal to the product of `numberOfRows` and `numberOfColumns`,\n * containing the values to store in the array.\n *\n * @return {ScranMatrix} A dense matrix, filled by column with the contents of `values`.\n */\nexport function initializeDenseMatrixFromDenseArray(numberOfRows, numberOfColumns, values) {\n    var tmp;\n    var output;\n\n    try {\n        tmp = utils.wasmifyArray(values, null);\n        output = gc.call(\n            module => module.initialize_dense_matrix(\n                numberOfRows, \n                numberOfColumns, \n                tmp.offset, \n                tmp.constructor.className.replace(\"Wasm\", \"\")\n            ),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\nfunction unpack_strings(buffer, lengths) {\n    let dec = new TextDecoder();\n    let names = [];\n    let sofar = 0;\n    for (const l of lengths) {\n        let view = buffer.slice(sofar, sofar + l);\n        names.push(dec.decode(view));\n        sofar += l;\n    }\n    return names;\n}\n\nfunction repack_strings(x) {\n    let buffer;\n    let lengths;\n\n    for (const y of x) {\n        if (!(typeof y == \"string\")) {\n            throw new Error(\"all entries of 'x' should be strings for a string HDF5 dataset\");\n        }\n    }\n\n    try {\n        lengths = utils.createInt32WasmArray(x.length);\n        let lengths_arr = lengths.array();\n\n        let total = 0;\n        const enc = new TextEncoder;\n        let contents = new Array(x.length);\n\n        x.forEach((y, i) => {\n            let e = enc.encode(y);\n            lengths_arr[i] = e.length;\n            contents[i] = e;\n            total += e.length;\n        });\n\n        buffer = utils.createUint8WasmArray(total);\n        let buffer_arr = buffer.array();\n        total = 0;\n\n        contents.forEach(y => {\n            buffer_arr.set(y, total);\n            total += y.length;\n        });\n    } catch (e) {\n        utils.free(buffer);\n        utils.free(lengths);\n        throw e;\n    }\n\n    return [lengths, buffer];\n}\n\nfunction check_shape(x, shape) {\n    if (shape.length > 0) {\n        let full_length = shape.reduce((a, b) => a * b);\n        if (x.length != full_length) {\n            throw new Error(\"length of 'x' must be equal to the product of 'shape'\");\n        }\n    } else {\n        if (x instanceof Array || ArrayBuffer.isView(x)) {\n            if (x.length != 1) {\n                throw new Error(\"length of 'x' should be 1 for a scalar dataset\");\n            }\n        } else {\n            x = [x];\n        }\n    }\n    return x;\n}\n\n\n/**\n * Base class for HDF5 objects.\n */\nexport class H5Base {\n    #file;\n    #name;\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the object inside the file.\n     */\n    constructor(file, name) {\n        this.#file = file;\n        this.#name = name;\n    }\n\n    /**\n     * @member {string}\n     * @desc Path to the HDF5 file.\n     */\n    get file() {\n        return this.#file;\n    }\n\n    /**\n     * @member {string}\n     * @desc Name of the object inside the file.\n     */\n    get name() {\n        return this.#name;\n    }\n}\n\n/**\n * Representation of a group inside a HDF5 file.\n *\n * @augments H5Base\n */\nexport class H5Group extends H5Base {\n    #children;\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the object inside the file.\n     * @param {object} [options] - Optional parameters.\n     * @param {object} [options.children=null] - For internal use, to set the immediate children of this group.\n     * If `null`, this is determined by reading the `file` at `name`.\n     */\n    constructor(file, name, { children = null } = {}) {\n        super(file, name);\n\n        if (children === null) {\n            let x = wasm.call(module => new module.H5GroupDetails(file, name));\n            try {\n                let child_names = unpack_strings(x.buffer(), x.lengths());\n                let child_types = x.types();\n                let type_options = [ \"Group\", \"DataSet\", \"Other\" ];\n\n                this.#children = {};\n                for (var i = 0; i < child_names.length; i++) {\n                    this.#children[child_names[i]] = type_options[child_types[i]];\n                }\n            } finally {\n                x.delete();\n            }\n        } else {\n            this.#children = children;\n        }\n    }\n\n    /**\n     * @member {object}\n     * @desc An object where the keys are the names of the immediate children and the values are strings specifying the object type of each child.\n     * Each string can be one of `\"Group\"`, `\"DataSet\"` or `\"Other\"`.\n     */\n    get children() {\n        return this.#children;\n    }\n\n    #child_name(child) {\n        let new_name = this.name;\n        if (new_name != \"/\") {\n            new_name += \"/\";\n        } \n        new_name += child;\n        return new_name;\n    }\n\n    /**\n     * @param {string} name - Name of the child element to open.\n     * @param {object} [options] - Further options to pass to the {@linkplain H5Group} or {@linkplain H5DataSet} constructors.\n     *\n     * @return {H5Group|H5DataSet} Object representing the child element.\n     */\n    open(name, options = {}) {\n        let new_name = this.#child_name(name);\n        if (name in this.#children) {\n            if (this.#children[name] == \"Group\") {\n                return new H5Group(this.file, new_name, options);\n            } else if (this.#children[name] == \"DataSet\") {\n                return new H5DataSet(this.file, new_name, options); \n            } else {\n                throw new Error(\"don't know how to open '\" + name + \"'\");\n            }\n        } else {\n            throw new Error(\"no '\" + name + \"' child in this HDF5 Group\");\n        }\n    }\n\n    /**\n     * @param {string} name - Name of the group to create.\n     *\n     * @return {@H5Group} A group is created as an immediate child of the current group.\n     * A {@linkplain H5Group} object is returned representing this new group.\n     * If a group already exists at `name`, it is returned directly.\n     */\n    createGroup(name) {\n        let new_name = this.#child_name(name);\n        if (name in this.children) {\n            if (this.children[name] == \"Group\") {\n                return new H5Group(this.file, new_name);\n            } else {\n                throw new Error(\"existing child '\" + new_name + \"' is not a HDF5 group\");\n            }\n        } else {\n            wasm.call(module => module.create_hdf5_group(this.file, new_name));\n            this.children[name] = \"Group\";\n            return new H5Group(this.file, new_name, { children: {} });\n        }\n    }\n\n    /**\n     * @param {string} name - Name of the dataset to create.\n     * @param {string} type - Type of dataset to create.\n     * This can be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64;\n     * or `\"FloatX\"` for `X` of 32 or 64;\n     * or `\"String\"`.\n     * @param {Array} shape - Array containing the dimensions of the dataset to create.\n     * This can be set to an empty array to create a scalar dataset.\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.maxStringLength=10] - Maximum length of the strings to be saved.\n     * Only used when `type = \"String\"`.\n     * @param {number} [options.compression=6] - Deflate compression level.\n     * @param {Array} [options.chunks=null] - Array containing the chunk dimensions.\n     * This should have length equal to `shape`, with each value being no greater than the corresponding value of `shape`.\n     * If `null`, it defaults to `shape`.\n     *\n     * @return {H5DataSet} A dataset of the specified type and shape is created as an immediate child of the current group.\n     * A {@linkplain H5DataSet} object is returned representing this new dataset.\n     */\n    createDataSet(name, type, shape, { maxStringLength = 10, compression = 6, chunks = null } = {}) {\n        let new_name = this.#child_name(name);\n\n        let shape_arr;\n        let chunk_arr; \n        try {\n            shape_arr = utils.wasmifyArray(shape, \"Int32WasmArray\");\n\n            let chunk_offset = shape_arr.offset;\n            if (chunks !== null) {\n                chunk_arr = utils.wasmifyArray(chunks, \"Int32WasmArray\");\n                if (chunk_arr.length != shape_arr.length) {\n                    throw new Error(\"'chunks' and 'shape' should have the same dimensions\");\n                }\n                chunk_offset = chunk_arr.offset;\n            }\n\n            wasm.call(module => module.create_hdf5_dataset(this.file, new_name, type, shape_arr.length, shape_arr.offset, maxStringLength, compression, chunk_offset));\n        } finally {\n            shape_arr.free();\n        }\n\n        this.children[name] = \"DataSet\";\n        return new H5DataSet(this.file, new_name, { type: type, shape: shape });\n    }\n\n    /**\n     * This convenience method combines {@linkcode H5Group#createDataSet createDataSet} with {@linkcode H5DataSet#write write}.\n     * It is particularly useful for string types as it avoids having to specify the `maxStringLength` during creation based on the `x` used during writing.\n     * \n     * @param {string} name - Name of the dataset to create.\n     * @param {string} type - Type of dataset to create.\n     * This can be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64;\n     * or `\"FloatX\"` for `X` of 32 or 64;\n     * or `\"String\"`.\n     * @param {Array} shape - Array containing the dimensions of the dataset to create.\n     * If set to an empty array, this will create a scalar dataset.\n     * If set to `null`, this is determined from `x`.\n     * @param {(TypedArray|Array|string|number)} x - Values to be written to the new dataset, see {@linkcode H5DataSet#write write}.\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.compression=6] - Deflate compression level.\n     * @param {Array} [options.chunks=null] - Array containing the chunk dimensions.\n     * This should have length equal to `shape`, with each value being no greater than the corresponding value of `shape`.\n     * If `null`, it defaults to `shape`.\n     *\n     * @return {H5DataSet} A dataset of the specified type and shape is created as an immediate child of the current group.\n     * Then it is and filled with the contents of `x`.\n     * A {@linkplain H5DataSet} object is returned representing this new dataset.\n     */\n     writeDataSet(name, type, shape, x, { compression = 6, chunks = null } = {}) {\n        if (x === null) {\n            throw new Error(\"cannot write 'null' to HDF5\"); \n        }\n\n        if (shape === null) {\n            if (typeof x == \"string\" || typeof x == \"number\") {\n                x = [x];\n                shape = []; // scalar, I guess.\n            } else {\n                shape = [x.length];\n            }\n        } else {\n            x = check_shape(x, shape);\n        }\n\n        let handle;\n        if (type == \"String\") {\n            let [ lengths, buffer ] = repack_strings(x);\n            try {\n                let maxlen = 0;\n                lengths.array().forEach(y => {\n                    if (maxlen < y) {\n                        maxlen = y;\n                    }\n                });\n\n                handle = this.createDataSet(name, \"String\", shape, { maxStringLength: maxlen, compression: compression, chunks: chunks });\n                wasm.call(module => module.write_string_hdf5_dataset(handle.file, handle.name, lengths.length, lengths.offset, buffer.offset));\n\n            } finally {\n                utils.free(lengths);\n                utils.free(buffer);\n            }\n        } else {\n            handle = this.createDataSet(name, type, shape, { compression: compression, chunks: chunks });\n            handle.write(x);\n        }\n\n        return handle;\n    }\n}\n\n/**\n * Representation of a HDF5 file as a top-level group.\n *\n * @augments H5Group\n */\nexport class H5File extends H5Group {\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {object} [options] - Optional parameters.\n     * @param {object} [options.children=null] - For internal use, to set the immediate children of the file.\n     * If `null`, this is determined by reading the `file`.\n     */\n    constructor(file, { children = null } = {}) {\n        super(file, \"/\", { children: children });\n    }\n}\n\n/**\n * Create a new HDF5 file.\n *\n * @param {string} path - Path to the file.\n *\n * @return {H5File} A new file is created at `path`.\n * A {@linkplain H5File} object is returned.\n */\nexport function createNewHDF5File(path) {\n    wasm.call(module => module.create_hdf5_file(path));\n    return new H5File(path, { children: {} });\n}\n\n/**\n * Representation of a dataset inside a HDF5 file.\n *\n * @augments H5Base\n */\nexport class H5DataSet extends H5Base {\n    #shape;\n    #type;\n    #values;\n    #loaded;\n\n    static #load(file, name) {\n        let vals;\n        let type;\n        let shape;\n\n        let x = wasm.call(module => new module.LoadedH5DataSet(file, name));\n        try {\n            type = x.type();\n            if (type == \"other\") {\n                throw new Error(\"cannot load dataset for an unsupported type\");\n            }\n\n            if (type == \"String\") {\n                vals = unpack_strings(x.values(), x.lengths());\n            } else {\n                vals = x.values().slice();\n            }\n\n            shape = Array.from(x.shape());\n        } finally {\n            x.delete();\n        }\n\n        return { \"values\": vals, \"type\": type, \"shape\": shape };\n    }\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the object inside the file.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.load=false] - Whether or not to load the contents of the dataset in the constructor.\n     * If `false`, the contents can be loaded later with {@linkcode H5DataSet#load load}.\n     * @param {Array} [options.shape=null] - For internal use, to set the dimensions of the dataset.\n     * If `null`, this is determined by reading the `file` at `name`.\n     * @param {Array} [options.type=null] - For internal use, to set the type of the dataset.\n     * If `null`, this is determined by reading the `file` at `name`.\n     * @param {Array} [options.shape=null] - For internal use, to set the values of the dataset.\n     */\n    constructor(file, name, { load = false, shape = null, type = null, values = null } = {}) {\n        super(file, name);\n\n        if (shape === null && type === null) {\n            if (!load) {\n                let x = wasm.call(module => new module.H5DataSetDetails(file, name));\n                try {\n                    this.#type = x.type();\n                    this.#shape = Array.from(x.shape());\n                    this.#values = null;\n                } finally {\n                    x.delete();\n                }\n            } else {\n                let deets = H5DataSet.#load(file, name);\n                this.#type = deets.type;\n                this.#shape = deets.shape;\n                this.#values = deets.values;\n            }\n            this.#loaded = load;\n        } else {\n            this.#shape = shape;\n            this.#type = type;\n            this.#values = values;\n            this.#loaded = (values !== null);\n        }\n    }\n\n    /**\n     * @member {object}\n     * @desc String containing the type of the dataset.\n     * This may be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64;\n     * or `\"FloatX\"` for `X` of 32 or 64;\n     * `\"String\"`, or `\"Other\"`.\n     * \n     */\n    get type() {\n        return this.#type;\n    }\n\n    /**\n     * @member {Array}\n     * @desc Array of integers containing the dimensions of the dataset.\n     * If this is empty, the dataset is a scalar.\n     */\n    get shape() {\n        return this.#shape;\n    }\n\n    /**\n     * @member {boolean}\n     * @desc Whether the contents of the dataset have already been loaded.\n     */\n    get loaded() {\n        return this.#loaded;\n    }\n\n    /**\n     * @member {(Array|TypedArray)}\n     * @desc The contents of this dataset.\n     * This has length equal to the product of {@linkcode H5DataSet#shape shape};\n     * unless this dataset is scalar, in which case it has length 1.\n     */\n    get values() {\n        return this.#values;\n    }\n\n    /**\n     * @return {Array|TypedArray} The contents of this dataset are loaded and cached in this {@linkplain H5DataSet} object.\n     * A (Typed)Array is returned containing those contents.\n     */\n    load() {\n        if (!this.#loaded) {\n            let deets = H5DataSet.#load(this.file, this.name);\n            this.#values = deets.values;\n            this.#loaded = true;\n        }\n        return this.#values;\n    }\n\n    /**\n     * @param {(Array|TypedArray|number|string)} x - Values to write to the dataset.\n     * This should be of length equal to the product of {@linkcode H5DataSet#shape shape};\n     * unless `shape` is empty, in which case it should either be of length 1, or a single number or string.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the written values in this {@linkplain H5DataSet} object.\n     *\n     * @return `x` is written to the dataset on file.\n     * No return value is provided.\n     */\n    write(x, { cache = false } = {}) {\n        if (x === null) {\n            throw new Error(\"cannot write 'null' to HDF5\"); \n        }\n\n        x = check_shape(x, this.shape);\n\n        if (this.type == \"String\") {\n            let [ lengths, buffer ] = repack_strings(x);\n            try {\n                wasm.call(module => module.write_string_hdf5_dataset(this.file, this.name, lengths.length, lengths.offset, buffer.offset));\n            } finally {\n                utils.free(buffer);\n                utils.free(lengths);\n            }\n\n            if (cache) {\n                this.#values = x.slice();\n                this.#loaded = true;\n            } else {\n                this.#loaded = false;\n                this.#values = null;\n            }\n        } else {\n            if (Array.isArray(x)) {\n                // no strings allowed!\n                for (const x0 of x) {\n                    if (typeof x0 === \"string\") {\n                        throw new Error(\"'x' should not contain any strings for a non-string HDF5 dataset\");\n                    }\n                }\n            }\n            let y = utils.wasmifyArray(x, null);\n\n            try {\n                wasm.call(module => module.write_numeric_hdf5_dataset(this.file, this.name, y.constructor.className, y.offset));\n                if (cache) {\n                    this.#values = y.slice();\n                    this.#loaded = true;\n                } else {\n                    this.#loaded = false;\n                    this.#values = null;\n                }\n            } finally {\n                y.free();\n            }\n        }\n\n        return;\n    }\n}\n\nfunction extract_names(host, output, recursive = true) {\n    for (const [key, val] of Object.entries(host.children)) {\n        if (val == \"Group\") {\n            output[key] = {};\n            if (recursive) {\n                extract_names(host.open(key), output[key], recursive);\n            }\n        } else {\n            let data = host.open(key);\n\n            let dclass;\n            if (data.type.startsWith(\"Uint\") || data.type.startsWith(\"Int\")) {\n                dclass = \"integer\";\n            } else if (data.type.startsWith(\"Float\")) {\n                dclass = \"float\";\n            } else {\n                dclass = data.type.toLowerCase();\n            }\n\n            output[key] = dclass + \" dataset\";\n        }\n    }\n}\n\n/**\n * Extract object names from a HDF5 file.\n *\n * @param {string} path - Path to a HDF5 file.\n * For web applications, this should be saved to the virtual filesystem with {@linkcode writeFile}.\n * @param {object} [options] - Optional parameters.\n * @param {string} [options.group=\"\"] - Group to use as the root of the search.\n * If an empty string is supplied, the entire file is used as the root.\n * @param {boolean} [options.recursive=true] - Whether to recursively extract names inside child groups.\n * \n * @return {object} Nested object where the keys are the names of the HDF5 objects and values are their types.\n * HDF5 groups are represented by nested Javascript objects in the values;\n * these nested objects are empty if `recursive = false`.\n * HDF5 datasets are represented by strings specifying the data type - i.e., `\"integer\"`, `\"float\"`, `\"string\"` or `\"other\"`.\n */\nexport function extractHDF5ObjectNames (path, { group = \"\", recursive = true } = {}) {\n    var src;\n    if (group == \"\") {\n        src = new H5File(path);\n    } else {\n        src = new H5Group(path, group);\n    }\n    var output = {};\n    extract_names(src, output, recursive);\n    return output;\n}\n\n/**\n * Load a dataset from a HDF5 file.\n *\n * @param {string} path - Path to a HDF5 file.\n * For web applications, this should be saved to the virtual filesystem with {@linkcode writeFile}.\n * @param {string} name - Name of a dataset inside the HDF5 file.\n * \n * @return {object} An object containing:\n * - `dimensions`, an array containing the dimensions of the dataset.\n * - `contents`, a Int32Array, Float64Array or array of strings, depending on the type of the dataset. \n */\nexport function loadHDF5Dataset(path, name) {\n    var x = new H5DataSet(path, name, { load: true });\n    return {\n        \"dimensions\": x.shape,\n        \"contents\": x.values\n    };\n}\n","import {ScranMatrix} from \"./ScranMatrix.js\";\n\n/**\n * Permute or subset a vector so that its values correspond the row identities of a {@linkplain ScranMatrix}.\n * This is usually applied to feature annotations that correspond to the row identities in the original dataset,\n * but need to be modified to match a {@linkplain ScranMatrix} that has a non-trivial row reorganization.\n *\n * @param {(ScranMatrix|Int32Array)} x - A {@linkplain ScranMatrix} where the rows might have been reorganized for a more memory-efficient storage order.\n * Alternatively a row identity vector, generated by calling {@linkcode ScranMatrix#identities identities}.\n * @param {(Array|TypedArray)} values - An array of values where each entry corresponds to a row in the original row order.\n *\n * @return {Array|TypedArray} A copy of `values` is returned, permuted or subsetted so that each entry corresponds to a row of `x`.\n */\nexport function matchVectorToRowIdentities(x, values) {\n    let perm = null;\n    if (x instanceof ScranMatrix) {\n        if (x.isReorganized()) {\n            perm = x.identities();\n        }\n    } else {\n        perm = x;\n    }\n\n    if (perm !== null) {\n        let copy = new values.constructor(perm.length);\n        perm.forEach((x, i) => {\n            copy[i] = values[x];\n        });\n        return copy;\n    } else {\n        return values.slice();\n    }\n}\n\n/**\n * Create a permutation vector to update old results to match the row identities of a {@linkplain ScranMatrix}.\n * This is provided as a safety measure to handle changes in the order of rows across different versions of the {@linkplain ScranMatrix} initialization.\n * The premise is that there are some old results that are ordered to match the row identities of an old version of a {@linkplain ScranMatrix}.\n * Given the old row identity vector, this function will enable applications to update their result vectors to match the row identities of the new object.\n *\n * @param {(ScranMatrix|Int32Array)} x - A {@linkplain ScranMatrix} where the rows might have been reorganized for a more memory-efficient storage order.\n * Alternatively a row identity vector, generated by calling {@linkcode ScranMatrix#identities identities}.\n * @param {TypedArray} old - A row identity vector for an older sparse matrix generated from the same dataset as `x`. \n * This vector should have been created by calling {@linkcode ScranMatrix#identities identities}.\n *\n * @return {?Int32Array}\n * `null` is returned if the new and old row identities are the same, in which case no further action is required.\n *\n * Otherwise, an Int32Array is returned containing a permutation to be applied to vectors to match the row identities of `x`.\n * (For example, applying the permutation to `old` will yield the same row identities as `x`.)\n */\nexport function updateRowIdentities(x, old) {\n    let perm = null;\n    let NR;\n    if (x instanceof ScranMatrix) {\n        NR = x.numberOfRows();\n        if (x.isReorganized()) {\n            if (old.length != NR) {\n                throw new Error(\"number of rows in 'x' should be the same as length of 'old'\");\n            }\n            perm = x.identities();\n        }\n    } else {\n        NR = x.length;\n        if (old.length != NR) {\n            throw new Error(\"length of 'x' should be the same as length of 'old'\");\n        }\n        perm = x;\n    }\n\n    if (NR != old.length) {\n        throw new Error(\"mismatch in row identities between 'x' and 'old'\");\n    }\n\n    let same = true;\n    if (perm !== null) {\n        for (const [index, val] of perm.entries()) {\n            if (old[index] != val) {\n                same = false;\n                break;\n            }\n        }\n    } else {\n        for (const [index, val] of old.entries()) {\n            if (val != index) {\n                same = false;\n                break;\n            }\n        }\n    }\n    if (same) {\n        return null;\n    }\n\n    let mapping = {};\n    old.forEach((x, i) => { mapping[x] = i; });\n    let output = new Int32Array(NR);\n\n    if (perm !== null) {\n        for (var i = 0; i < perm.length; i++) {\n            let p = perm[i];\n            if (!(p in mapping)) {\n                throw new Error(\"mismatch in row identities between 'x' and 'old'\");\n            }\n            output[i] = mapping[p];\n        }\n    } else {\n        for (var p = 0; p < NR; p++) {\n            if (!(p in mapping)) {\n                throw new Error(\"mismatch in row identities between 'x' and 'old'\");\n            }\n            output[p] = mapping[p];\n        }\n    }\n\n    return output;\n}\n\n// Deprecated, kept around for back compatibility as of 0.1.1.\nexport function permuteVector(x, values) {\n    return matchVectorToRowIdentities(x, values);\n}\n\nexport function updatePermutation(x, old) {\n    return updateRowIdentities(x, old);\n}\n","import * as permute from \"./permute.js\";\n\n// Deprecated, kept around for back-compatibility as of 0.2.6.\nexport function matchFeatureAnnotationToRowIdentities(x, featureInfo) {\n    for (const [key, val] of Object.entries(featureInfo)) {\n        featureInfo[key] = permute.matchVectorToRowIdentities(x, val);\n    }\n    return;\n}\n\n// Deprecated, kept around for back-compatibility as of 0.1.1.\nexport function permuteFeatures(x, featureInfo) {\n    return matchFeatureAnnotationToRowIdentities(x, featureInfo);\n}\n\n\n/**\n * Guess the identity of the features from their names.\n *\n * @param {Array} features - Array of strings containing feature identifiers, typically Ensembl IDs or gene symbols.\n * Elements may also be `null` or undefined if an identifier is missing.\n *\n * @return {object} An object containing the inferred `species`, which can be either `\"human\"` or `\"mouse\"`;\n * and the identifier `type`, which can be either `\"ensembl\"` or `\"symbol\"`.\n * A `confidence` value is reported which defines the percentage of entries in `x` that are consistent with the inferred identity.\n */\nexport function guessFeatures(features) {\n    // Human Ensembl.\n    let human_ens = 0\n    features.forEach(x => {\n        if (x && x.match(/^ENSG[0-9]{11}$/)) {\n            human_ens++;\n        }\n    });\n\n    // Human symbol; starts with upper case, no lower case, and not an Ensembl of any kind.\n    let human_sym = 0\n    features.forEach(x => {\n        if (x && x.match(/^[A-Z][^a-z]+$/) && !x.match(/^ENS[A-Z]+[0-9]{11}/)) {\n            human_sym++;\n        }\n    });\n\n    // Mouse Ensembl.\n    let mouse_ens = 0\n    features.forEach(x => {\n        if (x && x.match(/^ENSMUSG[0-9]{11}$/)) {\n            mouse_ens++;\n        }\n    });\n\n    // Mouse symbol; starts with upper case, but no upper case after that.\n    let mouse_sym = 0\n    features.forEach(x => {\n        if (x && x.match(/^[A-Z][^A-Z]+$/)) {\n            mouse_sym++;\n        }\n    });\n\n    // Who's the highest?\n    let output = [\n        { \"species\": \"human\", \"type\": \"ensembl\", \"confidence\": human_ens},\n        { \"species\": \"human\", \"type\": \"symbol\", \"confidence\": human_sym},\n        { \"species\": \"mouse\", \"type\": \"ensembl\", \"confidence\": mouse_ens},\n        { \"species\": \"mouse\", \"type\": \"symbol\", \"confidence\": mouse_sym}\n    ];\n\n    let highest = output[0];\n    for (var i = 1; i < output.length; i++) {\n        if (output[i].confidence > highest.confidence) {\n            highest = output[i];\n        }\n    }\n\n    highest.confidence /= features.length;\n    return highest;\n}\n","import * as wa from \"wasmarrays.js\";\n\n/**\n * Check that an array collection has equilength arrays.\n * Array collections are just objects where each value is an Array or TypedArray of the same length;\n * this is typically used to represent the per-gene or per-cell annotations.\n * \n * @param {object} x - Object containing a collection of arrays (or TypedArrays) of the same length.\n * Currently WasmArrays are not supported.\n *\n * @return An error is raised if `x` has differing lengths or contains WasmArrays.\n */\nexport function validateArrayCollection(x) {\n    let length = null;\n    for (const [k, v] of Object.entries(x)) {\n        if (length === null) {\n            length = v.length;\n        } else if (length !== v.length) {\n            throw new Error(\"array collection should have equilength arrays\");\n        } else if (v instanceof wa.WasmArray) {\n            throw new Error(\"array collection should not contain WasmArrays\");\n        }\n    }\n    return;\n}\n\n/**\n * Subset each array in a collection of equilength arrays.\n * This is typically performed on the per-cell annotations after filtering in {@linkcode filterCells};\n * on the per-gene annotations to match any row reorganization (see {@linkcode ScranMatrix#isReorganized isReorganized});\n * or on the per-gene annotations to match the features in the intersection of {@linkcode cbindWithNames}, to name a few.\n *\n * @param {object} x - Object containing arrays or TypedArrays, see {@linkcode validateArrayCollection}.\n * @param {Array|TypedArray|WasmArray} subset - Array of indices specifing the subset to extract from each array in `x`.\n *\n * Alternatively, an array of length equal to the length of arrays in `x`, specifying whether the corresponding value in each array should be retained.\n * @param {object} [options] - Optional parameters.\n * @param {?boolean} [options.filter] - Whether `subset` is a filtering vector.\n * - If `null`, `subset` is assumed to contain indices of the array elements to keep in the output.\n * - If `false`, truthy entries of `subset` are assumed to indicate the array elements to retain the output.\n * - If `true`, truthy entries of `subset` are assumed to indicate the array elements to filter out in the output.\n *\n * @return {object} An object with the same keys as `x`, where each value is the desired subset of the corresponding array of `x`.\n */\nexport function subsetArrayCollection(x, subset, { filter = null } = {}) {\n    let sub = {};\n    let temporaries = [];\n    let remaining;\n\n    try {\n        for (const [k, v] of Object.entries(x)) {\n            let copy;\n\n            if (filter === null) {\n                copy = new v.constructor(subset.length);\n                subset.forEach((x, i) => { copy[i] = v[x]; });\n            } else {\n                if (subset.length !== v.length) {\n                    throw new Error(\"'subset' and each value of 'x' should have the same length\");\n                }\n                let subcopy = subset;\n                if (subset instanceof wa.WasmArray) {\n                    subcopy = subset.array();\n                }\n                if (filter) {\n                    copy = v.filter((x, i) => !subcopy[i]);\n                } else {\n                    copy = v.filter((x, i) => !!subcopy[i]); \n                }\n            } \n\n            sub[k] = copy;\n        }\n    } catch (e) {\n        for (const t of temporaries) {\n            t.free();\n        }\n        throw e;\n    }\n\n    return sub;\n}\n\n/**\n * Split an array collection based on a factor of interest.\n * This is typically used to split the per-gene annotations to match any splitting of the data matrix in {@linkcode splitRows}.\n *\n * @param {object} x - Object containing arrays or TypedArrays, see {@linkcode validateArrayCollection}.\n * @param {object} split - Object describing how the arrays should be split, usually generated by {@linkcode splitByFactor}.\n *\n * @return {object} Object where each key is a factor level (i.e., a key of `split`).\n * Each value is an array collection that is sliced to the entries corresponding to that factor level.\n */\nexport function splitArrayCollection(x, split) {\n    let splits = {};\n    for (const [k, v] of Object.entries(split)) {\n        splits[k] = subsetArrayCollection(x, v);\n    }\n    return splits;\n}\n\n/**\n * Combine multiple array collections by concatenating corresponding arrays with the same key across collections.\n * This is typically used to combine the per-cell annotations to match combined matrices in {@linkcode cbind}.\n *\n * @param {Array} inputs - Array of objects where each object is itself an array collection, see {@linkcode validateArrayCollection}.\n * @param {object} [options] - Optional parameters.\n * @param {?Array} [options.lengths=null] - Array of integers of length equal to `inputs`.\n * Each entry specifies the lengths of the arrays in the corresponding entry of `inputs`.\n * This needs to be supplied if any `inputs` are empty (i.e., no arrays) - otherwise, if `null`, this is inferred from `inputs`.\n *\n * @return {object} Object representing an array collection.\n * Each key corresponds to any key across `inputs` while each value is an array containing the concatenation of that key's arrays across all `inputs`.\n * If no corresponding array is present in a collection, its entries in the concatenated array is filled with `null`s.\n * The type of TypedArrays will only be preserved if it is the same across all of the key's arrays in `inputs`, otherwise it is converted into a regular array.\n */\nexport function combineArrayCollections(inputs, { lengths = null } = {}) {\n    // Inferring lengths.\n    if (lengths === null) {\n        lengths = [];\n        for (const current of inputs) {\n            let curkeys = Object.keys(current);\n            if (curkeys.length == 0) {\n                throw new Error(\"all 'inputs' must be non-empty if 'lengths = null'\");\n            }\n            lengths.push(current[curkeys[0]].length);\n        }\n    } else if (lengths.length != inputs.length) {\n        throw new Error(\"'lengths' and 'inputs' should have the same length\");\n    }\n\n    let total = 0;\n    lengths.forEach(x => { total += x; });\n\n    // Get all annotations keys across datasets; we then concatenate\n    // columns with the same name, or we just fill them with missings.\n    let ckeys = new Set();\n    for (const current of inputs) {\n        for (const a of Object.keys(current)) {\n            ckeys.add(a);\n        }\n    }\n    let anno_keys = Array.from(ckeys);\n\n    let combined = {};\n    for (const col of anno_keys) {\n        // Preflight; falling back to an Array if there's any hint \n        // of inconsistency between the different objects.\n        let constructor;\n        for (var i = 0; i < lengths.length; i++) {\n            let current = inputs[i];\n            if (!(col in current)) {\n                constructor = Array;\n                break;\n            }\n\n            if (typeof constructor == \"undefined\") {\n                constructor = current[col].constructor;\n            } else if (constructor !== current[col].constructor) {\n                constructor = Array;\n                break;\n            }\n        }\n\n        let current_combined = new constructor(total);\n        let offset = 0;\n\n        for (var i = 0; i < lengths.length; i++) {\n            let current = inputs[i];\n            let len = lengths[i];\n\n            if (col in current) {\n                if (current[col].length != len) {\n                    throw new Error(\"mismatch in lengths for '\" + col + \"' in input object \" + String(i + 1));\n                }\n                current[col].forEach((x, i) => { current_combined[i + offset] = x; });\n            } else {\n                current_combined.fill(null, offset, offset + len);\n            }\n\n            offset += len;\n        }\n\n        combined[col] = current_combined;\n    }\n\n    return combined;\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Create a blocking factor for a set of contiguous blocks, usually to accompany the output of {@linkcode cbind} on matrices representing different batches.\n * This can be used as the blocking factor in functions such as {@linkcode modelGeneVar} or {@linkcode scoreMarkers}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n *\n * @param {(Array|TypedArray)} ncells - Array of integers specifying the number of cells in each block.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the sum of `ncells`.\n *\n * @return {Int32WasmArray} Array containing the blocking factor.\n * Each value specifies the block of origin for each cell.\n *\n * If `buffer` was supplied, it is used as the return value. \n */\nexport function createBlock(ncells, { buffer = null } = {}) {\n    let total = 0;\n    ncells.forEach(x => { total += x; });\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(total);\n            buffer = local_buffer;\n        } else if (buffer.length !== total) {\n            throw new Error(\"'buffer' should have length equal to sum of 'ncells'\");\n        }\n\n        let barr = buffer.array();\n        let sofar = 0;\n        for (var i = 0; i < ncells.length; i++) {\n            let old = sofar;\n            sofar += ncells[i];\n            barr.fill(i, old, sofar);\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n/**\n * Convert an existing array into a blocking factor for use in **scran.js** functions such as {@linkcode modelGeneVar} or {@linkcode scoreMarkers}.\n *\n * @param {(Array|TypedArray)} x - Array containing a blocking factor, where each unique level specifies the assigned block for each cell.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to that of `x`.\n *\n * @return {object} Object containing `ids`, an Int32WasmArray of length equal to `x` with the block IDs for each cell;\n * and `levels`, an array of unique levels corresponding to the block IDs.\n *\n * If `buffer` was supplied, it is used as the value of the `ids` property.\n */\nexport function convertBlock(x, { buffer = null } = {}) {\n    let levels = [];\n    let local_buffer;\n\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(x.length);\n            buffer = local_buffer;\n        } else if (buffer.length !== x.length) {\n            throw new Error(\"'buffer' should have length equal to that of 'x'\");\n        }\n\n        let barr = buffer.array();\n        let mapping = {};\n\n        x.forEach((y, i) => {\n            if (!(y in mapping)) {\n                mapping[y] = levels.length;\n                levels.push(y);\n            }\n            barr[i] = mapping[y];\n        });\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return {\n        ids: buffer,\n        levels: levels\n    };\n}\n\n/**\n * Filter the blocking factor, typically based on the same filtering vector as {@linkcode filterCells}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n * \n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@linkcode createBlock}.\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * \n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options] - Optional parameters.\n * @param {?boolean} [options.filter=null] - Whether `subset` to filter\n * If provided, this should be of length equal to the number of `false`s in `filter`.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to `subset`, if `filter = null`; \n * the number of falsey elements in `subset`, if `filter = false`;\n * or the number of truthy elements in `subset`, if `filter = true`.\n *\n * @return {Int32WasmArray} Array containing the desired subset of `x`. \n * If `buffer` is supplied, the returned array will be a view into `buffer`.\n */\nexport function subsetBlock(x, subset, { filter = null, buffer = null } = {}) {\n    let len = 0;\n    if (filter === null) {\n        len = subset.length;\n    } else {\n        if (subset.length != x.length) {\n            throw new Error(\"'x' and 'filter' should have the same length\");\n        }\n\n        let sum = 0;\n        subset.forEach(x => { sum += (x != 0); });\n        if (filter) {\n            len = subset.length - sum;\n        } else {\n            len = sum;\n        }\n    }\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(len);\n            buffer = local_buffer;\n        } else if (buffer.length !== len) {\n            throw new Error(\"length of 'buffer' is not consistent with 'subset'\");\n        }\n\n        let barr = buffer.array();\n        let xarr = x.array();\n\n        if (filter == null) {\n            subset.forEach((s, i) => {\n                barr[i] = xarr[s];\n            });\n        } else if (filter) {\n            let j = 0;\n            subset.forEach((y, i) => {\n                if (y == 0) {\n                    barr[j] = xarr[i];\n                    j++;\n                }\n            });\n        } else {\n            let j = 0;\n            subset.forEach((y, i) => {\n                if (y !== 0) {\n                    barr[j] = xarr[i];\n                    j++;\n                }\n            });\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n/**\n * Filter the blocking factor, typically based on the same filtering vector as {@linkcode filterCells}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n * \n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@linkcode createBlock}.\n * @param {(Array|TypedArray|Uint8WasmArray)} filter - Array of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the number of falsey elements in `filter`.\n *\n * @return {Int32WasmArray} Array of length equal to `x`, containing all entries of `x` for which `filter` is `false`.\n *\n * If `buffer` is supplied, it is used as the return value.\n */\nexport function filterBlock(x, filter, { buffer = null } = {}) {\n    return subsetBlock(x, filter, { buffer: buffer, filter: true });\n}\n\n/**\n * Reindex the blocking factor to remove unused levels.\n * This is done by adjusting the blocking IDs so that every ID from `[0, N)` is represented at least once, where `N` is the number of levels.\n *\n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@link createBlock}.\n *\n * @return {Array} `x` is modified in place to remove unused levels.\n *\n * An array (denoted here as `y`) is returned that represents the mapping between the original and modified IDs,\n * i.e., running `x.map(i => y[i])` will recover the input `x`.\n * This is most commonly used to create a new array of levels, i.e., `y.map(i => old_levels[i])` will drop the unused levels. \n */\nexport function dropUnusedBlock(x) {\n    let uniq = new Set(x.array())\n    let uniq_arr = Array.from(uniq).sort();\n    let mapping = {};\n    uniq_arr.forEach((y, i) => { mapping[y] = i; });\n\n    let x_arr = x.array();\n    x.forEach((y, i) => {\n        x_arr[i] = mapping[y];\n    });\n\n    return uniq_arr;\n}\n","import * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as gc from \"./gc.js\";\n\nfunction harvest_matrices(x) {\n    let output = utils.createBigUint64WasmArray(x.length);\n    let arr = output.array();\n    for (var i = 0; i < x.length; i++) {\n        arr[i] = BigInt(x[i].matrix.$$.ptr);\n    }\n    return output;\n}\n\n/**\n * Combine matrices by column, where all matrices contain data for the same features.\n * This yields a combined matrix where the order of the row identities are taken from the first matrix.\n * (If necessary, subsequent matrices will be permuted by row to match the first matrix's row order.)\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * Any number of these may have a non-trivial row organization.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.assumeSame=false] - Whether to assume all matrices in `inputs` have the same order of row identities.\n * If `true`, no attempt is made to match the row order across matrices.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by column.\n */\nexport function cbind(inputs, { assumeSame = false } = {}) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.cbind(mat_ptrs.length, mat_ptrs.offset, assumeSame),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by column, after subsetting each matrix to the intersection of common features.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * @param {Array} names - Array of length equal to `inputs`.\n * Each entry should be an Array containing the row names of the corresponding entry of `inputs`.\n * Names should correspond to the rows, so if an element of `inputs` has reorganized row identities, the array of names should be similarly reorganized to match (e.g., with {@linkcode matchVectorToRowIdentities}).\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the combined matrices.\n * - `indices`, an Int32WasmArray of length equal to the number of rows in `matrix`.\n *    This contains the index of the row in the first entry of `inputs` corresponding to each row of `matrix`,\n *    i.e., the gene at the `i`-th row of `matrix` is the same as the gene at the `indices[i]`-th row of `inputs[0]`.\n * - `names`, an array of names identifying the rows of `matrix`.\n *    This is constructed by indexing the first entry of `names` with `indices`.\n */\nexport function cbindWithNames(x, names) {\n    let mat_ptrs;\n    let renamed = [];\n    let name_ptrs;\n    let indices;\n    let output = {};\n\n    try {\n        // Building a common set of rownames.\n        if (names.length !== x.length) {\n            throw new Error(\"length of 'names' should be equal to length of 'x'\");\n        }\n\n        let common = {};\n        let universe = [];\n        for (var i = 0; i < names.length; i++) {\n            if (x[i].numberOfRows() !== names[i].length) {\n                throw new Error(\"length of each 'names' must equal number of rows of its corresponding 'x'\");\n            }\n            names[i].forEach(x => {\n                if (!(x in common)) {\n                    common[x] = universe.length;\n                    universe.push(x);\n                }\n            });\n        }\n\n        name_ptrs = utils.createBigUint64WasmArray(x.length);\n        {\n            let names_arr = name_ptrs.array();\n            for (var i = 0; i < names.length; i++) {\n                let current = names[i];\n                let replacement = utils.createInt32WasmArray(current.length);\n                let replacement_arr = replacement.array();\n                current.forEach((x, i) => {\n                    replacement_arr[i] = common[x];\n                });\n                renamed.push(replacement);\n                names_arr[i] = BigInt(replacement.offset);\n            }\n        }\n\n        mat_ptrs = harvest_matrices(x);\n        indices = utils.createInt32WasmArray(x[0].numberOfRows());\n        output.matrix = gc.call(\n            module => module.cbind_with_rownames(x.length, mat_ptrs.offset, name_ptrs.offset, indices.offset),\n            ScranMatrix\n        );\n\n        output.indices = indices.slice(0, output.matrix.numberOfRows());\n        let internames = [];\n        for (const i of output.indices) {\n            internames.push(names[0][i]);\n        }\n        output.names = internames;\n\n    } catch (e) {\n        utils.free(output.matrix);\n        throw e;\n\n    } finally {\n        utils.free(mat_ptrs);\n        utils.free(name_ptrs);\n        utils.free(indices);\n        for (const x of renamed) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Helper class for handling matrix data from multiple modalities.\n * In particular, it simplifies memory management of the assorted {@linkplain ScranMatrix} instances containing data for different features in the same set of cells.\n */\nexport class MultiMatrix {\n    #store;\n    #ncols;\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {object} [options.store={}] - Existing store of {@linkplain ScranMatrix} objects.\n     * Each matrix should correspond to a different modality, named according to its key.\n     * All matrices should have data for the same set of cells, i.e., same number of columns.\n     */\n    constructor({ store = {} } = {}) {\n        this.#store = store;\n        this.#ncols = null;\n\n        let keys = Object.keys(store);\n        if (keys.length) {\n            // We ignore numberOfColumns here, as everyone should have the same number of cells.\n            for (var k = 0; k < keys.length; k++) {\n                let current = store[keys[k]];\n                if (k == 0) {\n                    this.#ncols = current.numberOfColumns();\n                } else if (current.numberOfColumns() != this.#ncols) {\n                    throw new Error(\"all matrices should have the same number of columns\");\n                }\n            }\n        }\n    }\n\n    /**\n     * @return {?number} Number of columns in the matrices.\n     * If no matrices are available, `null` is returned.\n     */\n    numberOfColumns() {\n        return this.#ncols;\n    }\n\n    /**\n     * @return {Array} Names of the available modalities.\n     */\n    available() {\n        return Object.keys(this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {boolean} Whether modality `i` is available.\n     */\n    has(i) {\n        return (i in this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {ScranMatrix} The matrix data for modality `i`.\n     */\n    get(i) {\n        return this.#store[i];\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @param {ScranMatrix} matrix - The matrix data for modality `i`.\n     *\n     * @return `matrix` is added to the MultiMatrix with name `i`.\n     */\n    add(i, matrix) {\n        if (this.#ncols === null) {\n            this.#ncols = matrix.numberOfColumns();\n        } else if (matrix.numberOfColumns() != this.#ncols) {\n            throw new Error(\"all matrices should have the same number of columns\");\n        }\n\n        if (i in this.#store) {\n            let old = this.#store[i];\n            utils.free(old);\n        }\n\n        this.#store[i] = matrix;\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return Modality `i` is removed from the MultiMatrix.\n     */\n    remove(i) {\n        utils.free(this.#store[i]);\n        delete this.#store[i];\n        if (Object.keys(this.#store).length == 0) {\n            this.#ncols = null;\n        }\n    }\n\n    /**\n     * @param {string} from - Old name of the modality.\n     * @param {string} to - New name for the modality.\n     *\n     * @return The modality `from` is renamed to `to`, possibly replacing any existing modality at `to`.\n     */\n    rename(from, to) {\n        if (from !== to) {\n            if (to in this.#store) {\n                utils.free(this.#store[to]);\n            }\n            this.#store[to] = this.#store[from];\n            delete this.#store[from];\n        }\n    }\n\n    /**\n     * @return Frees memory for all modalities in this MultiMatrix.\n     */\n    free() {\n        for (const [x, v] of Object.entries(this.#store)) {\n            utils.free(v);\n        }\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { MultiMatrix } from \"./MultiMatrix.js\";\n\n/**\n * Slice a {@linkplain ScranMatrix} by its rows.\n * \n * @param {ScranMatrix} The matrix of interest.\n * @param {Array} indices - Row indices to extract.\n * All indices must be non-negative integers less than `mat.numberOfRows()`.\n *\n * @return {ScranMatrix}\n * A new ScranMatrix containing the subset of rows from `mat` specified by `indices`.\n */\nexport function subsetRows(mat, indices) {\n    let output;\n    let wasm_indices;\n\n    try {\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        output = gc.call(\n            module => module.row_subset(mat.matrix, wasm_indices.offset, wasm_indices.length),\n            mat.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return output;\n}\n\n/**\n * Slice a ScranMatrix by its columns.\n * \n * @param {ScranMatrix} The matrix of interest.\n * @param {Array} indices - Column indices to extract.\n * Al indices must be a non-negative integer less than `mat.numberOfColumns()`.\n *\n * @return {ScranMatrix}\n * A new ScranMatrix containing the subset of columns from `mat` specified by `indices`.\n */\nexport function subsetColumns(mat, indices) {\n    let output;\n    let wasm_indices;\n\n    try {\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        output = gc.call(\n            module => module.column_subset(mat.matrix, wasm_indices.offset, wasm_indices.length),\n            mat.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return output;\n}\n\n/**\n * Given a factor, return the indices corresponding to each level.\n * This can be used in subsequent {@linkcode splitRows} calls.\n *\n * @param {Array|TypedArray} factor - Array containing the factor of interest.\n *\n * @return {object} Object where each key is a factor level and each value is an array containing the indices corresponding to that level in `factor`.\n */\nexport function splitByFactor(factor) {\n    let by = {};\n    factor.forEach((x, i) => {\n        if (!(x in by)) {\n            by[x] = [];\n        }\n        by[x].push(i);\n    });\n    return by;\n}\n\n/**\n * Split a {@linkplain ScranMatrix} by row.\n *\n * @param {ScranMatrix} matrix - A ScranMatrix object.\n * @param {object} split - Object specifying how rows should be split, usually produced by {@link splitByFactor}.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.singleNull=false] - Whether `null` should be returned if `split` only contains one level.\n * This can be used to avoid the creation of a redundant ScranMatrix object.\n * @param {boolean} [options.createMultiMatrix=false] - Whether the output should be returned as a {@linkplain MultiMatrix}.\n *\n * @return {object|MultiMatrix} Object with the same keys as `split` where each value is a ScranMatrix for the corresponding subset of rows.\n * Alternatively, this is wrapped in a MultiMatrix if `createMultiMatrix = true`.\n */\nexport function splitRows(matrix, split, { singleNull = false, createMultiMatrix = false } = {}) { \n    let output = {};\n    let tkeys = Object.keys(split);\n    if (tkeys.length == 1) {\n        if (singleNull) {\n            return null;\n        } else {\n            output[tkeys[0]] = matrix.clone();\n            return output;\n        }\n    }\n\n    let stuff;\n    try {\n        for (const k of tkeys) {\n            output[k] = subsetRows(matrix, split[k]);\n        }\n\n        // Sticking this inside the trycatch, so that\n        // memory is released if the constructor fails. \n        if (createMultiMatrix) {\n            stuff = new MultiMatrix({ store: output });\n        }\n    } catch (e) {\n        for (const v of Object.values(output)) {\n            v.free();\n        }\n        throw e;\n    }\n\n    if (createMultiMatrix) {\n        return stuff;\n    } else {\n        return output;\n    }\n}\n","import * as wasm from \"../wasm.js\";\nimport * as utils from \"../utils.js\"; \nimport * as wa from \"wasmarrays.js\";\n\nexport function computePerCellQcMetrics(x, subsets, run) {\n    var output;\n    var tmp_subsets = [];\n    var subset_offsets;\n\n    try {\n        let nsubsets = 0;\n        let offset_offset = 0;\n\n        if (subsets != null) {\n            nsubsets = subsets.length;\n            subset_offsets = utils.createBigUint64WasmArray(nsubsets);\n            offset_offset = subset_offsets.offset;\n            let offset_arr = subset_offsets.array();\n\n            for (var i = 0; i < nsubsets; i++) {\n                // This will either create a cheap view, or it'll clone\n                // 'subsets' into the appropriate memory space.\n                let current = utils.wasmifyArray(subsets[i], \"Uint8WasmArray\");\n                if (current.length != x.numberOfRows()) {\n                    throw new Error(\"length of each array in 'subsets' should be equal to the matrix rows\");\n                }\n                tmp_subsets.push(current);\n                offset_arr[i] = BigInt(current.offset);\n            }\n        }\n\n        output = run(x.matrix, nsubsets, offset_offset);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(subset_offsets);\n        for (const y of tmp_subsets) {\n            utils.free(y);\n        }\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the metrics allocated on the Wasm heap, produced by {@linkcode computePerCellQCMetrics}.\n * @hideconstructor\n */\nexport class PerCellQCMetricsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the total count for each cell.\n     */\n    sums({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.sums(), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Array containing the total number of detected genes for each cell.\n     */\n    detected({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the proportion of counts in the subset `i` for each cell.\n     * If {@linkcode PerCellQCMetrics#isProportion isProportion} is `false`, the total count of subset `i` is returned instead.\n     */\n    subsetProportions(i, { copy = true } = {}) {\n        return utils.possibleCopy(this.#results.subset_proportions(i), copy);\n    }\n\n    /**\n     * @return {boolean} Whether the subset proportions were computed in {@linkcode computePerCellQCMetrics}.\n     */\n    isProportion() {\n        return this.#results.is_proportion();\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute the per-cell QC metrics.\n *\n * @param {ScranMatrix} x - The count matrix.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.subsetProportions=true] - Whether to compute proportions for each subset.\n * If `false`, the total count for each subset is computed instead.\n *\n * @return {PerCellQCMetricsResults} Object containing the QC metrics.\n */\nexport function computePerCellQCMetrics(x, subsets, { subsetProportions = true } = {}) {\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_qc_metrics(matrix, nsubsets, subset_offset, subsetProportions),\n            PerCellQCMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellQCMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode computePerCellQCFilters} calls.\n * Note that filling requires use of `copy: false` in the various getters to obtain a writeable memory view.\n *\n * @param numberOfCells Number of cells in the dataset.\n * @param numberOfSubsets Number of feature subsets.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.subsetProportions=true] - Whether to store proportions for each subset.\n * If `false`, the total count for each subset is stored instead.\n *\n * @return {PerCellQCMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellQCMetricsResults(numberOfGenes, numberOfSubsets, { subsetProportions = true } = {}) {\n    return gc.call(\n        module => new module.PerCellQCMetrics_Results(numberOfGenes, numberOfSubsets, subsetProportions),\n        PerCellQCMetricsResults\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the ADT-based metrics allocated on the Wasm heap, typically produced by {@linkcode computePerCellAdtQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellAdtQcMetricsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the total ADT count for each cell.\n     */\n    sums({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.sums(), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Array containing the total number of detected ADT features for each cell.\n     */\n    detected({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the total count in the ADT subset `i` for each cell.\n     */\n    subsetTotals(i, { copy = true } = {}) {\n        return utils.possibleCopy(this.#results.subset_totals(i), copy);\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute the per-cell QC metrics from an ADT count matrix.\n *\n * @param {ScranMatrix} x - The ADT count matrix.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n *\n * @return {PerCellAdtQcMetricsResults} Object containing the ADT-based QC metrics.\n */\nexport function computePerCellAdtQcMetrics(x, subsets) {\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_adt_qc_metrics(matrix, nsubsets, subset_offset),\n            PerCellAdtQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellAdtQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode computePerCellAdtQcFilters} calls.\n * Note that filling requires use of `copy: false` in the various getters to obtain a writeable memory view.\n *\n * @param numberOfCells Number of cells in the dataset.\n * @param numberOfSubsets Number of feature subsets.\n *\n * @return {PerCellAdtQcMetricsResults} Object with allocated memory but no actual values.\n */\nexport function emptyPerCellAdtQcMetricsResults(numberOfGenes, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellAdtQcMetrics_Results(numberOfGenes, numberOfSubsets),\n        PerCellAdtQcMetricsResults\n    );\n}\n","import * as utils from \"./../utils.js\";\n\nexport function computePerCellQcFilters(metrics, block, length, run) {\n    var block_data;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != length(metrics)) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = run(metrics, use_blocks, bptr);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computePerCellQCFilters}.\n * @hideconstructor\n */\nexport class PerCellQCFiltersResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array indicating whether each cell was filtered out due to low counts.\n     */\n    discardSums({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.discard_sums(), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array indicating whether each cell was filtered out due to low numbers of detected genes.\n     */\n    discardDetected({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.discard_detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array indicating whether each cell was filtered out due to high proportions for subset `i`.\n     */\n    discardSubsetProportions(i, { copy = true } = {}) {\n        return utils.possibleCopy(this.#results.discard_proportions(i), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array indicating whether each cell was filtered out for any reason.\n     */\n   discardOverall({ copy = true } = {}) {\n       return utils.possibleCopy(this.#results.discard_overall(), copy);\n   }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the sums for each batch.\n     */\n    thresholdsSums({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.thresholds_sums(), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the number of detected genes for each batch.\n     */\n    thresholdsDetected({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.thresholds_detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the proportions for subset `i` in each batch.\n     */\n    thresholdsSubsetProportions(i, { copy = true } = {}) {\n        return utils.possibleCopy(this.#results.thresholds_proportions(i), copy);\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics.\n *\n * @param {PerCellQCMetrics} metrics - Per-cell QC metrics, usually computed by {@linkcode computePerCellQCMetrics}.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {PerCellQCFiltersResults} Object containing the filtering results.\n */\nexport function computePerCellQCFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    return internal.computePerCellQcFilters(\n        metrics, \n        block,\n        x => x.sums().length,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.per_cell_qc_filters(x.results, use_blocks, bptr, numberOfMADs),\n            PerCellQCFiltersResults\n        )\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\n\n/**\n * Wrapper class for the ADT-based QC filtering results, produced by {@linkcode computePerCellAdtQcFilters}.\n * @hideconstructor\n */\nexport class PerCellAdtQcFiltersResults {\n    #results;\n    #id;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array indicating whether each cell was filtered out due to low numbers of detected ADT features.\n     */\n    discardDetected({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.discard_detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array indicating whether each cell was filtered out due to high total counts for subset `i`.\n     */\n    discardSubsetTotals(i, { copy = true } = {}) {\n        return utils.possibleCopy(this.#results.discard_subset_totals(i), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Uint8Array|Uint8WasmArray} Array indicating whether each cell was filtered out for any reason.\n     */\n   discardOverall({ copy = true } = {}) {\n       return utils.possibleCopy(this.#results.discard_overall(), copy);\n   }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the number of detected features for each batch.\n     */\n    thresholdsDetected({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.thresholds_detected(), copy);\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the filtering threshold on the total counts for subset `i` in each batch.\n     */\n    thresholdsSubsetTotals(i, { copy = true } = {}) {\n        return utils.possibleCopy(this.#results.thresholds_subset_totals(i), copy);\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics from the ADT count matrix.\n *\n * @param {PerCellQCMetrics} metrics - Per-cell QC metrics, usually computed by {@linkcode computePerCellAdtQcMetrics}.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {number} [options.minDetectedDrop=0.1] - Minimum relative drop in the number of detected features before a cell is to be considered a low-quality cell.\n * By default, cells must exhibit at least a 10% decrease from the median before filtering is applied.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {PerCellAdtQcFiltersResults} Object containing the filtering results.\n */\nexport function computePerCellAdtQcFilters(metrics, { numberOfMADs = 3, minDetectedDrop = 0.1, block = null } = {}) {\n    return internal.computePerCellQcFilters(\n        metrics, \n        block,\n        x => x.detected().length,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.per_cell_adt_qc_filters(x.results, use_blocks, bptr, numberOfMADs, minDetectedDrop),\n            PerCellAdtQcFiltersResults\n        )\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport { PerCellQCFiltersResults } from \"./computePerCellQCFilters.js\";\n\n/**\n * Filter out low-quality cells.\n *\n * @param {ScranMatrix} x The count matrix.\n * @param {(PerCellQCFiltersResults|Uint8WasmArray|Array|TypedArray)} filters \n * If a {@linkplain PerCellQCFiltersResults} object is supplied, the overall filter (in `filters.discard_overall()`) is used.\n *\n * Otherwise, an array of length equal to the number of columns in `x` should be supplied,\n * where truthy elements specify the cells to be discarded.\n *\n * @return {ScranMatrix} A matrix of the same type as `x`, filtered by column to remove all cells specified in `filters`. \n */\nexport function filterCells(x, filters) {\n    var filter_data;\n    var output;\n\n    try {\n        var ptr;\n        if (filters instanceof PerCellQCFiltersResults) {\n            var tmp = filters.discardOverall({ copy: false });\n            ptr = tmp.byteOffset;\n        } else {\n            filter_data = utils.wasmifyArray(filters, \"Uint8WasmArray\");\n            if (filter_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'filters' must be equal to number of columns in 'x'\");\n            }\n            ptr = filter_data.offset;\n        }\n\n        output = gc.call(\n            module => module.filter_cells(x.matrix, ptr, false),\n            x.constructor\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(filter_data);\n    }\n\n    return output;\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute group-based size factors, where composition biases are removed between groups and library size normalization is performed within groups.\n * This allows us to generate per-cell size factors in spite of the sparsity.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.center=true] - Whether to return centered size factors.\n * If `false`, the size factors can be interpreted as the scaling to match `reference`.\n * @param {?Float64WasmArray} [options.buffer=null] - Output buffer for the size factors.\n * This should have length equal to the number of columns in `x`.\n * @param {number} [options.priorCount=10] - Prior count to use for shrinking size factors towards the relative library size.\n * Larger values result in stronger shrinkage when the coverage is low.\n * @param {?number} [options.reference=null] - Group to use as a reference.\n * This should be an entry in `groups`. \n * If `null`, it is automatically determined.\n *\n * @return {Float64WasmArray} Array of length equal to the number of columns in `x`, containing the size factors for all cells.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function groupedSizeFactors(x, groups, { center = true, buffer = null, priorCount = 10, reference = null } = {}) {\n    var local_buffer;\n    var group_arr;\n\n    try {\n        if (!(buffer instanceof wa.Float64WasmArray)) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' must be equal to the number of columns in 'x'\");\n        }\n\n        group_arr = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (reference == null) {\n            reference = -1;\n        }\n\n        wasm.call(module => module.grouped_size_factors(x.matrix, group_arr.offset, center, priorCount, reference, buffer.offset));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(group_arr);\n    }\n    \n    return buffer;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/** \n * Wrapper for the PCA results on the Wasm heap, typically created by {@linkcode runPCA}.\n * @hideconstructor\n */\nexport class RunPCAResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * \n     * @return {Float64Array|Float64Wasmarray} Array containing the principal components for all cells.\n     * This should be treated as a column-major array where the rows are the PCs and columns are the cells.\n     */\n    principalComponents({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.pcs(), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * \n     * @return {Float64Array|Float64WasmArray} Array containing the variance explained for each requested PC.\n     */\n    varianceExplained({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.variance_explained(), copy);\n    }\n\n    /**\n     * @return {number} The total variance in the dataset,\n     * typically used with {@linkcode PCAResults#varianceExplained varianceExplained} to compute the proportion of variance explained.\n     */\n    totalVariance () {\n        return this.#results.total_variance();\n    }\n\n    /**\n     * @return {number} Number of PCs available in these results.\n     */\n    numberOfPCs() {\n        return this.#results.num_pcs();\n    }\n\n    /**\n     * @return {number} Number of cells used to compute these results.\n     */\n    numberOfCells() {\n        // TODO: switch to this.#results.num_cells();\n        return this.principalComponents({ copy: false }).length / this.numberOfPCs();\n\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Run a principal components analysis on the log-expression matrix.\n * This is usually done on a subset of features, and possibly with some kind of blocking on a per-cell batch factor.\n *\n * @param {ScranMatrix} x - The log-normalized expression matrix.\n * @param {object} [options] - Optional parameters. \n * @param {?(Uint8WasmArray|Array|TypedArray)} [options.features=null] - Array specifying which features should be retained (e.g., HVGs).\n * This should be of length equal to the number of rows in `x`; elements should be `true` to retain each row.\n * If `null`, all features are retained.\n * @param {number} [options.numberOfPCs=25] - Number of top principal components to compute.\n * @param {boolean} [options.scale=false] - Whether to scale each feature to unit variance.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {string} [options.blockMethod=\"regress\"] - How to modify the PCA for the blocking factor.\n * The default `\"regress\"` will regress out the factor, effectively performing a PCA on the residuals.\n * Alternatively, `\"weight\"` will weight the contribution of each blocking level equally so that larger blocks do not dominate the PCA.\n *\n * This option is only used if `block` is not `null`.\n *\n * @return {RunPCAResults} Object containing the computed PCs.\n */\nexport function runPCA(x, { features = null, numberOfPCs = 25, scale = false, block = null, blockMethod = \"regress\" } = {}) {\n    var feat_data;\n    var block_data;\n    var output;\n\n    utils.matchOptions(\"blockMethod\", blockMethod, [\"none\", \"regress\", \"weight\", \"block\"]);\n\n    try {\n        var use_feat = false;\n        var fptr = 0;\n\n        if (features !== null) {\n            feat_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n            if (feat_data.length != x.numberOfRows()) {\n                throw new Error(\"length of 'features' should be equal to number of rows in 'x'\");\n            }\n            use_feat = true;\n            fptr = feat_data.offset;\n        }\n\n        // Avoid asking for more PCs than is possible.\n        // Remember that centering removes one df, so we subtract 1 from the dimensions.\n        numberOfPCs = Math.min(numberOfPCs, x.numberOfRows() - 1, x.numberOfColumns() - 1);\n\n        if (block === null || blockMethod == 'none') {\n            output = gc.call(\n                module => module.run_pca(x.matrix, numberOfPCs, use_feat, fptr, scale),\n                RunPCAResults\n            );\n\n        } else {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'block' should be equal to the number of columns in 'x'\");\n            }\n            if (blockMethod == \"regress\" || blockMethod == \"block\") { // latter for back-compatibility.\n                output = gc.call(\n                    module => module.run_blocked_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset),\n                    RunPCAResults\n                );\n            } else if (blockMethod == \"weight\") {\n                output = gc.call(\n                    module => module.run_multibatch_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset),\n                    RunPCAResults\n                );\n            } else {\n                throw new Error(\"unknown value '\" + blockMethod + \"' for 'blockMethod='\");\n            }\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(feat_data);\n        utils.free(block_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/**\n * Wrapper around the k-means clustering results on the Wasm heap, produced by {@linkcode clusterKmeans}.\n * @hideconstructor\n */\nexport class ClusterKmeansResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#results = raw;\n        this.#id = id;\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the results.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    /**\n     * @return {number} Number of clusters in the results.\n     */\n    numberOfClusters() {\n        return this.#results.num_clusters();\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Array containing the cluster assignment for each cell.\n     */\n    clusters({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.clusters(), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Array containing the number of cells in each cluster.\n     */\n    clusterSizes({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.cluster_sizes(), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the within-cluster sum of squares in each cluster.\n     */\n    withinClusterSumSquares({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.wcss(), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array containing the cluster centers in column-major format,\n     * where rows are dimensions and columns are the clusters.\n     */\n    clusterCenters({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.centers(), copy);\n    }\n\n    /**\n     * @return {number} Number of refinement iterations performed by the algorithm.\n     */\n    iterations() {\n        return this.#results.iterations();\n    }\n\n    /**\n     * @return {number} Status of the algorithm - anything other than zero usually indicates a problem with convergence.\n     */\n    status() {\n        return this.#results.status();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using k-means.\n *\n* @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {number} clusters Number of clusters to create.\n * This should not be greater than the number of cells.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {string} [options.initMethod=\"pca-part\"] - Initialization method.\n * Setting `\"random\"` will randomly select `clusters` cells as centers.\n * Setting `\"kmeans++\"` will use the weighted sampling approach of Arthur and Vassilvitskii (2007).\n * Setting `\"pca-part\"` will use PCA partitioning.\n * @param {number} [options.initSeed=5768] - Seed to use for random number generation during initialization.\n * @param {number} [options.initPCASizeAdjust=1] - Adjustment factor for the cluster sizes, used when `initMethod = \"pca-part\"`.\n * Larger values (up to 1) will prioritize partitioning of clusters with more cells.\n *\n * @return {ClusterKmeansResults} Object containing the clustering results.\n */\nexport function clusterKmeans(x, clusters, { numberOfDims = null, numberOfCells = null, initMethod = \"pca-part\", initSeed = 5768, initPCASizeAdjust = 1 } = {}) {\n    var buffer;\n    var output;\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.cluster_kmeans(pptr, numberOfDims, numberOfCells, clusters, initMethod, initSeed, initPCASizeAdjust),\n            ClusterKmeansResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Compute log-transformed normalized expression values.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {object} [options] - Optional parameters.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.sizeFactors=null] - Array of positive numbers containing the size factor for each cell in `x`.\n * This should have length equal to the number of columns in `x`.\n * If `null`, size factors are computed from the column sums of `x`.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to adjust the scaling of cells in different blocks, to avoid excessive up-scaling of low-coverage blocks.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {boolean} [options.allowZeros=false] - Whether size factors of zero should be allowed.\n * If `true`, no scaling normalization is performed for the corresponding cells, under the assumption they are all-zero libraries.\n * If `false`, an error is raised instead.\n *\n * @return {ScranMatrix} A matrix of the same type as `x` containing log-transformed normalized expression values.\n */\nexport function logNormCounts(x, { sizeFactors = null, block = null, allowZeros = false } = {}) {\n    var sf_data;\n    var block_data;\n    var output;\n\n    try {\n        var sfptr = 0;\n        var use_sf = false;\n\n        if (sizeFactors !== null) {\n            sf_data = utils.wasmifyArray(sizeFactors, \"Float64WasmArray\");\n            if (sf_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'sizeFactors' must be equal to number of columns in 'x'\");\n            }\n            sfptr = sf_data.offset;\n            use_sf = true;\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.log_norm_counts(x.matrix, use_sf, sfptr, use_blocks, bptr, allowZeros),\n            x.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(sf_data);\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/** \n * Wrapper for the neighbor search index on the Wasm heap, typically produced by {@linkcode buildNeighborSearchIndex}.\n * @hideconstructor\n */\nexport class BuildNeighborSearchIndexResults {\n    #id;\n    #index; \n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#index = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the index.\n     */\n    numberOfCells() {\n        return this.#index.num_obs();\n    }\n\n    /**\n     * @return {number} Number of dimensions in the index.\n     */\n    numberOfDims() {\n        return this.#index.num_dim();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#index !== null) {\n            gc.release(this.#id);\n            this.#index = null;\n        }\n        return;\n    }\n\n    // Internal only, not documented.\n    get index() {\n        return this.#index;\n    }\n}\n\n/**\n * Build the nearest neighbor search index.\n *\n * @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {boolean} [options.approximate=true] - Whether to build an index for an approximate neighbor search.\n *\n * @return {BuildNeighborSearchIndexResults} Index object to use for neighbor searches.\n */\nexport function buildNeighborSearchIndex(x, { numberOfDims = null, numberOfCells = null, approximate = true } = {}) {\n    var buffer;\n    var output;\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.build_neighbor_index(pptr, numberOfDims, numberOfCells, approximate),\n            BuildNeighborSearchIndexResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/** \n * Wrapper for the neighbor search results on the Wasm heap, typically produced by {@linkcode findNearestNeighbors}.\n * @hideconstructor\n */\nexport class FindNearestNeighborsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The total number of neighbors across all cells.\n     * This is usually the product of the number of neighbors and the number of cells.\n     */\n    size() {\n        return this.#results.size();\n    }\n\n    /**\n     * @return {number} The number of cells used in the search.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {?Int32WasmArray} [options.runs=null] - A Wasm-allocated array of length equal to `numberOfCells()`,\n     * to be used to store the number of neighbors per cell.\n     * @param {?Int32WasmArray} [options.indices=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the indices of the neighbors of each cell.\n     * @param {?Float64WasmArray} [options.distances=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the distances to the neighbors of each cell.\n     *\n     * @return {object} \n     * An object is returned with the `runs`, `indices` and `distances` keys, each with an appropriate TypedArray as the value.\n     *\n     * If all of the arguments are non-`null`, the TypedArrays in the returned object are views on the corresponding input WasmArrays.\n     * Note that these views may be invalidated on the next allocation on the Wasm heap.\n     *\n     * If only some of the arguments are non-`null`, an error is raised.\n     */\n    serialize({ runs = null, indices = null, distances = null } = {}) {\n        var copy = (runs === null) + (indices === null) + (distances === null);\n        if (copy != 3 && copy != 0) {\n            throw new Error(\"either all or none of 'runs', 'indices' and 'distances' can be 'null'\");\n        }\n\n        var output;\n\n        if (copy === 3) {\n            var run_data;\n            var ind_data;\n            var dist_data;\n            \n            try {\n                run_data = utils.createInt32WasmArray(this.numberOfCells());\n                let s = this.size();\n                ind_data = utils.createInt32WasmArray(s);\n                dist_data = utils.createFloat64WasmArray(s);\n                this.#results.serialize(run_data.offset, ind_data.offset, dist_data.offset);\n\n                output = { \n                    \"runs\": run_data.slice(), \n                    \"indices\": ind_data.slice(), \n                    \"distances\": dist_data.slice() \n                };\n            } finally {\n                utils.free(run_data);\n                utils.free(ind_data);\n                utils.free(dist_data);\n            }\n\n        } else {\n            this.#results.serialize(runs.offset, indices.offset, distances.offset);\n            output = {\n                \"runs\": runs.array(),\n                \"indices\": indices.array(),\n                \"distances\": distances.array()\n            };\n        }\n\n        return output;\n    }\n\n    /**\n     * @param {Int32WasmArray|Array|TypedArray} runs An array of length equal to `numberOfCells()`,\n     * containing the number of neighbors per cell.\n     * @param {Int32WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the indices of the neighbors of each cell.\n     * @param {Float64WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the distances to the neighbors of each cell.\n     *\n     * @return {FindNearestNeighborsResults} Object containing the unserialized search results.\n     */\n    static unserialize(runs, indices, distances) {\n        var output;\n        var run_data;\n        var ind_data;\n        var dist_data;\n\n        try {\n            run_data = utils.wasmifyArray(runs, \"Int32WasmArray\");\n            ind_data = utils.wasmifyArray(indices, \"Int32WasmArray\");\n            dist_data = utils.wasmifyArray(distances, \"Float64WasmArray\");\n            output = gc.call(\n                module => new module.NeighborResults(runs.length, run_data.offset, ind_data.offset, dist_data.offset),\n                FindNearestNeighborsResults\n            );\n\n        } catch (e) {\n            utils.free(output);\n            throw e;\n\n        } finally { \n            utils.free(run_data);\n            utils.free(ind_data);\n            utils.free(dist_data);\n        }\n\n        return output;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Find the nearest neighbors for each cell.\n *\n * @param {NeighborSearchIndex} x The neighbor search index built by {@linkcode buildNeighborSearchIndex}.\n * @param {number} k Number of neighbors to find.\n *\n * @return {FindNearestNeighborsResults} Object containing the search results.\n */\nexport function findNearestNeighbors(x, k) {\n    return gc.call(\n        module => module.find_nearest_neighbors(x.index, k),\n        FindNearestNeighborsResults\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { FindNearestNeighborsResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the SNN graph object on the Wasm heap, produced by {@linkcode buildSNNGraph}.\n * @hideconstructor\n */\nexport class BuildSNNGraphResults {\n    #id;\n    #graph;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#graph = raw;\n        return;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#graph !== null) {\n            gc.release(this.#id);\n            this.#graph = null;\n        }\n        return;\n    }\n\n    // Not documented, internal use only.\n    get graph() {\n        return this.#graph;\n    }\n}\n\n/**\n * Build a shared nearest graph.\n *\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.scheme=\"rank\"] - Weighting scheme for the edges between cells.\n * This can be based on the top ranks of the shared neighbors (`\"rank\"`),\n * the number of shared neighbors (`\"number\"`) \n * or the Jaccard index of the neighbor sets between cells (`\"jaccard\"`).\n * @param {number} [options.neighbors=10] - Number of nearest neighbors to use to construct the graph.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n *\n * @return {BuildSNNGraphResults} Object containing the graph.\n */\nexport function buildSNNGraph(x, { scheme = \"rank\", neighbors = 10 } = {}) {\n    var output;\n    var my_neighbors;\n\n    // Back compatibility.\n    if (typeof scheme == \"number\") {\n        scheme = [ \"rank\", \"number\", \"jaccard\" ][scheme];\n    }\n\n    try {\n        let ref;\n        if (x instanceof FindNearestNeighborsResults) {\n            ref = x;\n        } else {\n            my_neighbors = findNearestNeighbors(x, neighbors); \n            ref = my_neighbors ; // separate assignment is necessary for only 'my_neighbors' but not 'x' to be freed.\n        }\n\n        output = gc.call(\n            module => module.build_snn_graph(ref.results, scheme),\n            BuildSNNGraphResults\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around the SNN multi-level clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphMultiLevelResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The clustering level with the highest modularity.\n     */\n    best() {\n        return this.#results.best();\n    }\n\n    /**\n     * @return {number} Number of levels in the results.\n     */\n    numberOfLevels() {\n        return this.#results.number();\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the modularity.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     *\n     * @return {number} The modularity at the specified level.\n     */\n    modularity({ level = null } = {}) {\n        if (level === null) {\n            level = this.best();\n        }\n        return this.#results.modularity(level);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the cluster membership.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Array containing the cluster membership for each cell.\n     */\n    membership({ level = null, copy = true } = {}) {\n        if (level === null) {\n            level = this.best();\n        }\n        return utils.possibleCopy(this.#results.membership(level), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN walktrap clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphWalktrapResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The maximum modularity across all merge steps.\n     */\n    modularity() {\n        return this.#results.modularity();\n    }\n\n    /**\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Array containing the cluster membership for each cell.\n     */\n    membership({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.membership(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN Leiden clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphLeidenResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The quality of the Leiden clustering.\n     *\n     * Note that Leiden's quality score is technically a different measure from modularity.\n     * Nonetheless, we use `modularity` for consistency with the other SNN clustering result classes.\n     */\n    modularity() {\n        return this.#results.modularity();\n    }\n\n    /**\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Array containing the cluster membership for each cell.\n     */\n    membership({ copy = true } = {}) {\n        return utils.possibleCopy(this.#results.membership(), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using community detection on the SNN graph.\n *\n * @param {BuildSNNGraphResults} x - The shared nearest neighbor graph constructed by {@linkcode buildSNNGraph}.\n * @param {object} [options] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.resolution=1] - The resolution of the multi-level or Leiden clustering.\n * Larger values result in more fine-grained clusters.\n * @param {number} [options.walktrapSteps=4] - Number of steps for the Walktrap algorithm.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} Object containing the clustering results.\n * The class of this object depends on the choice of `method`.\n */\nexport function clusterSNNGraph(x, { method = \"multilevel\", resolution = 1, walktrapSteps = 4 } = {}) {\n    var output;\n\n    try {\n        if (method == \"multilevel\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_multilevel(x.graph, resolution),\n                ClusterSNNGraphMultiLevelResults\n            );\n        } else if (method == \"walktrap\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_walktrap(x.graph, walktrapSteps),\n                ClusterSNNGraphWalktrapResults\n            );\n        } else if (method == \"leiden\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_leiden(x.graph, resolution),\n                ClusterSNNGraphLeidenResults\n            );\n        } else {\n            throw new Error(\"unknown method '\" + method + \"'\")\n        }\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildNeighborSearchIndexResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the t-SNE status object on the Wasm heap, typically created by {@linkcode initializeTSNE}.\n * @hideconstructor\n */\nexport class InitializeTSNEResults {\n    #id;\n    #status;\n    #coordinates;\n\n    constructor(id, raw_status, raw_coordinates) {\n        this.#id = id;\n        this.#status = raw_status;\n        this.#coordinates = raw_coordinates;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get status() {\n        return this.#status;\n    }\n\n    // Internal use only, not documented.\n    get coordinates() {\n        return this.#coordinates;\n    }\n\n    /**\n     * @return {InitializeTSNEResults} A deep copy of this object.\n     */\n    clone() {\n        return gc.call(\n            module => this.#status.deepcopy(), \n            InitializeTSNEResults, \n            this.#coordinates.clone()\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.#status.num_obs();\n    }\n\n    /**\n     * @return {number} Number of iterations processed so far.\n     * This will change with repeated invocations of {@linkcode runTSNE} on this object.\n     */\n    iterations () {\n        return this.#status.iterations();\n    }\n\n    /**\n     * @return {object} Object with `x` and `y` keys.\n     * The corresponding values are Float64Array objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.#coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free() {\n        if (this.#status !== null) {\n            gc.release(this.#id);\n            this.#status = null;\n        }\n        if (this.#coordinates !== null) {\n            this.#coordinates.free();\n            this.#coordinates = null;\n        }\n        return;\n    }\n}\n\n/**\n * @param {number} perplexity - Perplexity to use in the t-SNE algorithm.\n * @return {number} Appropriate number of neighbors to use in the nearest neighbor search.\n */\nexport function perplexityToNeighbors(perplexity) {\n    return wasm.call(module => module.perplexity_to_k(perplexity));\n}\n\n/**\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.perplexity=30] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {boolean} [options.checkMismatch=true] - Whether to check for a mismatch between the perplexity and the number of searched neighbors.\n * Only relevant if `x` is a {@linkplain FindNearestNeighborsResults} object.\n *\n * @return {InitializeTSNEResults} Object containing the initial status of the t-SNE algorithm.\n */\nexport function initializeTSNE(x, { perplexity = 30, checkMismatch = true } = {}) {\n    var my_neighbors;\n    var raw_coords;\n    var output;\n\n    try {\n        let neighbors;\n\n        if (x instanceof BuildNeighborSearchIndexResults) {\n            let k = perplexityToNeighbors(perplexity);\n            my_neighbors = findNearestNeighbors(x, k);\n            neighbors = my_neighbors;\n\n        } else {\n            if (checkMismatch) {\n                let k = perplexityToNeighbors(perplexity);\n                if (k * x.numberOfCells() != x.size()) {\n                    throw new Error(\"number of neighbors in 'x' does not match '3 * perplexity'\");\n                }\n            }\n            neighbors = x;\n        }\n\n        raw_coords = utils.createFloat64WasmArray(2 * neighbors.numberOfCells());\n        wasm.call(module => module.randomize_tsne_start(neighbors.numberOfCells(), raw_coords.offset, 42));\n        output = gc.call(\n            module => module.initialize_tsne(neighbors.results, perplexity),\n            InitializeTSNEResults,\n            raw_coords\n        );\n\n    } catch(e) {\n        utils.free(output);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Run the t-SNE algorithm on an initialized {@linkplain InitializeTSNEResults}.\n *\n * @param {InitializeTSNEResults} x A previously initialized status object from {@linkcode initializeTSNE}.\n * This may be passed through {@linkcode runTSNE} any number of times.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.maxIterations=1000] - Maximum number of iterations to perform.\n * This number includes all existing iterations that were already performed in `x` from previous calls to {@linkcode runTSNE}.\n * @param {?number} [options.runTime=null] - Number of milliseconds for which the algorithm is allowed to run before returning.\n * If `null`, no limit is imposed on the runtime.\n *\n * @return The algorithm status in `x` is advanced up to the requested number of iterations,\n * or until the requested run time is exceeded, whichever comes first.\n */\nexport function runTSNE(x, { maxIterations = 1000, runTime = null } = {}) {\n    if (runTime === null) {\n        runTime = -1;\n    }\n    wasm.call(module => module.run_tsne(x.status, runTime, maxIterations, x.coordinates.offset));\n    return;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper around the marker scoring results on the Wasm heap, typically produced by {@linkcode scoreMarkers}.\n * @hideconstructor\n */\nexport class ScoreMarkersResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of blocks used to compute the results.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {number} Number of groups in the results.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.block=-1] - Number of the block for which to extract statistics.\n     * If negative, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the mean expression for the requested group in the requested block.\n     */\n    means(group, { block = -1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.means(group, block), copy);\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.block=-1] - Number of the block for which to extract statistics.\n     * If negative, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the proportion of cells with detectable expression for the requested group in the requested block.\n     */\n    detected(group, { block = -1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.detected(group, block), copy);\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.summary=1] - Summary statistic to be computed from the Cohen's d values of all pairwise comparisons involving `group`.\n     * This can be the minimum across comparisons (0), mean (1) or min-rank (4).\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized Cohen's d for the comparisons between `group` and all other groups.\n     */\n    cohen(group, { summary = 1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.cohen(group, summary), copy);\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.summary=1] - Summary statistic to be computed from the AUCs of all pairwise comparisons involving `group`.\n     * This can be the minimum across comparisons (0), mean (1) or min-rank (4).\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized AUC for the comparisons between `group` and all other groups.\n     */\n    auc(group, { summary = 1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.auc(group, summary), copy);\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.summary=1] - Summary statistic to be computed from the log-fold changes of all pairwise comparisons involving `group`.\n     * This can be the minimum across comparisons (0), mean (1) or min-rank (4).\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized log-fold change for the comparisons between `group` and all other groups.\n     */\n    lfc(group, { summary = 1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.lfc(group, summary), copy);\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.summary] - Summary statistic to be computed from the delta-detected values of all pairwise comparisons involving `group`.\n     * This can be the minimum across comparisons (0), mean (1) or min-rank (4).\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized delta-detected for the comparisons between `group` and all other groups.\n     */\n    deltaDetected(group, { summary = 1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.delta_detected(group, summary), copy);\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Score genes as potential markers for each group of cells.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform comparisons within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {ScoreMarkersResults} Object containing the marker scoring results.\n */\nexport function scoreMarkers(x, groups, { block = null } = {}) {\n    var output;\n    var block_data;\n    var group_data;\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.score_markers(x.matrix, group_data.offset, use_blocks, bptr),\n            ScoreMarkersResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(group_data);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Wrapper around a labelled reference dataset on the Wasm heap, typically produced by {@linkcode loadLabelledReferenceFromBuffers}.\n * @hideconstructor\n */\nclass LoadLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of samples in this dataset.\n     */\n    numberOfSamples() {\n        return this.#reference.num_samples();\n    }\n\n    /**\n     * @return {number} Number of features in this dataset.\n     */\n    numberOfFeatures() {\n        return this.#reference.num_features();\n    }\n\n    /**\n     * @return {number} Number of labels in this dataset.\n     */\n    numberOfLabels() {\n        return this.#reference.num_labels();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\n/**\n * Load a reference dataset for annotation.\n * \n * @param {Uint8Array} ranks - Buffer containing the Gzipped CSV file containing a matrix of ranks.\n * Each line corresponds to a sample and contains a comma-separated vector of ranks across all features.\n * All lines should contain the same number of entries.\n * This is effectively a row-major matrix where rows are samples and columns are features.\n * (Advanced users may note that this is transposed in C++.) \n * @param {Uint8Array} markers - Buffer containing the Gzipped GMT file containing the markers for each pairwise comparison between labels.\n * For `markers`, the GMT format is a tab-separated file with possibly variable numbers of fields for each line.\n * Each line corresponds to a pairwise comparison between labels, defined by the first two fields.\n * The remaining fields should contain indices of marker features (referring to columns of `matrix`) that are upregulated in the first label when compared to the second.\n * Markers should be sorted in order of decreasing strength.\n * @param {Uint8Array} labels - Buffer containing the Gzipped text file containing the label for each sample.\n * Each line should contain an integer representing a particular label, from `[0, N)` where `N` is the number of unique labels.\n * The number of lines should be equal to the number of rows in `matrix`.\n * The actual names of the labels are usually held elsewhere.\n * \n * @return {LoadLabelledReferenceResults} Object containing the reference dataset.\n */\nexport function loadLabelledReferenceFromBuffers(ranks, markers, labels) {\n    var output;\n    var matbuf;\n    var markbuf;\n    var labbuf;\n\n    try {\n        matbuf = utils.wasmifyArray(ranks, \"Uint8WasmArray\");\n        markbuf = utils.wasmifyArray(markers, \"Uint8WasmArray\");\n        labbuf = utils.wasmifyArray(labels, \"Uint8WasmArray\");\n        output = gc.call(\n            module => module.load_singlepp_reference(labbuf.offset, labbuf.length, markbuf.offset, markbuf.length, matbuf.offset, matbuf.length),\n            LoadLabelledReferenceResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(markbuf);\n        utils.free(labbuf);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around a built labelled reference dataset on the Wasm heap, typically produced by {@linkcode buildLabelledReference}.\n * @hideconstructor\n */\nclass BuildLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // internal use only.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of shared features between the test and reference datasets.\n     */\n    sharedFeatures() {\n        return this.#reference.shared_features();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\nfunction create_feature_availability(features, mat_id_buffer) {\n    let mat_id_array = mat_id_buffer.array();\n    let available = {};\n    let counter = 0;\n    features.forEach(y => {\n        available[y] = counter;\n        mat_id_array[counter] = counter;\n        counter++;\n    });\n    return available;\n}\n\nfunction convert_reference_features(referenceFeatures, available, ref_id_buffer) {  \n    let ref_id_array = ref_id_buffer.array();\n    let counter = Object.keys(available).length;\n    referenceFeatures.forEach((y, i) => {\n        if (y in available) {\n            ref_id_array[i] = available[y];\n        } else {\n            ref_id_array[i] = counter;\n            counter++;\n        }\n    });\n    return;\n}\n\n/**\n * Build the reference dataset for annotation.\n * The build process involves harmonizing the identities of the features available in the test dataset compared to the reference.\n * Specifically, a feature must be present in both datasets in order to be retained. \n * Of those features in the intersection, only the `top` markers from each pairwise comparison are ultimately used for classification.\n *\n * Needless to say, `features` should match up to the rows of the matrix that is actually used for annotation in {@linkcode labelCells}.\n * If the test dataset is a {@linkplain ScranMatrix}, `features` should already be reorganized to match its row identities (see {@linkcode matchVectorToRowIdentities}).\n * Otherwise the row indices will not be correct in subsequent calls to {@linkcode labelCells} with a {@linkplain ScranMatrix} input. \n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * @param {LoadLabelledReferenceResults} loaded - A reference dataset, typically loaded with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - An array of feature identifiers (usually strings) of length equal to the number of features in `reference`.\n * This is expected to exhibit some overlap with those in `features`.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.top=20] - Number of top marker features to use.\n * These features are taken from each pairwise comparison between labels.\n *\n * @return {BuildLabelledReferenceResults} Object containing the built reference dataset.\n */\nexport function buildLabelledReference(features, loaded, referenceFeatures, { top = 20 } = {}) {\n    var mat_id_buffer;\n    var ref_id_buffer;\n    var output;\n\n    try {\n        var nfeat = features.length;\n        mat_id_buffer = utils.createInt32WasmArray(nfeat);\n        ref_id_buffer = utils.createInt32WasmArray(loaded.numberOfFeatures());\n        if (referenceFeatures.length != ref_id_buffer.length) {\n            throw new Error(\"length of 'referenceFeatures' should be equal to the number of features in 'reference'\");\n        }\n\n        let available = create_feature_availability(features, mat_id_buffer);\n        convert_reference_features(referenceFeatures, available, ref_id_buffer);\n\n        output = gc.call(\n            module => module.build_singlepp_reference(nfeat, mat_id_buffer.offset, loaded.reference, ref_id_buffer.offset, top),\n            BuildLabelledReferenceResults\n        );\n\n        output.expectedNumberOfFeatures = nfeat;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(mat_id_buffer);\n        utils.free(ref_id_buffer);\n    }\n\n    return output;\n}\n\nfunction label_cells(x, expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, msg) {\n    var output = null;\n    var matbuf;\n    var tempmat;\n    var tempbuf;\n    let use_buffer = (buffer instanceof wa.Int32WasmArray);\n\n    try {\n        let target;\n        if (x instanceof ScranMatrix) {\n            target = x.matrix;\n        } else if (x instanceof wa.Float64WasmArray) {\n            if (x.length !== numberOfFeatures * numberOfCells) {\n                throw new Error(\"length of 'x' must be equal to the product of 'numberOfFeatures' and 'numberOfCells'\");\n            }\n\n            // This will either create a cheap view, or it'll clone\n            // 'x' into the appropriate memory space.\n            matbuf = utils.wasmifyArray(x, null);\n            tempmat = gc.call(\n                module => module.initialize_dense_matrix(numberOfFeatures, numberOfCells, matbuf.offset, \"Float64Array\"),\n                ScranMatrix\n            );\n            target = tempmat.matrix;\n\n        } else {\n            throw new Error(\"unknown type for 'x'\");\n        }\n\n        if (target.nrow() != expectedNumberOfFeatures) {\n            throw new Error(\"number of rows in 'x' should be equal to length of 'features' used to build '\" + msg + \"'\");\n        }\n\n        let ptr;\n        if (!use_buffer) {\n            tempbuf = utils.createInt32WasmArray(target.ncol());\n            ptr = tempbuf.offset;\n        } else {\n            ptr = buffer.offset;\n        }\n\n        FUN(target, ptr);\n        if (!use_buffer) {\n            output = tempbuf.slice();\n        }\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(tempmat);\n        utils.free(tempbuf);\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {BuildLabelledReferenceResults} reference - A built reference dataset, typically generated by {@linkcode buildLabelledReference}.\n * @param {object} [options] - Optional parameters.\n * @param {Int32WasmArray} [options.buffer=null] - An existing buffer to store the output labels, of length equal to the number of columns in `x`.\n * @param {number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n *\n * @return {Int32Array} Array containing the labels for each cell in `x`.\n *\n * If `buffer` was supplied, the returned array is a view into it.\n * Note that this may be invalidated on the next allocation on the Wasm heap.\n */\nexport function labelCells(x, reference, { buffer = null, numberOfFeatures = null, numberOfCells = null, quantile = 0.8 } = {}) {\n    let FUN = (target, ptr) => {\n        wasm.call(module => module.run_singlepp(target, reference.reference, quantile, ptr));\n    };\n\n    let output = label_cells(x, reference.expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, \"reference\");\n\n    // This is done as the final step to avoid invalidation upon any touching\n    // of the Wasm heap, anywhere... even upon freeing.\n    if (output === null) {\n        output = buffer.array();\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around integrated reference datasets on the Wasm heap, typically produced by {@linkcode integrateLabelledReferences}.\n * @hideconstructor\n */\nclass IntegrateLabelledReferencesResults {\n    #id;\n    #integrated;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#integrated = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get integrated() {\n        return this.#integrated;\n    }\n\n    /**\n     * @return {number} Number of reference datasets.\n     */\n    numberOfReferences() {\n        return this.#integrated.num_references();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#integrated !== null) {\n            gc.release(this.#id);\n            this.#integrated = null;\n        }\n    }\n}\n\n/**\n * Integrate multiple reference datasets.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * @param {Array} loaded - Array of {@linkplain LabelledReference} objects, typically created with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - Array of length equal to `loaded`, \n * containing arrays of feature identifiers (usually strings) of length equal to the number of features the corresponding entry of `loaded`.\n * This is expected to exhibit some overlap with those in `features`.\n * @param {Array} reference - Array of {@linkplain BuildLabelledReferenceResults} objects, typically generated by {@linkcode buildLabelledReference}.\n * This should have length equal to that of `loaded`.\n *\n * @return {IntegrateLabelledReferencesResults} Object containing the integrated references.\n */\nexport function integrateLabelledReferences(features, loaded, referenceFeatures, built) {\n    let id_arr;\n    let loaded_arr2;\n    let ref_arr2;\n    let built_arr2;\n    let output;\n\n    // Checking the inputs.\n    let nrefs = loaded.length;\n    if (referenceFeatures.length != nrefs) {\n        throw new Error(\"'loaded' and 'referenceFeatures' should be of the same length\");\n    }\n    if (built.length != nrefs) {\n        throw new Error(\"'loaded' and 'built' should be of the same length\");\n    }\n    for (var i = 0; i < nrefs; i++) {\n        if (loaded[i].numberOfFeatures() != referenceFeatures[i].length) {\n            throw new Error(\"length of each 'referenceFeatures' should be equal to the number of features in the corresponding 'loaded'\");\n        }\n    }\n\n    let ref_arr = new Array(nrefs);\n\n    try {\n        id_arr = utils.createInt32WasmArray(features.length);\n        let available = create_feature_availability(features, id_arr);\n\n        loaded_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let la2 = loaded_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            la2[i] = BigInt(loaded[i].reference.$$.ptr);\n        }\n\n        ref_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ra2 = ref_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            let current = referenceFeatures[i];\n            if (current instanceof wa.Int32WasmArray) {\n                ra2[i] = BigInt(current.offset);\n            } else {\n                ref_arr[i] = utils.createInt32WasmArray(current.length);\n                convert_reference_features(current, available, ref_arr[i]);\n                ra2[i] = BigInt(ref_arr[i].offset);\n            }\n        }\n\n        built_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ba2 = built_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            ba2[i] = BigInt(built[i].reference.$$.ptr);\n        }\n        \n        output = gc.call(\n            module => module.integrate_singlepp_references(\n                features.length,\n                id_arr.offset,\n                nrefs,\n                loaded_arr2.offset,\n                ref_arr2.offset,\n                built_arr2.offset\n            ),\n            IntegrateLabelledReferencesResults\n        );\n\n        output.expectedNumberOfFeatures = features.length;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(id_arr);\n        utils.free(loaded_arr2);\n        utils.free(built_arr2);\n        utils.free(ref_arr2);\n        for (const x of ref_arr) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {IntegratedLabelledReferences} integrated - An integrated set of reference datasets, typically generated by {@linkcode integrateLabelledReferences}.\n * @param {Array} assigned - An array of length equal to the number of references in `integrated`.\n * This should contain the result of classification of `x` with each individual reference via {@linkcode labelCells}.\n * Each element should be an Array, TypedArray or Int32WasmArray of length equal to the number of cells in `x`.\n * @param {object} [options] - Optional parameters.\n * @param {Int32WasmArray} [options.buffer=null] - An existing buffer to store the output labels, of length equal to the number of columns in `x`.\n * @param {number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n *\n * @return {Int32Array} Array containing the best reference for each cell in `x`.\n *\n * If `buffer` was supplied, the returned array is a view into it.\n * Note that this may be invalidated on the next allocation on the Wasm heap.\n */\nexport function integrateCellLabels(x, assigned, integrated, { buffer = null, numberOfFeatures = null, numberOfCells = null, quantile = 0.8 } = {}) { \n    let nrefs = integrated.numberOfReferences();\n    if (assigned.length != nrefs) {\n        throw new Error(\"length of 'assigned' should be equal to the number of references in 'integrated'\");\n    }\n\n    let output;\n    let aptrs;\n    let assigned_arrs = new Array(nrefs);\n\n    try {\n        aptrs = utils.createBigUint64WasmArray(nrefs);\n        let aptrs_arr = aptrs.array();\n        for (var i = 0; i < assigned.length; i++) {\n            let current = assigned[i];\n\n            let fail = false;\n            if (x instanceof ScranMatrix) {\n                if (current.length != x.numberOfColumns()) {\n                    fail = true;\n                }\n            } else if (current.length != numberOfCells) {\n                fail = true;\n            }\n            if (fail) {\n                throw new Error(\"length of each element 'assigned' should be equal to number of columns in 'x'\");\n            }\n\n            assigned_arrs[i] = utils.wasmifyArray(current, \"Int32WasmArray\");\n            aptrs_arr[i] = BigInt(assigned_arrs[i].offset);\n        }\n    \n        let FUN = (target, ptr) => {\n            wasm.call(module => module.integrate_singlepp(target, aptrs_arr.offset, integrated.integrated, quantile, ptr));\n        };\n        output = label_cells(x, integrated.expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, \"integrated\");\n\n    } finally{\n        utils.free(aptrs);\n        for (const x of assigned_arrs) {\n            utils.free(x);\n        }\n    }\n\n    // This is done as the final step to avoid invalidation upon any touching\n    // of the Wasm heap, anywhere... even upon freeing.\n    if (output === null) {\n        output = buffer.array();\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\n\nexport function mimicGetter(value, copy) {\n    // Inheritance seems to be namespaced by module,\n    // so we can't use instanceof.\n    if (\"className\" in value.constructor && value.constructor.className.endsWith(\"WasmArray\")) { \n        if (copy == \"view\" || copy == \"hdf5\") {\n            return value.view();\n        } else if (copy) {\n            return value.slice();\n        } else {\n            return value.array();\n        }\n    } else {\n        if (copy === true) {\n            return value.slice();\n        } else if (copy == \"view\") {\n            // If the caller actually wanted a WasmArray, they would\n            // have generated a WasmArray during the unserialization.\n            throw new Error(\"'copy: \\\"view\\\"' not supported for mimics\");\n        } else {\n            // Includes copy = \"hdf5\", where a TypedArray or WasmArray can be used.\n            return value;\n        }\n    }\n}\n\nexport function freeCache(object) {\n    // Just an alias for simplicity.\n    scran.safeFree(object);\n    return;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function isObject(object) {\n    return typeof object === 'object' && Array.isArray(object) === false && ArrayBuffer.isView(object) === false;\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n","\n/*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) =>\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nconst copy_block = (s, buf, len, header) =>\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);\n  s.pending += len;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) =>\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) =>\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let lx = 0;         /* running index in l_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) =>\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let black_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) =>\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //let out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE = 42;\nconst EXTRA_STATE = 69;\nconst NAME_STATE = 73;\nconst COMMENT_STATE = 91;\nconst HCRC_STATE = 103;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  let max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    const max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n};\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH$2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$2; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$2; }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\nconst deflate$2 = (strm, flush) => {\n\n  let beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  s.strm = strm; /* just in case */\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n      let level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 30;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n  let base_index = 0;\n//  let shoextra;    /* extra bits table to use */\n  let end;                    /* use base and extra for symbol > end */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n  let extra_index = 0;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 1;       /* i: waiting for magic header */\nconst    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 3;       /* i: waiting for modification time (gzip) */\nconst    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 7;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 9;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 10;    /* i: waiting for dictionary check value */\nconst    DICT = 11;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 14;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 18;   /* i: waiting for code length code lengths */\nconst        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nconst            LEN = 21;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 22;    /* i: waiting for length extra bits */\nconst            DIST = 23;      /* i: waiting for distance code */\nconst            DISTEXT = 24;   /* i: waiting for distance extra bits */\nconst            MATCH = 25;     /* o: waiting for output space to copy string */\nconst            LIT = 26;       /* o: waiting for output space to write literal */\nconst    CHECK = 27;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 29;      /* finished check, done -- remain here until reset */\nconst    BAD = 30;       /* got a data error -- remain here until reset */\nconst    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\n\nexport function extractHDF5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (content.type !== \"String\") {\n        return null;\n    }\n\n    return content.load();\n}\n\nexport function summarizeValues(values, limit) {\n    if (values instanceof Array) {\n        let chosen = Array.from(new Set(values));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Infinity, max = -Infinity;\n        values.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\n/**\n * Unpack a buffer to text, possibly with decompression.\n *\n * @param {Uint8Array} buffer - Contents to be unpacked.\n * @param {object} [options] - Optional parameters.\n * @param {?string} [options.compression] - Compression mode used for `buffer`.\n * This can be `\"none\"` or `\"gz\"`, with `null` performing automatic detection based on the magic words.\n *\n * @return {string} Text encoded by `buffer`.\n */\nexport function unpackText(buffer, { compression = null } = {}) {\n    let txt = buffer;\n    \n    // Compare against magic words for auto-detection.\n    if (compression === null) {\n        if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n            compression = 'gz';\n        }\n    }\n\n    if (compression === \"gz\") {\n        txt = pako.ungzip(buffer);\n    }\n    \n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n/**\n * Read lines of text from a buffer, possibly with decompression.\n *\n * @param {Uint8Array} buffer - Content to be read.\n * @param {object} [options] - Optional parameters.\n * @param {?string} [options.compression] - See {@linkcode unpackText} for details.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string. \n * A trailing newline at the end of each file is removed.\n */\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n *\n * @param {Uint8Array} buffer - Content to be read.\n * @param {object} [options] - Optional parameters.\n * @param {?string} [options.compression] - See {@linkcode unpackText} for details.\n * @param {string} [options.delim] - Delimiter between fields.\n * @param {boolean} [options.firstOnly] - Whether to only read the first line, presumably containing the header.\n *\n * @return {Array} Array of arrays where each entry corresponds to a line in `buffer` and contains the `delim`-separated fields.\n * If `firstOnly = true`, the output array only contains one element corresponding to the contents of the first line.\n */\nexport function readTable(content, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(content, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as scran from \"scran.js\";\n\nexport function reorganizeGenes(matrix, geneInfo) {\n    if (geneInfo === null) {\n        let genes = [];\n        if (matrix.isReorganized()) {\n            let ids = matrix.identities();\n            for (const i of ids) {\n                genes.push(`Gene ${i + 1}`);\n            }\n        } else {\n            for (let i = 0; i < matrix.numberOfRows(); i++) {\n                genes.push(`Gene ${i + 1}`);\n            }\n        }\n        geneInfo = { \"id\": genes };\n    } else {\n        if (matrix.isReorganized()) {\n            scran.matchFeatureAnnotationToRowIdentities(matrix, geneInfo);\n        }\n    }\n    return geneInfo;\n}\n\nexport function splitByFeatureType(matrix, genes) { \n    if (!(\"type\" in genes)) {\n        return null;\n    }\n\n    let types0 = scran.splitByFactor(genes.type);\n    if (Object.keys(types0).length == 1) {\n        return null;\n    }\n\n    // Standardizing the names to something the rest of the pipeline\n    // will recognize. By default, we check the 10X vocabulary here.\n    let types = {};\n    for (const [k, v] of Object.entries(types0)) {\n        if (k.match(/gene expression/i)) {\n            types[\"RNA\"] = v;\n        } else if (k.match(/antibody capture/i)) {\n            types[\"ADT\"] = v;\n        }\n    }\n\n    let output = {};\n\n    // Skipping 'type', as it's done its purpose now.\n    let gene_deets = { ...genes };\n    delete gene_deets.type;\n    output.genes = scran.splitArrayCollection(gene_deets, types);\n\n    if (matrix !== null) {\n        // Allocating the split matrices. Note that this is skipped in the\n        // 'null' case to support feature splitting for the preflight requests\n        // (where the matrix is not loaded, obviously).\n        let out_mats;\n        try {\n            out_mats = new scran.MultiMatrix({ store: scran.splitRows(matrix, types) });\n            output.matrices = out_mats;\n        } catch (e) {\n            scran.safeFree(out_mats);\n            throw e;\n        }\n    }\n\n    return output;\n}\n","/**\n * 'obj' is expected to be a File object.\n */\n\nimport * as scran from \"scran.js\";\n\nexport function rawSize(obj) {\n    return obj.size;\n}\n\nexport function rawName(obj) {\n    return obj.name;\n}\n\nexport class LoadedFile {\n    #buffer;\n\n    constructor(obj) {\n        if (obj instanceof File) {\n            let reader = new FileReaderSync();\n            this.#buffer = reader.readAsArrayBuffer(obj);\n        } else if (obj instanceof ArrayBuffer) {\n            this.#buffer = obj; // assumed to already be an ArrayBuffer.\n        } else {\n            throw \"unknown type '\" + typeof(obj) + \"' for LoadedFile constructor\";\n        }\n    }\n\n    buffer() {\n        return this.#buffer;\n    }\n\n    size() {\n        return this.#buffer.byteLength;\n    }\n\n    serialized() {\n        return this.#buffer;\n    }\n};\n\nexport function realizeMatrixMarket(loaded) {\n    return new Uint8Array(loaded.buffer());\n}\n\nexport function realizeH5(loaded) {\n    let tmppath;\n\n    do {\n        tmppath = \"temp_\" + String(Number(new Date())) + \"_\" + String(Math.round(Math.random() * 10000)) + \".h5\";\n    } while (scran.fileExists(tmppath));\n\n    scran.writeFile(tmppath, new Uint8Array(loaded.buffer()));\n    return tmppath;\n}\n\n// The default is allowed = true here; we are always allowed to delete stuff\n// from the VFS, given that we created it with realizeH5. \nexport function removeH5(path, { allowed = true } = {}) {\n    if (scran.fileExists(path)) {\n        scran.removeFile(path);\n    }\n    return;\n}\n","import * as afile from \"../../abstract/file.js\";\n\nexport function formatFile(file, sizeOnly) {\n    let output = { \"name\": afile.rawName(file) };\n    if (sizeOnly) {\n        output.size = afile.rawSize(file);\n    } else {\n        output.content = new afile.LoadedFile(file);\n    }\n    return output;\n}\n\nvar cache = {\n    file2link: null, \n    link2file: null\n};\n\n/**\n * Specify a function to create links for data files.\n * By default, this only affects files for the MatrixMarket, H5AD and 10X formats, and is only used when linking is requested.\n *\n * @param {function} fun - Function that returns a linking idenfier to a data file.\n * The function should accept the following arguments:\n *\n * - A string specifying the type of the file, e.g., `\"mtx\"`, `\"h5\"`.\n * - A string containing the name of the file.\n * - An ArrayBuffer containing the file content (for browsers) or a string containing the file path (for Node.js),\n *\n * The function is expected to return a string containing some unique identifier to the file.\n * This is most typically used to register the file with some user-specified database system for later retrieval.\n *\n * @return `fun` is set as the global link creator for this step. \n * The _previous_ value of the creator is returned.\n */\nexport function setCreateLink(fun) {\n    let previous = cache.file2link;\n    cache.file2link = fun;\n    return previous;\n}\n\n/**\n * Specify a function to resolve links for data files.\n * By default, this only affects files for the MatrixMarket, H5AD and 10X formats, and is only used when links are detected.\n *\n * @param {function} fun - Function that accepts a string containing a linking idenfier and returns an ArrayBuffer containing the file content (for browsers) or a string containing the file path (for Node.js),\n * This is most typically used to retrieve a file from some user-specified database system.\n *\n * @return `fun` is set as the global resolver for this step. \n * The _previous_ value of the resolver is returned.\n */\nexport function setResolveLink(fun) {\n    let previous = cache.link2file;\n    cache.link2file = fun;\n    return previous;\n}\n\nexport async function standardSerialize(details, type, embeddedSaver) {\n    let output = { \n        \"type\": type,\n        \"name\": details.name \n    };\n    let serialized = details.content.serialized();\n\n    if (embeddedSaver !== null) {\n        let eout = await embeddedSaver(serialized, details.content.size());\n        output.offset = eout.offset;\n        output.size = eout.size;\n    } else {\n        let fun = cache.file2link;\n        if (fun === null) {\n            throw new Error(\"link-creating function has not been set by 'setCreateLink'\");\n        }\n        output.id = await fun(type, details.name, serialized);\n    }\n\n    return output;\n}\n\nexport async function standardUnserialize(details, embeddedLoader) {\n    let output = { name: details.name };\n\n    if (\"id\" in details) {\n        let fun = cache.link2file;\n        if (fun === null) {\n            throw new Error(\"link-resolving function has not been set by 'setResolveLink'\");\n        }\n        output.content = new afile.LoadedFile(await fun(details.id));\n    } else {\n        output.content = new afile.LoadedFile(await embeddedLoader(details.offset, details.size));\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as rutils from \"./utils/index.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function abbreviate(args) {\n    return { \n        \"format\": \"10X\", \n        \"h5\": rutils.formatFile(args.h5, true)\n    };\n}\n\nfunction extract_features(handle) {\n    let genes = null;\n\n    if (!(\"matrix\" in handle.children) || handle.children[\"matrix\"] != \"Group\") {\n        throw new Error(\"expected a 'matrix' group at the top level of the file\");\n    }\n\n    let mhandle = handle.open(\"matrix\");\n    if (\"features\" in mhandle.children && mhandle.children[\"features\"] == \"Group\") {\n        let fhandle = mhandle.open(\"features\");\n\n        let ids = rutils.extractHDF5Strings(fhandle, \"id\");\n        if (ids !== null) {\n            genes = { id: ids };\n\n            let names = rutils.extractHDF5Strings(fhandle, \"name\");\n            if (names !== null) {\n                genes.name = names;\n            }\n\n            let types = rutils.extractHDF5Strings(fhandle, \"feature_type\");\n            if (types !== null) {\n                genes.type = types;\n            }\n        }\n    }\n\n    return genes;\n}\n\nexport function preflight(args) {\n    let output = {};\n    let formatted = rutils.formatFile(args.h5, false)\n\n    const tmppath = afile.realizeH5(formatted.content);\n    try {\n        let handle = new scran.H5File(tmppath);\n        output.genes = { \"RNA\": extract_features(handle) };\n\n        let split_out = rutils.splitByFeatureType(null, output.genes.RNA);\n        if (split_out !== null) {\n            output.genes = split_out.genes;            \n        }\n\n        // TODO: try pull out sample IDs from the 10X file, if they exist?\n        output.annotations = null;\n    } finally {\n        afile.removeH5(tmppath);\n    }\n\n    return output;\n}\n\nexport class Reader {\n    #h5;\n\n    constructor(args, formatted = false) {\n        if (formatted) {\n            this.#h5 = args;\n        } else {\n            this.#h5 = rutils.formatFile(args.h5, false);\n        }\n        return;\n    }\n\n    load() {\n        let output;\n        let matrices = new scran.MultiMatrix;\n\n        const tmppath = afile.realizeH5(this.#h5.content);\n        try {\n            let out_mat = scran.initializeSparseMatrixFromHDF5(tmppath, \"matrix\");\n            matrices.add(\"RNA\", out_mat);\n\n            let handle = new scran.H5File(tmppath);\n            let gene_info = extract_features(handle);\n            let genes = { RNA: rutils.reorganizeGenes(out_mat, gene_info) };\n\n            let split_out = rutils.splitByFeatureType(out_mat, genes.RNA);\n            if (split_out !== null) {\n                scran.safeFree(out_mat);\n                matrices = split_out.matrices;\n                genes = split_out.genes;\n            }\n\n            output = {\n                matrix: matrices,\n                genes: genes,\n                annotations: null\n            };\n        } catch (e) {\n            scran.safeFree(matrices);\n            throw e;\n        } finally {\n            afile.removeH5(tmppath);\n        }\n\n        return output;\n    }\n\n    format() {\n        return \"10X\";\n    }\n\n    async serialize(embeddedSaver) {\n        return [await rutils.standardSerialize(this.#h5, \"h5\", embeddedSaver)];\n    }\n}\n\nexport async function unserialize(values, embeddedLoader) {\n    return new Reader(await rutils.standardUnserialize(values[0], embeddedLoader), true);\n}\n","import * as scran from \"scran.js\";\nimport * as rutils from \"./utils/index.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function abbreviate(args) {\n    return { \n        \"format\": \"H5AD\", \n        \"h5\": rutils.formatFile(args.h5, true)\n    };\n}\n\nfunction extract_features(handle) {\n    let genes = null;\n\n    if (\"var\" in handle.children && handle.children[\"var\"] == \"Group\") {\n        let vhandle = handle.open(\"var\");\n        let index = rutils.extractHDF5Strings(vhandle, \"_index\");\n        if (index !== null) {\n            genes = { \"_index\": index };\n\n            for (const [key, val] of Object.entries(vhandle.children)) {\n                if (val === \"DataSet\" && (key.match(/name/i) || key.match(/symb/i))) {\n                    let dhandle2 = vhandle.open(key);\n                    if (dhandle2.type == \"String\") {\n                        genes[key] = dhandle2.load();\n                    }\n                }\n            }\n        }\n    }\n\n    return genes;\n}\n\nfunction extract_annotations(handle, { summary = false, summaryLimit = 50 } = {}) {\n    let annotations = null;\n\n    if (\"obs\" in handle.children && handle.children[\"obs\"] == \"Group\") {\n        let ohandle = handle.open(\"obs\");\n        annotations = {};\n\n        // Maybe it has names, maybe not, who knows; let's just add what's there.\n        let index = rutils.extractHDF5Strings(ohandle, \"_index\");\n        if (index !== null) {\n            annotations[\"_index\"] = index;\n        }\n\n        for (const [key, val] of Object.entries(ohandle.children)) {\n            if (val != \"DataSet\") {\n                continue;\n            }\n            let dhandle = ohandle.open(key);\n\n            if (dhandle.type != \"Other\") {\n                let values = dhandle.load();\n                if (summary) {\n                    annotations[key] = rutils.summarizeValues(values, summaryLimit);\n                } else {\n                    annotations[key] = values;\n                }\n            }\n        }\n\n        if (\"__categories\" in ohandle.children && ohandle.children[\"__categories\"] == \"Group\") {\n            let chandle = ohandle.open(\"__categories\");\n\n            for (const [key, val] of Object.entries(chandle.children)) {\n                if (key in annotations) {\n                    let cats = rutils.extractHDF5Strings(chandle, key);\n                    if (cats !== null) {\n                        if (summary) {\n                            annotations[key] = rutils.summarizeValues(cats, summaryLimit);\n                        } else {\n                            let old = annotations[key];\n\n                            // don't use map() as we need to handle IntArray values in 'old'.\n                            let temp = new Array(old.length);\n                            old.forEach((x, i) => {\n                                temp[i] = cats[x]\n                            }); \n\n                            annotations[key] = temp;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return annotations;\n}\n\nexport function preflight(args) {\n    let output = {};\n    let formatted = rutils.formatFile(args.h5, false)\n\n    const tmppath = afile.realizeH5(formatted.content);\n    try {\n        let handle = new scran.H5File(tmppath);\n\n        output.genes = { \"RNA\": extract_features(handle) };\n        let split_out = rutils.splitByFeatureType(null, output.genes.RNA);\n        if (split_out !== null) {\n            output.genes = split_out.genes;\n        }\n\n        output.annotations = extract_annotations(handle, { summary: true });\n    } finally {\n        afile.removeH5(tmppath);\n    }\n\n    return output;\n}\n\nexport class Reader {\n    #h5;\n\n    constructor(args, formatted = false) {\n        if (formatted) {\n            this.#h5 = args;\n        } else {\n            this.#h5 = rutils.formatFile(args.h5, false);\n        }\n        return;\n    }\n\n    load() {\n        let output;\n        let matrices = new scran.MultiMatrix;\n\n        const tmppath = afile.realizeH5(this.#h5.content);\n        try {\n            let out_mat = scran.initializeSparseMatrixFromHDF5(tmppath, \"X\");\n            matrices.add(\"RNA\", out_mat);\n\n            let handle = new scran.H5File(tmppath);\n            let gene_info = extract_features(handle); \n            let genes = { RNA: rutils.reorganizeGenes(out_mat, gene_info) };\n\n            output = {\n                matrix: matrices,\n                genes: genes,\n                annotations: extract_annotations(handle)\n            };\n        } catch (e) {\n            scran.safeFree(matrices);\n            throw e;\n        } finally {\n            afile.removeH5(tmppath);\n        }\n\n        return output;\n    }\n\n    format() {\n        return \"H5AD\";\n    }\n\n    async serialize(embeddedSaver) {\n        return [await rutils.standardSerialize(this.#h5, \"h5\", embeddedSaver)];\n    }\n}\n\nexport async function unserialize(values, embeddedLoader) {\n    return new Reader(await rutils.standardUnserialize(values[0], embeddedLoader), true);\n}\n","import * as scran from \"scran.js\";\nimport * as rutils from \"./utils/index.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function abbreviate(args) {\n    var formatted = {\n        \"format\": \"MatrixMarket\", \n        \"mtx\": rutils.formatFile(args.mtx, true)\n    };\n\n    if (\"genes\" in args) {\n        formatted.genes = rutils.formatFile(args.genes, true);\n    }\n\n    if (\"annotations\" in args) {\n        formatted.annotations = rutils.formatFile(args.annotations, true);\n    }\n\n    return formatted;\n}\n\nfunction extract_features(gene_file, numberOfRows) {\n    const content = new Uint8Array(gene_file.content.buffer());\n    var is_gz = gene_file.name.endsWith(\".gz\");\n    let parsed = rutils.readTable(content, { compression: (is_gz ? \"gz\" : \"none\") });\n\n    if (parsed.length == numberOfRows + 1) {\n        // If it seems to have a header, we just use that directly.\n        let output = {};\n        let headers = parsed.shift();\n        headers.forEach((x, i) => {\n            output[x] = parsed.map(y => y[i]);\n        });\n        return output;\n\n    } else {\n        // Otherwise, we assume it's standard 10X CellRanger output, without a header.\n        if (parsed.length !== numberOfRows) {\n            throw new Error(\"number of matrix rows is not equal to the number of rows in '\" + gene_file.name + \"'\");\n        } \n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n        let output = { \"id\": ids, \"symbol\": symb };\n\n        if (parsed[0].length >= 3) {\n            let types = [];\n            parsed.forEach(x => { types.push(x[2]); });\n            output.type = types;\n        }\n\n        return output;\n    }\n}\n\nfunction extract_annotations(annotation_file, numberOfColumns, { summary = false, summaryLimit = 50 } = {}) {\n    const content = new Uint8Array(annotation_file.content.buffer());\n    var is_gz = annotation_file.name.endsWith(\".gz\");\n    let parsed = rutils.readTable(content, { compression: (is_gz ? \"gz\" : \"none\") });\n\n    // Check if a header is present or not. Standard 10X output doesn't have a \n    // header but we'd like to support some kind of customization.\n    let headerFlag = true;\n    let diff = numberOfColumns - parsed.length;\n    if (diff === 0) {\n        headerFlag = false;\n    } else if (diff !== -1) {\n        throw \"number of matrix columns is not equal to the number of rows in '\" + annotation_file.name + \"'\";\n    }\n\n    let headers;\n    if (headerFlag) {\n        headers = parsed.shift();\n    } else {\n        headers = parsed[0]; // whatever, just using the first row. Hope it's unique enough!\n    }\n\n    let annotations = {}\n    headers.forEach((x, i) => {\n        annotations[x] = parsed.map(y => y[i]);\n    });\n    for (const [k, v] of Object.entries(annotations)) {\n        let conv = rutils.promoteToNumber(v);\n        if (conv !== null) {\n            annotations[k] = conv;\n        }\n        if (summary) {\n            annotations[k] = rutils.summarizeValues(annotations[k], summaryLimit);\n        }\n    }\n\n    return annotations;\n}\n\nexport async function preflight(args) {\n    let output = {};\n\n    let dims = null;\n    if (\"genes\" in args || \"annotations\" in args) {\n        let mtx_data = rutils.formatFile(args.mtx, false);\n        var is_gz = mtx_data.name.endsWith(\".gz\");\n        let mm = afile.realizeMatrixMarket(mtx_data.content);\n        let headers = scran.extractMatrixMarketDimensions(mm, { \"compressed\": is_gz });\n        dims = [headers.rows, headers.columns];\n    }\n\n    if (\"genes\" in args) {\n        let gene_data = rutils.formatFile(args.genes, false);\n        output.genes = { \"RNA\": extract_features(gene_data, dims[0]) };\n\n        let split_out = rutils.splitByFeatureType(null, output.genes.RNA);\n        if (split_out !== null) {\n            output.genes = split_out.genes;\n        }\n    } else {\n        output.genes = null;\n    }\n\n    if (\"annotations\" in args) {\n        let anno_data = rutils.formatFile(args.annotations, false);\n        output.annotations = extract_annotations(anno_data, dims[1], { summary: true });\n    } else {\n        output.annotations = null;\n    }\n\n    return output;\n}\n\nexport class Reader {\n    #mtx;\n    #genes;\n    #annotations;\n\n    constructor(args, formatted = false) {\n        if (!formatted) {\n            this.#mtx = rutils.formatFile(args.mtx, false);\n\n            if (\"genes\" in args) {\n                this.#genes = rutils.formatFile(args.genes, false);\n            } else {\n                this.#genes = null;\n            }\n\n            if (\"annotations\" in args) {\n                this.#annotations = rutils.formatFile(args.annotations, false);\n            } else {\n                this.#annotations = null;\n            }\n        } else {\n            this.#mtx = args.mtx;\n\n            if (\"genes\" in args) {\n                this.#genes = args.genes;\n            } else {\n                this.#genes = null;\n            }\n\n            if (\"annotations\" in args) {\n                this.#annotations = args.annotations;\n            } else {\n                this.#annotations = null;\n            }\n        }\n    }\n\n    load() {\n        var ext = this.#mtx.name.split('.').pop();\n        var is_compressed = (ext == \"gz\");\n        let mm = afile.realizeMatrixMarket(this.#mtx.content);\n\n        let matrices = new scran.MultiMatrix;\n        let output;\n        try {\n            let out_mat = scran.initializeSparseMatrixFromMatrixMarket(mm, { \"compressed\": is_compressed });\n            matrices.add(\"RNA\", out_mat);\n\n            let gene_info = null;\n            if (this.#genes !== null) {\n                gene_info = extract_features(this.#genes, out_mat.numberOfRows());\n            }\n            let genes = { RNA: rutils.reorganizeGenes(out_mat, gene_info) };\n\n            let split_out = rutils.splitByFeatureType(out_mat, genes.RNA);\n            if (split_out !== null) {\n                scran.safeFree(out_mat);\n                matrices = split_out.matrices;\n                genes = split_out.genes;\n            }\n\n            output = {\n                matrix: matrices,\n                genes: genes\n            };\n\n            if (this.#annotations !== null) {\n                let first = matrices.get(matrices.available()[0]);\n                output.annotations = extract_annotations(this.#annotations, first.numberOfColumns());\n            } else {\n                output.annotations = null;\n            }\n\n        } catch (e) {\n            scran.safeFree(matrices);\n            throw e;\n        }\n\n        return output;\n    }\n\n    format() {\n        return \"MatrixMarket\";\n    }\n\n    async serialize(embeddedSaver) {\n        let files = [await rutils.standardSerialize(this.#mtx, \"mtx\", embeddedSaver)];\n\n        if (this.#genes !== null) {\n            files.push(await rutils.standardSerialize(this.#genes, \"genes\", embeddedSaver));\n        }\n\n        if (this.#annotations !== null) {\n            files.push(await rutils.standardSerialize(this.#annotations, \"annotations\", embeddedSaver));\n        }\n\n        return files;\n    }\n}\n\nexport async function unserialize(values, embeddedLoader) {\n    let args = {};\n\n    // This should contain 'mtx', and possibly 'genes' and/or 'annotations'.\n    for (const x of values) {\n        args[x.type] = await rutils.standardUnserialize(x, embeddedLoader);\n    }\n\n    return new Reader(args, true);\n}\n","import * as TENxReader from \"./10x.js\";\nimport * as H5ADReader from \"./h5ad.js\";\nimport * as MtxReader from \"./mtx.js\";\n\nexport function chooseReader(format) {\n    if (!(format in availableReaders)) {\n        throw \"unknown matrix format '\" + format + \"'\";\n    }\n    return availableReaders[format];\n}\n\n/**\n * List of available readers.\n * Each key specifies a matrix format; the corresponding value should be an ES6 module containing methods to interpret that format.\n * See {@tutorial custom_readers} for details on adding new readers.\n */\nexport var availableReaders = {\n    \"MatrixMarket\": MtxReader,\n    \"10X\": TENxReader,\n    \"H5AD\": H5ADReader\n};\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as iutils from \"../readers/index.js\";\nexport const step_name = \"inputs\";\n\nconst RAW_SUBSET_OVERRIDE = \"raw_subset_indices\";\n\n/**\n * This step handles the loading of the input count matrices into memory.\n * This wraps various matrix initialization functions in [**scran.js**](https://github.com/jkanche/scran.js),\n * depending on the format of the supplied matrices.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class InputsState {\n    #parameters;\n    #cache;\n    #abbreviated;\n\n    constructor(parameters = null, cache = null, abbreviated = null) {\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#abbreviated = (abbreviated === null ? {} : abbreviated);\n        this.changed = false;\n        return;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.raw_matrix);\n        utils.freeCache(this.#cache.block_ids);\n        utils.freeCache(this.#cache.raw_block_ids);\n        utils.freeCache(this.#cache.multi_block_ids);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    listAvailableTypes() {\n        return this.#cache.matrix.available();\n    }\n\n    hasAvailable(type) {\n        return this.#cache.matrix.has(type);\n    }\n\n    fetchCountMatrix({ type = \"RNA\" } = {}) {\n        return this.#cache.matrix.get(type);\n    }\n\n    fetchGenes({ type = \"RNA\" } = {}) {\n        return this.#cache.genes[type];\n    }\n\n    fetchGeneTypes() {\n        return this.#cache.gene_types;\n    }\n\n    /**\n     * Fetch an annotation for all cells in the dataset.\n     * This considers all cells in the dataset before QC filtering - \n     * see {@linkcode QualityControlState#fetchFilteredAnnotations QualityControlState.fetchFilteredAnnotations} for an alternative.\n     *\n     * @param {string} col - Name of the annotation field of interest.\n     *\n     * @return {Array|TypedArray} Array of length equal to the total number of cells, containing the requested annotations.\n     */\n    fetchAnnotations(col) {\n        let annots = this.#cache.annotations;\n        if (annots === null || !(col in annots)) {\n            throw new Error(`${col} does not exist in the column annotations`);\n        }\n\n        // Make a copy, avoid accidental writes or transfers. \n        return annots[col].slice();\n    }\n\n    fetchBlock() {\n        return this.#cache.block_ids;\n    }\n\n    fetchBlockLevels() {\n        return this.#cache.block_levels;\n    }\n\n    fetchParameters() {\n        // Cloning the parameters to avoid pass-by-reference behavior affecting the\n        // InputsState object. We don't pass the files back here.\n        let output = { ...this.#parameters };\n        output.subset = this.constructor.#cloneSubset(output.subset);\n        return output;\n    }\n\n    fetchDirectSubset() {\n        if (RAW_SUBSET_OVERRIDE in this.#cache) {\n            return this.#cache[RAW_SUBSET_OVERRIDE].slice();\n        } else {\n            return null;\n        }\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            sample_factor: null,\n            subset: null\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * `matrices` is taken from the argument of the same name in {@linkcode runAnalysis},\n     * while `sample_factor` is taken from the property of the same name in the `inputs` property of the `parameters`.\n     *\n     * @param {object} matrices - An object containing data for one or more count matrices.\n     * Each property corresponds to a single matrix and should contain a `format` string property along with any number of File objects (browser) or file paths (Node.js).\n     * See the description of the argument of the same name in {@linkcode runAnalysis}.\n     * @param {?string} sample_factor - Name of the column of the cell annotations specifying the sample of origin for each cell.\n     * This is only used if a single count matrix is supplied.\n     *\n     * If `null`, all cells are assumed to originate from the same sample.\n     * @param {?subset} subset - Object describing if any pre-analysis subsetting should be applied.\n     * This should contain `field`, a string specifying a field of the column annotation.\n     *\n     * - For categorical variables, the object should also contain `values`, an array of allowed values for that annotation.\n     *   Cells are only retained if they are associated with any of the allowable values for that annotation field.\n     * - For continuous variables, the object should also contain `ranges`, an array of arrays.\n     *   Each inner array should contain two numbers defining the start and end of a range.\n     *   Ranges should be sorted and non-overlapping (boundaries excepted).\n     *\n     * If `subset` is `null`, no subsetting is performed and all cells are used in the downstream analysis.\n     *\n     * @return The object is updated with the new results.\n     * A promise is returned that resolves to `null` once input loading is complete - this should be resolved before any downstream steps are run.\n     */\n    async compute(matrices, sample_factor, subset) {\n        this.changed = false;\n\n        // Don't bother proceeding with any of the below\n        // if we're operating from a reloaded state.\n        if (matrices !== null) {\n            let entries = Object.entries(matrices);\n            let tmp_abbreviated = {};\n            for (const [key, val] of entries) {\n                let namespace = iutils.chooseReader(val.format);\n                tmp_abbreviated[key] = namespace.abbreviate(val);\n            }\n\n            if (utils.changedParameters(tmp_abbreviated, this.#abbreviated)) {\n                let new_readers = {};\n                for (const [key, val] of entries) {\n                    let namespace = iutils.chooseReader(val.format);\n                    new_readers[key] = new namespace.Reader(val);\n                }\n                await load_and_cache(new_readers, this.#cache);\n\n                this.#abbreviated = tmp_abbreviated;\n                this.#cache.readers = new_readers;\n                this.changed = true;\n            }\n        }\n\n        if (this.changed || this.#parameters.sample_factor !== sample_factor) {\n            block_and_cache(sample_factor, this.#cache);\n            this.#parameters.sample_factor = sample_factor;\n            this.changed = true;\n        }\n\n        if (this.changed || (!(RAW_SUBSET_OVERRIDE in this.#cache) && utils.changedParameters(subset, this.#parameters.subset))) {\n            subset_and_cache(subset, this.#cache);\n            this.#parameters.subset = this.constructor.#cloneSubset(subset);\n            this.changed = true;\n        }\n\n        return null;\n    }\n\n    /******************************\n     ******** Subsetting **********\n     ******************************/\n\n    static #cloneSubset(subset) {\n        // We use a dedicated cloning function to handle Infs,\n        // as these get converted to nulls by the JSON stringify.\n        if (subset == null) {\n            return subset;\n        }\n\n        let clone = { ...subset };\n        if (\"values\" in clone) {\n            clone.values = clone.values.slice();\n        }\n\n        if (\"ranges\" in clone) {\n            clone.ranges = clone.ranges.map(x => x.slice());\n        }\n\n        return clone;\n    }\n\n    /**\n     * Undo the effect of subsetting on an array of indices.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the subsetted matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the pre-subsetted matrix.\n     */\n    undoSubset(indices) {\n        // Setting the subset to null, if the parameter-level subset hasn't\n        // been set yet. This is because we might get indirectly called via\n        // setDirectSubset() before compute() has been run.\n        let subset = null;\n        if (\"subset\" in this.#parameters) {\n            subset = this.#parameters.subset;\n        }\n\n        let keep = harvest_subset_indices(subset, this.#cache);\n        if (keep !== null) {\n            indices.forEach((x, i) => { indices[i] = keep[x] });\n        }\n    }\n\n    #configureIndices(indices, copy, onOriginal) {\n        // scran.js's subset functions will pick up out-of-range indices.\n        utils.checkIndices(indices, null);\n\n        // We make a copy here to take ownership of the underlying memory,\n        // otherwise any edits in the caller would mutate the new InputsState's\n        // indices by reference.\n        if (copy) {\n            indices = indices.slice();\n        }\n\n        if (!onOriginal) {\n            this.undoSubset(indices);\n        }\n\n        return indices;\n    }\n\n    /**\n     * Unlike most of the other methods, `setDirectSubset` can be called on an InputsState before {@linkcode InputsState#compute compute}.\n     * This means that a user can create the state object from {@linkcode createAnalysis},\n     * specify a subset of cells via `setDirectSubset` on the (currently empty) InputsState object in `inputs`,\n     * and then call {@linkcode runAnalysis} to execute an analysis on the desired subset of cells.\n     * \n     * @param {TypedArray|Array} indices - Array containing the indices for the desired subset of cells.\n     * This should be sorted and non-duplicate.\n     * Any existing subset in this object will be overridden by `indices`.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `indices` before storing it inside the returned state object.\n     * If `false`, it is assumed that the caller makes no further use of the passed `indices`.\n     * @param {boolean} [options.onOriginal=false] - Whether `indices` contains indices on the original dataset or on the dataset in `state`.\n     * This distinction is only relevant if the current InputsState object already contains a specified subset.\n     * If `false`, the `indices` are assumed to refer to the already-subsetted dataset that exists in `state`;\n     * if `true`, the `indices` are assumed to refer to the original dataset from which the subset in `state` was created.\n     *\n     * @return The dataset in this InputsState object is subsetted to the desired `indices`.\n     */\n    setDirectSubset(indices, { copy = true, onOriginal = false } = {}) {\n        if (indices !== null) {\n            this.#cache[RAW_SUBSET_OVERRIDE] = this.#configureIndices(indices, copy, onOriginal);\n        } else {\n            delete this.#cache[RAW_SUBSET_OVERRIDE];            \n        }\n\n        // If it's already got a matrix entry, we re-run it.\n        if (\"matrix\" in this.#cache) {\n            subset_and_cache(this.#parameters.subset, this.#cache);\n            this.changed = true;\n        }\n    }\n\n    createDirectSubset(indices, { copy = true, onOriginal = false } = {}) {\n        let new_cache = {};\n        new_cache[RAW_SUBSET_OVERRIDE] = this.#configureIndices(indices, copy, onOriginal);\n\n        // Making explicit clones to take ownership.\n        new_cache.raw_matrix = clone_MultiMatrix(this.#cache.raw_matrix);\n        for (const x of [ \"multi_block_ids\", \"raw_block_ids\" ]) {\n            if (x in this.#cache) {\n                if (this.#cache[x] === null) {\n                    new_cache[x] = null;\n                } else {\n                    new_cache[x] = this.#cache[x].clone();\n                }\n            }\n        }\n\n        // These can probably be copied directly, given that they are always\n        // replaced wholesale in the various *_and_cache functions, rather than\n        // being modified in-place.\n        for (const x of [ \"raw_annotations\", \"genes\", \"gene_types\", \"multi_block_levels\", \"raw_block_levels\" ]) {\n            if (x in this.#cache) {\n                new_cache[x] = this.#cache[x];\n            }\n        }\n\n        subset_and_cache(null, new_cache);\n\n        let new_params = this.fetchParameters();\n        new_params.subset = null;\n\n        return new InputsState(new_params, new_cache, this.#abbreviated);\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An object containing:\n     *\n     * - `dimensions`: an object containing `num_genes` and `num_cells`, the number of genes and cells respectively.\n     *   For multiple matrices, the number of cells is the total number across all matrices.\n     * - `genes`: an object containing the per-gene annotation.\n     *   Each property is an array of length equal to the number of genes, usually containing strings with gene identifiers or symbols.\n     *   Property names are arbitrary.\n     * - (optional) `annotations`: an array of strings containing the names of available cell annotation fields.\n     */\n    summary() {\n        let ngenes = {};\n        for (const a of this.#cache.matrix.available()) {\n            ngenes[a] = this.#cache.matrix.get(a).numberOfRows();\n        }\n        \n        var output = {\n            \"num_cells\": this.#cache.matrix.numberOfColumns(),\n            \"num_genes\": ngenes,\n            \"genes\": { ...(this.#cache.genes) }\n        };\n        if (this.#cache.annotations !== null) {\n            output.annotations = Object.keys(this.#cache.annotations);\n        }\n        return output;\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    async serialize(handle, embeddedSaver) {\n        let ghandle = handle.createGroup(\"inputs\");\n\n        let multifile = false;\n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n\n            // Make sure we're in sorted order, for consistency with\n            // how the merge is done.\n            let names = Object.keys(this.#cache.readers);\n            names.sort();\n\n            let formats = [];\n            let numbers = [];\n            let fihandle = phandle.createGroup(\"files\");\n            let sofar = 0;\n\n            for (const key of names) {\n                let val = this.#cache.readers[key];\n                formats.push(val.format());\n\n                let files = await val.serialize(embeddedSaver);\n                numbers.push(files.length);\n\n                for (const obj of files) {\n                    let curhandle = fihandle.createGroup(String(sofar));\n                    curhandle.writeDataSet(\"type\", \"String\", [], obj.type);\n                    curhandle.writeDataSet(\"name\", \"String\", [], obj.name);\n\n                    if (typeof obj.id == \"string\") {\n                        curhandle.writeDataSet(\"id\", \"String\", [], obj.id);\n                    } else if (typeof obj.offset == \"number\" && typeof obj.size == \"number\") {\n                        curhandle.writeDataSet(\"offset\", \"Uint32\", [], obj.offset);\n                        curhandle.writeDataSet(\"size\", \"Uint32\", [], obj.size);\n                    } else {\n                        throw new Error(\"object should contain either an 'id' string or 'offset' and 'size' numbers\"); \n                    }\n\n                    sofar++;\n                }\n            }\n\n            if (formats.length > 1) {\n                multifile = true;\n                phandle.writeDataSet(\"format\", \"String\", null, formats);\n                phandle.writeDataSet(\"sample_groups\", \"Int32\", null, numbers);\n                phandle.writeDataSet(\"sample_names\", \"String\", null, names);\n            } else {\n                phandle.writeDataSet(\"format\", \"String\", [], formats[0]);\n                if (this.#parameters.sample_factor !== null) {\n                    phandle.writeDataSet(\"sample_factor\", \"String\", [], this.#parameters.sample_factor);\n                }\n            }\n\n            if (this.#parameters.subset !== null || RAW_SUBSET_OVERRIDE in this.#cache) {\n                let shandle = phandle.createGroup(\"subset\");\n                let schandle = shandle.createGroup(\"cells\");\n\n                if (RAW_SUBSET_OVERRIDE in this.#cache) {\n                    schandle.writeDataSet(\"indices\", \"Int32\", null, this.#cache[RAW_SUBSET_OVERRIDE]);\n                } else if (\"field\" in this.#parameters.subset) {\n                    schandle.writeDataSet(\"field\", \"String\", [], this.#parameters.subset.field);\n\n                    if (\"values\" in this.#parameters.subset) {\n                        schandle.writeDataSet(\"values\", \"String\", null, this.#parameters.subset.values);\n                    } else {\n                        let raw_ranges = this.#parameters.subset.ranges;\n                        let ranges = [].concat(...raw_ranges);\n                        check_subset_ranges(ranges);\n                        schandle.writeDataSet(\"ranges\", \"Float64\", [ranges.length/2, 2], ranges);\n                    }\n                } else {\n                    throw new Error(\"unrecognized specification for 'subset'\");\n                }\n            }\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n            rhandle.writeDataSet(\"num_cells\", \"Int32\", [], this.#cache.matrix.numberOfColumns());\n\n            let fhandle = rhandle.createGroup(\"num_features\");\n            for (const a of this.#cache.matrix.available()) {\n                fhandle.writeDataSet(a, \"Int32\", [], this.#cache.matrix.get(a).numberOfRows());\n            }\n\n            // For diagnostic purposes, we store the number of samples;\n            // this may not be captured by the parameters if we're dealing\n            // with a sample_factor from a single file.\n            if (this.#cache.block_levels !== null) {\n                rhandle.writeDataSet(\"num_samples\", \"Int32\", [], this.#cache.block_levels.length); \n            }\n\n            // Looping through all available matrices.\n            let ihandle = rhandle.createGroup(\"identities\");\n            for (const a of this.#cache.matrix.available()) {\n                ihandle.writeDataSet(a, \"Int32\", null, this.#cache.matrix.get(a).identities());\n            }\n        }\n\n        return;\n    }\n}\n\n/************************************\n ******* Internals - loading ********\n ************************************/\n\n// Exported for testing only.\nexport function commonFeatureTypes(genes) {\n    let scores = {\n        \"symbol-mouse\": [],\n        \"symbol-human\": [],\n        \"ensembl-mouse\": [],\n        \"ensembl-human\": []\n    };\n\n    // Manually making a copy, until structuredClone becomes widely available.\n    let fields = {};\n    Object.keys(scores).forEach(x => { fields[x] = []; });\n\n    let names = Object.keys(genes);\n    for (const name of names) {\n        let curgenes = genes[name];\n\n        let best_scores = {};\n        let best_fields = {};\n        for (const [k, v] of Object.entries(curgenes)) {\n            let fscore = scran.guessFeatures(v);\n            let curname = fscore.type + \"-\" + fscore.species;\n            if (!(curname in best_scores) || fscore.confidence > best_scores[curname]) {\n                best_scores[curname] = fscore.confidence;\n                best_fields[curname] = k;\n            }\n        }\n\n        for (const [k, v] of Object.entries(best_fields)) {\n            fields[k].push(v);\n            scores[k].push(best_scores[k]);\n        }\n    }\n\n    let best_score = -1000;\n    let best_type = null;\n\n    for (const [k, v] of Object.entries(scores)) {\n        if (v.length == names.length) { // skipping if not represented in all entries.\n            let nscore = v.reduce((a, b) => a * b);\n            if (nscore > best_score) {\n                best_score = nscore;\n                best_type = k;\n            }\n        }\n    }\n\n    let best_fields = {};\n    let best_features = null;\n\n    if (best_type !== null) {\n        let best_type_cols = fields[best_type];\n        let best_features_sub = best_type.split(\"-\");\n        best_features = {\n            type: best_features_sub[0],\n            species: best_features_sub[1]\n        };\n        for (var i = 0; i < names.length; i++) {\n            best_fields[names[i]] = best_type_cols[i];\n        }\n    }\n\n    return {\n        \"best_type\": best_features,\n        \"best_fields\": best_fields\n    };\n}\n\nfunction bind_single_modality(dkeys, datasets, type) {\n    let output = {};\n\n    try {\n        // Identify the gene columns to use.\n        let genes = {};\n        for (const k of dkeys) {\n            genes[k] = datasets[k].genes[type];\n            if (genes[k] === null) {\n                throw new Error(\"no gene annotations found in matrix '\" + k + \"'\");\n            }\n        }\n\n        let result = commonFeatureTypes(genes);\n        if (result.best_type === null) {\n            throw new Error(\"no common feature types available across all matrices\");\n        }\n        let best_fields = result.best_fields;\n\n        let gnames = [];\n        let mats = [];\n        for (const k of dkeys) {\n            gnames.push(genes[k][best_fields[k]]);\n            mats.push(datasets[k].matrix.get(type));\n        }\n\n        let merged = scran.cbindWithNames(mats, gnames);\n        output.matrix = merged.matrix;\n\n        // Extracting gene information from the first object. We won't make\n        // any attempt at merging and deduplication across objects.\n        let first_genes = genes[dkeys[0]];\n        output.genes = scran.subsetArrayCollection(first_genes, merged.indices);\n\n    } catch (e) {\n        utils.freeCache(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction bind_datasets(dkeys, datasets) {\n    // Checking which feature types are available across all datasets.\n    let available = null;\n    for (const k of dkeys) {\n        if (available === null) {\n            available = datasets[k].matrix.available();\n        } else {\n            let present = new Set(datasets[k].matrix.available());\n            available = available.filter(x => present.has(x));\n        }\n    }\n\n    let blocks;\n    let output = { \n        matrix: new scran.MultiMatrix, \n        genes: {} \n    };\n\n    try {\n        for (const a of available) {\n            let current = bind_single_modality(dkeys, datasets, a);\n            output.matrix.add(a, current.matrix);\n            output.genes[a] = current.genes;\n        }\n\n        // Get all annotations keys across datasets; we then concatenate\n        // columns with the same name, or we just fill them with missings.\n        let lengths = [];\n        let annos = [];\n        for (const d of dkeys) {\n            let current = datasets[d];\n            if (current.annotations !== null) {\n                annos.push(current.annotations);\n            } else {\n                annos.push({});\n            }\n            lengths.push(current.matrix.numberOfColumns());\n        }\n        output.annotations = scran.combineArrayCollections(annos, { lengths: lengths });\n\n        // Generating a block vector.\n        let ncells = new Array(dkeys.length);\n        dkeys.forEach((x, i) => { ncells[i] = datasets[x].matrix.numberOfColumns(); });\n        blocks = scran.createBlock(ncells);\n        output.block_ids = blocks;\n        output.block_levels = dkeys;\n\n        let nice_barr = new Array(blocks.length);\n        blocks.forEach((x, i) => { nice_barr[i] = dkeys[x]; })\n        output.annotations[\"__batch__\"] = nice_barr;\n\n    } catch (e) {\n        utils.freeCache(blocks);\n        utils.freeCache(output.matrix);\n        throw e;\n    } \n\n    return output;\n}\n\nasync function load_datasets(matrices) {\n    // Loading all of the individual matrices. \n    let datasets = {};\n    try {\n        for (const [key, val] of Object.entries(matrices)) {\n            // Too much hassle to convert this into a Promise.all(), because we\n            // need to make sure it gets freed properly on failure.\n            datasets[key] = await val.load();\n        }\n    } catch (e) {\n        // If any one fails, we free the rest.\n        for (const [key, val] of Object.entries(datasets)){\n            utils.freeCache(val.matrix);\n        }\n        throw e;\n    }\n\n    // Ensure we have a reproducible order; otherwise the batch\n    // order becomes dependent on the JS engine's ordering.\n    let dkeys = Object.keys(datasets);\n    dkeys.sort();\n\n    let output;\n    if (dkeys.length == 1) {\n        output = datasets[dkeys[0]];\n        output.block_ids = null;\n        output.block_levels = null;\n    } else {\n        try {\n            output = bind_datasets(dkeys, datasets);\n        } finally {\n            // No need to hold references to the individual matrices\n            // once the full matrix is loaded.\n            for (const [k, v] of Object.entries(datasets)) {\n                utils.freeCache(v.matrix);\n            }\n        }\n    }\n\n    return output;\n}\n\n/******************************************\n ******* Internals - miscellaneous ********\n ******************************************/\n\nfunction harvest_subset_indices(subset, cache) {\n    let keep = null;\n\n    if (RAW_SUBSET_OVERRIDE in cache) {\n        keep = cache[RAW_SUBSET_OVERRIDE];\n    } else if (subset !== null) {\n        if (!(subset.field in cache.raw_annotations)) {\n            throw new Error(\"failed to find 'subset.field' in the column annotations\");\n        }\n        let anno = cache.raw_annotations[subset.field];\n\n        keep = [];\n\n        if (\"values\" in subset) {\n            let allowed = new Set(subset.values);\n            anno.forEach((x, i) => {\n                if (allowed.has(x)) {\n                    keep.push(i);\n                }\n            });\n        } else {\n            // Check each entry to see whether it belongs to the range.\n            // This is cheaper than sorting anything, assuming there \n            // aren't that many ranges.\n            anno.forEach((x, i) => {\n                for (const r of subset.ranges) {\n                    if (x >= r[0] && x <= r[1]) {\n                        keep.push(i);\n                        return;\n                    }\n                }\n            });\n        }\n    }\n\n    return keep;\n}\n\nfunction clone_MultiMatrix(x) {\n    let new_matrix = new scran.MultiMatrix;\n    try {\n        for (const key of x.available()) {\n            let current = x.get(key);\n            new_matrix.add(key, current.clone());\n        }\n    } catch (e) {\n        new_matrix.free();\n        throw e;\n    }\n    return new_matrix;\n}\n\nfunction check_subset_ranges(ranges) { \n    if (ranges.length % 2 !== 0) {\n        throw new Error(\"'ranges' should have two columns in 'subset'\");\n    }\n    for (var i = 1; i < ranges.length; i++) {\n        if (ranges[i] < ranges[i-1]) {\n            throw new Error(\"'ranges' should be sorted in increasing order\");\n        }\n    }\n}\n\n/************************************\n ******* Internals - caching ********\n ************************************/\n\nasync function load_and_cache(new_readers, cache) {\n    utils.freeCache(cache.raw_matrix);\n    utils.freeCache(cache.matrix); // freeing this as well, to release all references and potentially release memory.\n    utils.freeCache(cache.multi_block_ids);\n\n    let res = await load_datasets(new_readers);\n    cache.raw_matrix = res.matrix;\n    cache.raw_annotations = res.annotations;\n    cache.multi_block_ids = res.block_ids;\n    cache.multi_block_levels = res.block_levels;\n\n    cache.genes = res.genes;\n    var gene_info_type = {};\n    var gene_info = cache.genes[\"RNA\"];\n    for (const [key, val] of Object.entries(gene_info)) {\n        gene_info_type[key] = scran.guessFeatures(val);\n    }\n    cache.gene_types = gene_info_type;\n}\n\nfunction block_and_cache(sample_factor, cache) {\n    utils.freeCache(cache.raw_block_ids);\n\n    let blocks = null;\n    let block_levels = null;\n\n    if (sample_factor !== null) {\n        // Single matrix with a batch factor.\n        try {\n            let anno_batch = cache.raw_annotations[sample_factor];\n            if (anno_batch.length != cache.raw_matrix.numberOfColumns()) {\n                throw new Error(\"length of sample factor '\" + sample_factor + \"' should be equal to the number of cells\"); \n            }\n            let converted = scran.convertBlock(anno_batch);\n            blocks = converted.ids;\n            block_levels = converted.levels;\n        } catch (e) {\n            utils.freeCache(blocks);\n            throw e;\n        }\n    } else {\n        if (cache.multi_block_ids !== null) { \n            // Creating a view so that freeing of this object is a no-op.\n            // We're downstream of load_and_cache so any freeing of\n            // multi_block_ids would require block_and_cache to rerun\n            // anyway, so we don't have to worry about invalidation.\n            blocks = cache.multi_block_ids.view();\n        } else {\n            blocks = null;\n        }\n        block_levels = cache.multi_block_levels;\n    }\n\n    cache.raw_block_ids = blocks;\n    cache.raw_block_levels = block_levels;\n}\n\nfunction subset_and_cache(subset, cache) {\n    utils.freeCache(cache.matrix);\n    utils.freeCache(cache.block_ids);\n\n    let keep = harvest_subset_indices(subset, cache);\n\n    let new_annotations;\n    let new_matrix;\n    let new_block_ids;\n    let new_block_levels;\n\n    try {\n        if (keep === null) {\n            new_annotations = cache.raw_annotations;\n\n            // Need to make a clone so that it can be freed independently of the original.\n            // This is cheap as only the shared pointer is cloned, not the underlying data.\n            new_matrix = clone_MultiMatrix(cache.raw_matrix);\n\n            if (cache.raw_block_ids !== null) {\n                // A view also works, given that we're downstream of the generating\n                // process for raw_block_ids and thus our lifetime is always tied to it.\n                new_block_ids = cache.raw_block_ids.view();\n                new_block_levels = cache.raw_block_levels;\n            } else {\n                new_block_ids = null;\n                new_block_levels = null;\n            }\n\n        } else {\n            new_annotations = scran.subsetArrayCollection(cache.raw_annotations, keep);\n\n            if (cache.raw_block_ids !== null) {\n                new_block_ids = scran.subsetBlock(cache.raw_block_ids, keep);\n                let dropped = scran.dropUnusedBlock(new_block_ids);\n                new_block_levels = dropped.map(x => cache.raw_block_levels[x]);\n            } else {\n                new_block_ids = null;\n                new_block_levels = null;\n            }\n\n            new_matrix = new scran.MultiMatrix;\n            for (const key of cache.raw_matrix.available()) {\n                let current = cache.raw_matrix.get(key);\n                new_matrix.add(key, scran.subsetColumns(current, keep));\n            }\n        }\n\n    } catch (e) {\n        utils.freeCache(new_matrix);\n        utils.freeCache(new_block_ids);\n        throw e;\n    }\n\n    cache.annotations = new_annotations;\n    cache.block_levels = new_block_levels;\n    cache.block_ids = new_block_ids;\n    cache.matrix = new_matrix;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction createPermuter(perm) {\n    return x => {\n        let copy = x.slice();\n        x.forEach((y, i) => {\n            x[i] = copy[perm[i]];\n        });\n    };\n}\n\nexport async function unserialize(handle, embeddedLoader) {\n    let ghandle = handle.open(\"inputs\");\n    let phandle = ghandle.open(\"parameters\");\n\n    // Extracting the files.\n    let fihandle = phandle.open(\"files\");\n    let kids = fihandle.children;\n    let all_files = new Array(kids.length);\n\n    for (const x of Object.keys(kids)) {\n        let current = fihandle.open(x);\n\n        let curfile = {};\n        for (const field of [\"type\", \"name\"]) {\n            let dhandle = current.open(field, { load: true });\n            curfile[field] = dhandle.values[0];\n        }\n\n        if (\"id\" in current.children) {\n            curfile.id = current.open(\"id\", { load: true }).values[0];\n        } else {\n            for (const field of [\"offset\", \"size\"]) {\n                curfile[field] = current.open(field, { load: true }).values[0];\n            }\n        }\n\n        let idx = Number(x);\n        all_files[idx] = curfile;\n    }\n\n    // Extracting the format and organizing the files.\n    let readers = {};\n    let parameters = { sample_factor: null };\n    let fohandle = phandle.open(\"format\", { load: true });\n    let solofile = (fohandle.shape.length == 0);\n\n    if (solofile) {\n        let format = fohandle.values[0];\n        let namespace = iutils.chooseReader(format);\n        readers[\"default\"] = await namespace.unserialize(all_files, embeddedLoader);\n        if (\"sample_factor\" in phandle.children) {\n            parameters.sample_factor = phandle.open(\"sample_factor\", { load: true }).values[0];\n        } else {\n            parameters.sample_factor = null;\n        }\n\n    } else {\n        let formats = fohandle.values;\n        let sample_names = phandle.open(\"sample_names\", { load: true }).values;\n        let sample_groups = phandle.open(\"sample_groups\", { load: true }).values;\n\n        let sofar = 0;\n        for (var i = 0; i < formats.length; i++) {\n            let start = sofar;\n            sofar += sample_groups[i];\n            let curfiles = all_files.slice(start, sofar);\n            let namespace = iutils.chooseReader(formats[i]);\n            readers[sample_names[i]] = await namespace.unserialize(curfiles, embeddedLoader);\n        }\n    }\n\n    // Figuring out the subset.\n    let subset = null;\n    let raw_indices = null;\n    if (\"subset\" in phandle.children) {\n        let shandle = phandle.open(\"subset\");\n\n        if (\"cells\" in shandle.children) {\n            let schandle = shandle.open(\"cells\");\n            if (\"indices\" in schandle.children) {\n                raw_indices = schandle.open(\"indices\", { load: true }).values;\n            } else if (\"field\" in schandle.children) {\n                subset = { field: schandle.open(\"field\", { load: true }).values[0] };\n\n                if (\"values\" in schandle.children) {\n                    subset.values = schandle.open(\"values\", { load: true }).values;\n                } else {\n                    let ranges = schandle.open(\"ranges\", { load: true }).values;\n                    check_subset_ranges(ranges);\n                    let reranges = [];\n                    for (var i = 0; i < ranges.length/2; i++) {\n                        reranges.push([ ranges[2*i], ranges[2*i + 1] ]);\n                    }\n                    subset.ranges = reranges;\n                }\n            } else {\n                throw new Error(\"unrecognized specification for 'subset'\");\n            }\n        }\n    }\n\n    parameters.subset = subset;\n\n    // Loading matrix data.\n    let cache = { readers: readers };\n    await load_and_cache(readers, cache);\n    block_and_cache(parameters.sample_factor, cache);\n\n    if (raw_indices !== null) {\n        cache[RAW_SUBSET_OVERRIDE] = raw_indices;\n    }\n    subset_and_cache(parameters.subset, cache);\n\n    // We need to do something if the permutation is not the same.\n    let rhandle = ghandle.open(\"results\");\n\n    let perm = {};\n    if (solofile) {\n        if (\"permutation\" in rhandle.children) {\n            // v1.0-v1.1\n            let dhandle = rhandle.open(\"permutation\", { load: true });\n            let ids = new Int32Array(dhandle.values.length);\n            dhandle.values.forEach((x, i) => { ids[x] = i; });\n            perm.RNA = scran.updateRowIdentities(cache.matrix.get(\"RNA\"), ids);\n        } else if (\"identities\" in rhandle.children) {\n            if (rhandle.children[\"identities\"] == \"DataSet\") {\n                // v1.2\n                let dhandle = rhandle.open(\"identities\", { load: true });\n                perm.RNA = scran.updateRowIdentities(cache.matrix.get(\"RNA\"), dhandle.values);\n            } else {\n                // v2.0\n                let ihandle = rhandle.open(\"identities\");\n                for (const a of Object.keys(ihandle.children)) {\n                    if (cache.matrix.has(a)) {\n                        let dhandle = ihandle.open(a, { load: true });\n                        perm[a] = scran.updateRowIdentities(cache.matrix.get(a), dhandle.values);\n                    }\n                }\n            }\n        } else {\n            // Otherwise, we're dealing with v0 states. We'll just\n            // assume it was the same, I guess. Should be fine as we didn't change\n            // the permutation code in v0.\n        }\n    } else {\n        let old_ids;\n        if (\"indices\" in rhandle.children) {\n            // v1.1\n            old_ids = rhandle.open(\"indices\", { load: true }).values;\n\n            let ref = cache.matrix.get(\"RNA\").identities().sort();\n            let old_ids2 = old_ids.slice().sort();\n            for (var i = 0; i < old_ids2.length; i++) {\n                if (ref[i] != old_ids2[i]) {\n                    console.log([i, ref[i], old_ids2[i]]);\n                    break;\n                }\n            }\n            perm.RNA = scran.updateRowIdentities(cache.matrix.get(\"RNA\"), old_ids);\n        } else {\n            if (rhandle.children[\"identities\"] == \"DataSet\") {\n                // v1.2+\n                old_ids = rhandle.open(\"identities\", { load: true }).values;\n                perm.RNA = scran.updateRowIdentities(cache.matrix.get(\"RNA\"), old_ids);\n            } else {\n                // v2.0\n                let ihandle = rhandle.open(\"identities\");\n                for (const a of Object.keys(ihandle.children)) {\n                    if (cache.matrix.has(a)) {\n                        let dhandle = ihandle.open(a, { load: true });\n                        perm[a] = scran.updateRowIdentities(cache.matrix.get(a), dhandle.values);\n                    }\n                }\n            }\n        }\n    }\n\n    let permuters = {};\n    for (const a of cache.matrix.available()) {\n        if (a in perm && perm[a] !== null) {\n            permuters[a] = createPermuter(perm[a]); \n        } else {\n            permuters[a] = x => {};\n        }\n    }\n\n    /*\n     * We could try to construct 'abbreviated', but there isn't really\n     * any point because callers are expected to set 'matrices = null'\n     * in their calls to 'compute()' on an unserialized analysis, so \n     * any setting of '#abbreviated' wouldn't even get used.\n     */\n\n    return { \n        state: new InputsState(parameters, cache),\n        permuters: permuters\n    };\n}\n","export function splitMetricsByBlock(metrics, blockLevels, blockIds) {\n    var output = {};\n    var blocks = blockIds.array();\n    for (var b = 0; b < blockLevels.length; b++) {\n        let current = {};\n        for (const [key, val] of Object.entries(metrics)) {\n            current[key] = val.array().filter((x, i) => blocks[i] == b);\n        }\n        output[blockLevels[b]] = current;\n    }\n    return output;\n}\n\nexport function splitThresholdsByBlock(thresholds, blockLevels) {\n    var output = {};\n    for (const x of blockLevels) {\n        output[x] = {};\n    }\n\n    for (const [key, val] of Object.entries(thresholds)) {\n        for (var b = 0; b < blockLevels.length; b++) {\n            output[blockLevels[b]][key] = val[b];\n        }\n    }\n\n    return output;\n}\n\nexport class QualityControlStateBase {}\n","/* Derived from scran.js's blacklists.js.R. */\n\nexport var mito = {};\nmito.ensembl = new Set([\"ENSMUSG00000064336\",\"ENSMUSG00000064337\",\"ENSMUSG00000064338\",\"ENSMUSG00000064339\",\"ENSMUSG00000064340\",\"ENSMUSG00000064341\",\"ENSMUSG00000064342\",\"ENSMUSG00000064343\",\"ENSMUSG00000064344\",\"ENSMUSG00000064345\",\"ENSMUSG00000064346\",\"ENSMUSG00000064347\",\"ENSMUSG00000064348\",\"ENSMUSG00000064349\",\"ENSMUSG00000064350\",\"ENSMUSG00000064351\",\"ENSMUSG00000064352\",\"ENSMUSG00000064353\",\"ENSMUSG00000064354\",\"ENSMUSG00000064355\",\"ENSMUSG00000064356\",\"ENSMUSG00000064357\",\"ENSMUSG00000064358\",\"ENSMUSG00000064359\",\"ENSMUSG00000064360\",\"ENSMUSG00000064361\",\"ENSMUSG00000064363\",\"ENSMUSG00000064364\",\"ENSMUSG00000064365\",\"ENSMUSG00000064366\",\"ENSMUSG00000064367\",\"ENSMUSG00000064368\",\"ENSMUSG00000064369\",\"ENSMUSG00000064370\",\"ENSMUSG00000064371\",\"ENSMUSG00000064372\",\"ENSMUSG00000065947\",\"ENSG00000198695\",\"ENSG00000198712\",\"ENSG00000198727\",\"ENSG00000198763\",\"ENSG00000198786\",\"ENSG00000198804\",\"ENSG00000198840\",\"ENSG00000198886\",\"ENSG00000198888\",\"ENSG00000198899\",\"ENSG00000198938\",\"ENSG00000209082\",\"ENSG00000210049\",\"ENSG00000210077\",\"ENSG00000210082\",\"ENSG00000210100\",\"ENSG00000210107\",\"ENSG00000210112\",\"ENSG00000210117\",\"ENSG00000210127\",\"ENSG00000210135\",\"ENSG00000210140\",\"ENSG00000210144\",\"ENSG00000210151\",\"ENSG00000210154\",\"ENSG00000210156\",\"ENSG00000210164\",\"ENSG00000210174\",\"ENSG00000210176\",\"ENSG00000210184\",\"ENSG00000210191\",\"ENSG00000210194\",\"ENSG00000210195\",\"ENSG00000210196\",\"ENSG00000211459\",\"ENSG00000212907\",\"ENSG00000228253\"]);\nmito.symbol = new Set([\"mt-Tf\",\"mt-Rnr1\",\"mt-Tv\",\"mt-Rnr2\",\"mt-Tl1\",\"mt-Nd1\",\"mt-Ti\",\"mt-Tq\",\"mt-Tm\",\"mt-Nd2\",\"mt-Tw\",\"mt-Ta\",\"mt-Tn\",\"mt-Tc\",\"mt-Ty\",\"mt-Co1\",\"mt-Ts1\",\"mt-Td\",\"mt-Co2\",\"mt-Tk\",\"mt-Atp8\",\"mt-Atp6\",\"mt-Co3\",\"mt-Tg\",\"mt-Nd3\",\"mt-Tr\",\"mt-Nd4\",\"mt-Th\",\"mt-Ts2\",\"mt-Tl2\",\"mt-Nd5\",\"mt-Nd6\",\"mt-Te\",\"mt-Cytb\",\"mt-Tt\",\"mt-Tp\",\"mt-Nd4l\",\"MT-ND6\",\"MT-CO2\",\"MT-CYB\",\"MT-ND2\",\"MT-ND5\",\"MT-CO1\",\"MT-ND3\",\"MT-ND4\",\"MT-ND1\",\"MT-ATP6\",\"MT-CO3\",\"MT-TL1\",\"MT-TF\",\"MT-TV\",\"MT-RNR2\",\"MT-TI\",\"MT-TQ\",\"MT-TM\",\"MT-TW\",\"MT-TA\",\"MT-TN\",\"MT-TC\",\"MT-TY\",\"MT-TS1\",\"MT-TD\",\"MT-TK\",\"MT-TG\",\"MT-TR\",\"MT-TH\",\"MT-TS2\",\"MT-TL2\",\"MT-TE\",\"MT-TT\",\"MT-TP\",\"MT-RNR1\",\"MT-ND4L\",\"MT-ATP8\"]);\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as qcutils from \"./utils/quality_control.js\";\nimport { mito } from \"./mito.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"quality_control\";\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, wrapping `computePerCellQCMetrics` and `computePerCellQCFilters` from [**scran.js**](https://github.com/jkanche/scran.js).\n * Note that the actual filtering is done by {@linkcode CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class QualityControlState extends qcutils.QualityControlStateBase {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        super();\n\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        return true;\n    }\n\n    skipped() {\n        return this.#parameters.skip;\n    }\n\n    fetchSums({ unsafe = false } = {}) {\n        // Unsafe, because we're returning a raw view into the Wasm heap,\n        // which might be invalidated upon further allocations.\n        return this.#cache.metrics.sums({ copy: !unsafe });\n    }\n\n    fetchDiscards() {\n        return this.#cache.filters.discardOverall({ copy: \"view\" });\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults () {\n        return {\n            skip: false,\n            use_mito_default: true,\n            mito_prefix: \"mt-\",\n            nmads: 3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {boolean} skip - Whether to skip the calculation of quality control statistics.\n     * @param {boolean} use_mito_default - Whether the internal mitochondrial gene lists should be used.\n     * @param {string} mito_prefix - Prefix of the identifiers for mitochondrial genes, when `use_mito_default = false`.\n     * @param {number} nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(skip, use_mito_default, mito_prefix, nmads) {\n        this.changed = false;\n\n        // If the metrics or filters aren't available and we're not skipping\n        // this step, then we need to recreate them.\n        let unskip_metrics = (!skip && !(\"metrics\" in this.#cache));\n        let unskip_filters = (!skip && !(\"filters\" in this.#cache));\n\n        if (this.#inputs.changed || use_mito_default !== this.#parameters.use_mito_default || mito_prefix !== this.#parameters.mito_prefix || unskip_metrics) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (skip) {\n                // Delete anything existing, as it won't be valid as other\n                // things have changed upstream of us. This ensures that we\n                // can re-run this step later via unskip_metrics = true.\n                delete this.#cache.metrics;\n            } else {\n                var mat = this.#inputs.fetchCountMatrix();\n\n                // TODO: add more choices.\n                var nsubsets = 1;\n                var subsets = utils.allocateCachedArray(mat.numberOfRows() * nsubsets, \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                // Finding the prefix.\n                // TODO: use the guessed features to narrow the Ensembl/symbol search.\n                var gene_info = this.#inputs.fetchGenes();\n                var sub_arr = subsets.array();\n                for (const [key, val] of Object.entries(gene_info)) {\n                    if (use_mito_default) {\n                        val.forEach((x, i) => {\n                            if (mito.symbol.has(x) || mito.ensembl.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else {\n                        var lower_mito = mito_prefix.toLowerCase();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                this.#cache.metrics = scran.computePerCellQCMetrics(mat, [subsets]);\n            }\n\n            this.#parameters.use_mito_default = use_mito_default;\n            this.#parameters.mito_prefix = mito_prefix;\n            this.changed = true;\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads || unskip_filters) {\n            utils.freeCache(this.#cache.filters);\n\n            if (skip) {\n                // Again, upstream is invalidated.\n                delete this.#cache.filters;\n            } else {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.computePerCellQCFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n            }\n\n            this.#parameters.nmads = nmads;\n            this.changed = true;\n        }\n\n        if (this.#parameters.skip !== skip) {\n            this.changed = true;\n            this.#parameters.skip = skip;\n        } else if (this.#parameters.skip && skip) {\n            this.changed = false; // there can never be any change if we were already skipping the results.\n        }\n\n        return;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    #format_metrics({ copy = true } = {}) {\n        return {\n            sums: this.#cache.metrics.sums({ copy: copy }),\n            detected: this.#cache.metrics.detected({ copy: copy }),\n            proportion: this.#cache.metrics.subsetProportions(0, { copy: copy })\n        };\n    }\n\n    #format_thresholds({ copy = true } = {}) {\n        return {\n            sums: this.#cache.filters.thresholdsSums({ copy: copy }),\n            detected: this.#cache.filters.thresholdsDetected({ copy: copy }),\n            proportion: this.#cache.filters.thresholdsSubsetProportions(0, { copy: copy })\n        }\n    }\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return {?object} \n     * An object is returned containing:\n     *\n     * - `data`: an object containing one property for each sample.\n     *   Each property is itself an object containing `sums`, `detected` and `proportion`,\n     *   which are TypedArrays containing the relevant QC metrics for all cells in that sample.\n     * - `thresholds`: an object containing one property for each sample.\n     *   Each property is itself an object containing `sums`, `detected` and `proportion`,\n     *   which are numbers containing the thresholds on the corresponding QC metrics for that sample.\n     * - `retained`: the number of cells remaining after QC filtering.\n     *\n     * Alternatively, `null` may be returned instead if there are no RNA features in the data,\n     * or if the QC was skipped (`skip = true` in {@linkcode QualityControlState#compute compute}).\n     */\n    summary() {\n        if (!this.valid() || this.skipped()) {\n            return null;\n        }\n\n        var output = {};\n\n        var blocks = this.#inputs.fetchBlockLevels();\n        if (blocks === null) {\n            blocks = [ \"default\" ];\n            output.data = { default: this.#format_metrics() };\n        } else {\n            let metrics = this.#format_metrics({ copy: \"view\" });\n            let bids = this.#inputs.fetchBlock();\n            output.data = qcutils.splitMetricsByBlock(metrics, blocks, bids);\n        }\n\n        let listed = this.#format_thresholds();\n        output.thresholds = qcutils.splitThresholdsByBlock(listed, blocks);\n\n        return output;\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\"); \n            phandle.writeDataSet(\"skip\", \"Uint8\", [], Number(this.#parameters.skip));\n            phandle.writeDataSet(\"use_mito_default\", \"Uint8\", [], Number(this.#parameters.use_mito_default));\n            phandle.writeDataSet(\"mito_prefix\", \"String\", [], this.#parameters.mito_prefix);\n            phandle.writeDataSet(\"nmads\", \"Float64\", [], this.#parameters.nmads);\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\"); \n\n            if (\"metrics\" in this.#cache) { // if skip=true, metrics may not be computed... but if they are, we save them anyway.\n                let mhandle = rhandle.createGroup(\"metrics\");\n                let data = this.#format_metrics({ copy: \"view\" });\n                mhandle.writeDataSet(\"sums\", \"Float64\", null, data.sums)\n                mhandle.writeDataSet(\"detected\", \"Int32\", null, data.detected);\n                mhandle.writeDataSet(\"proportion\", \"Float64\", null, data.proportion);\n            }\n\n            if (\"filters\" in this.#cache) { // if skip=true, thresholds may not be computed... but if they are, we save them anyway.\n                let thandle = rhandle.createGroup(\"thresholds\");\n                let thresholds = this.#format_thresholds({ copy: \"hdf5\" }); \n                for (const x of [ \"sums\", \"detected\", \"proportion\" ]) {\n                    let current = thresholds[x];\n                    thandle.writeDataSet(x, \"Float64\", null, current);\n                }\n\n                let disc = this.fetchDiscards();\n                rhandle.writeDataSet(\"discards\", \"Uint8\", null, disc);\n            }\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nclass QCFiltersMimic {\n    constructor(sums, detected, proportion, discards) {\n        this.sums_ = sums;\n        this.detected_ = detected;\n        this.proportion_ = proportion;\n\n        try {\n            this.discards = scran.createUint8WasmArray(discards.length);\n            this.discards.set(discards);\n        } catch (e) {\n            utils.freeCache(this.discards);\n            throw e;\n        }\n    }\n\n    thresholdsSums({ copy }) {\n        return utils.mimicGetter(this.sums_, copy);\n    }\n\n    thresholdsDetected({ copy }) {\n        return utils.mimicGetter(this.detected_, copy);\n    }\n\n    thresholdsSubsetProportions(index, { copy }) {\n        if (index != 0) {\n            throw \"only 'index = 0' is supported for mimics\";\n        }\n        return utils.mimicGetter(this.proportion_, copy);\n    }\n\n    discardOverall({ copy }) {\n        return utils.mimicGetter(this.discards, copy);\n    }\n\n    free() {\n        this.discards.free();\n    }\n}\n\nexport function unserialize(handle, inputs) {\n    let ghandle = handle.open(\"quality_control\");\n\n    let parameters = QualityControlState.defaults(); \n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.use_mito_default = phandle.open(\"use_mito_default\", { load: true }).values[0] > 0;\n        parameters.mito_prefix = phandle.open(\"mito_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n\n        if (\"skip\" in phandle.children) { // back-compatible.\n            parameters.skip = phandle.open(\"skip\", { load: true }).values[0] > 0;\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"metrics\" in rhandle.children) { // if skip=true, QC metrics may not be reported.\n            let mhandle = rhandle.open(\"metrics\");\n            let sums = mhandle.open(\"sums\", { load: true }).values;\n\n            cache.metrics = scran.emptyPerCellQCMetricsResults(sums.length, 1);\n            cache.metrics.sums({ copy: false }).set(sums);\n\n            let detected = mhandle.open(\"detected\", { load: true }).values;\n            cache.metrics.detected({ copy: false }).set(detected);\n            let proportions = mhandle.open(\"proportion\", { load: true }).values;\n            cache.metrics.subsetProportions(0, { copy: false }).set(proportions);\n        }\n\n        if (\"thresholds\" in rhandle.children) { // if skip=true, QC thresholds may not be reported.\n            let thandle = rhandle.open(\"thresholds\");\n            let thresholds_sums = thandle.open(\"sums\", { load: true }).values;\n            let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n            let thresholds_proportion = thandle.open(\"proportion\", { load: true }).values;\n\n            let discards = rhandle.open(\"discards\", { load: true }).values; \n            cache.filters = new QCFiltersMimic(\n                thresholds_sums, \n                thresholds_detected,\n                thresholds_proportion,\n                discards\n            );\n        }\n\n        output = new QualityControlState(inputs, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.metrics);\n        utils.freeCache(cache.filters)\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as qcutils from \"./utils/quality_control.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, wrapping `computePerCellAdtQcMetrics` and `computePerCellAdtQcFilters` from [**scran.js**](https://github.com/jkanche/scran.js).\n * Note that the actual filtering is done by {@linkcode CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState extends qcutils.QualityControlStateBase {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        super();\n\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n\n        this.#parameters.target_matrix = \"ADT\";\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#inputs.hasAvailable(this.#parameters.target_matrix);\n    }\n\n    skipped() {\n        return this.#parameters.skip;\n    }\n\n    fetchSums({ unsafe = false } = {}) {\n        // Unsafe, because we're returning a raw view into the Wasm heap,\n        // which might be invalidated upon further allocations.\n        return this.#cache.metrics.sums({ copy: !unsafe });\n    }\n\n    fetchDiscards() {\n        return this.#cache.filters.discardOverall({ copy: \"view\" });\n    }\n\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        delete output.target_matrix;\n        return output;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    useRNAMatrix() {\n        // For testing only!\n        this.#parameters.target_matrix = \"RNA\";\n        return;\n    }\n\n    static defaults() {\n        return {\n            skip: false,\n            igg_prefix: \"IgG\",\n            nmads: 3,\n            min_detected_drop: 0.1\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {boolean} skip - Whether to skip the calculation of quality control statistics.\n     * @param {string} igg_prefix - Prefix of the identifiers for isotype controls.\n     * @param {number} nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * @param {number} min_detected_drop - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(skip, igg_prefix, nmads, min_detected_drop) {\n        this.changed = false;\n\n        // If the metrics or filters aren't available and we're not skipping\n        // this step, then we need to run this.\n        let skip_impossible = skip || !this.valid();\n        let unskip_metrics = (!skip_impossible && !(\"metrics\" in this.#cache));\n        let unskip_filters = (!skip_impossible && !(\"filters\" in this.#cache));\n\n        if (this.#inputs.changed || igg_prefix !== this.#parameters.igg_prefix || unskip_metrics) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (skip_impossible) {\n                // Delete anything existing, as it won't be valid as other\n                // things have changed upstream of us. This ensures that we\n                // can re-run this step later via unskip_metrics = true.\n                delete this.#cache.metrics;\n            } else {\n                var mat = this.#inputs.fetchCountMatrix({ type: this.#parameters.target_matrix });\n                var gene_info = this.#inputs.fetchGenes({ type: this.#parameters.target_matrix });\n\n                // Finding the prefix.\n                var subsets = utils.allocateCachedArray(mat.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n                var sub_arr = subsets.array();\n                var lower_igg = igg_prefix.toLowerCase();\n                for (const [key, val] of Object.entries(gene_info)) {\n                    val.forEach((x, i) => { \n                        if (x.toLowerCase().startsWith(lower_igg)) {\n                            sub_arr[i] = 1;                        \n                        }\n                    });\n                }\n\n                this.#cache.metrics = scran.computePerCellAdtQcMetrics(mat, [subsets]);\n            }\n\n            this.#parameters.igg_prefix = igg_prefix;\n            this.changed = true;\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads || min_detected_drop !== this.#parameters.min_detected_drop || unskip_filters) {\n            utils.freeCache(this.#cache.filters);\n\n            if (skip_impossible) {\n                delete this.#cache.filters;\n            } else {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.computePerCellAdtQcFilters(this.#cache.metrics, { numberOfMADs: nmads, minDetectedDrop: min_detected_drop, block: block });\n            }\n\n            this.#parameters.nmads = nmads;\n            this.#parameters.min_detected_drop = min_detected_drop;\n            this.changed = true;\n        }\n\n        if (this.#parameters.skip !== skip) {\n            this.changed = true;\n            this.#parameters.skip = skip;\n        } else if (this.#parameters.skip && skip) {\n            this.changed = false; // force this to be true, no matter what.\n        }\n\n        return;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    #format_metrics({ copy = true } = {}) {\n        return {\n            sums: this.#cache.metrics.sums({ copy: copy }),\n            detected: this.#cache.metrics.detected({ copy: copy }),\n            igg_total: this.#cache.metrics.subsetTotals(0, { copy: copy })\n        };\n    }\n\n    #format_thresholds({ copy = true } = {}) {\n        return {\n            detected: this.#cache.filters.thresholdsDetected({ copy: copy }),\n            igg_total: this.#cache.filters.thresholdsSubsetTotals(0, { copy: copy })\n        }\n    }\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return {?object} \n     * If QC was not skipped, an object is returned containing:\n     *\n     * - `data`: an object containing one property for each sample.\n     *   Each property is itself an object containing `sums`, `detected` and `igg_total`,\n     *   which are TypedArrays containing the relevant QC metrics for all cells in that sample.\n     * - `thresholds`: an object containing one property for each sample.\n     *   Each property is itself an object containing `detected` and `igg_total`,\n     *   which are numbers containing the thresholds on the corresponding QC metrics for that sample.\n     * - `retained`: the number of cells remaining after QC filtering.\n     *\n     * Alternatively, `null` may be returned instead if there are no ADT features in the data,\n     * or if the QC was skipped (`skip = true` in {@linkcode AdtQualityControlState#compute compute}).\n     */\n    summary() {\n        if (!this.valid() || this.skipped()) {\n            return null;\n        }\n\n        var output = {};\n\n        var blocks = this.#inputs.fetchBlockLevels();\n        if (blocks === null) {\n            blocks = [ \"default\" ];\n            output.data = { default: this.#format_metrics() };\n        } else {\n            let metrics = this.#format_metrics({ copy: \"view\" });\n            let bids = this.#inputs.fetchBlock();\n            output.data = qcutils.splitMetricsByBlock(metrics, blocks, bids);\n        }\n\n        let listed = this.#format_thresholds();\n        output.thresholds = qcutils.splitThresholdsByBlock(listed, blocks);\n\n        // We don't use sums for filtering but we do report it in the metrics,\n        // so we just add some NaNs to the thresholds for consistency.\n        for (const [k, v] of Object.entries(output.thresholds)) {\n            v.sums = NaN;\n        }\n\n        return output;\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\"); \n            phandle.writeDataSet(\"skip\", \"Uint8\", [], Number(this.#parameters.skip));\n            phandle.writeDataSet(\"igg_prefix\", \"String\", [], this.#parameters.igg_prefix);\n            phandle.writeDataSet(\"nmads\", \"Float64\", [], this.#parameters.nmads);\n            phandle.writeDataSet(\"min_detected_drop\", \"Float64\", [], this.#parameters.min_detected_drop);\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\"); \n\n            if (\"metrics\" in this.#cache) { // if skip=true, metrics may not be computed... but if they are, we save them anyway.\n                let mhandle = rhandle.createGroup(\"metrics\");\n                let data = this.#format_metrics({ copy: \"view\" });\n                mhandle.writeDataSet(\"sums\", \"Float64\", null, data.sums)\n                mhandle.writeDataSet(\"detected\", \"Int32\", null, data.detected);\n                mhandle.writeDataSet(\"igg_total\", \"Float64\", null, data.igg_total);\n            }\n\n            if (\"filters\" in this.#cache) { // if skip=true, thresholds may not be reported... but if they are, we save them anyway.\n                let thandle = rhandle.createGroup(\"thresholds\");\n                let thresholds = this.#format_thresholds({ copy: \"hdf5\" }); \n                for (const x of [ \"detected\", \"igg_total\" ]) {\n                    let current = thresholds[x];\n                    thandle.writeDataSet(x, \"Float64\", null, current);\n                }\n\n                let disc = this.fetchDiscards();\n                rhandle.writeDataSet(\"discards\", \"Uint8\", null, disc);\n            }\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nclass AdtQcFiltersMimic {\n    constructor(detected, igg_total, discards) {\n        this.detected_ = detected;\n        this.igg_total_ = igg_total;\n        try {\n            this.discards = scran.createUint8WasmArray(discards.length);\n            this.discards.set(discards);\n        } catch (e) {\n            utils.freeCache(this.discards);\n            throw e;\n        }\n    }\n\n    thresholdsDetected({ copy }) {\n        return utils.mimicGetter(this.detected_, copy);\n    }\n\n    thresholdsSubsetTotals(index, { copy }) {\n        if (index != 0) {\n            throw \"only 'index = 0' is supported for mimics\";\n        }\n        return utils.mimicGetter(this.igg_total_, copy);\n    }\n\n    discardOverall({ copy }) {\n        return utils.mimicGetter(this.discards, copy);\n    }\n\n    free() {\n        this.discards.free();\n    }\n}\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = AdtQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.igg_prefix = phandle.open(\"igg_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n        parameters.min_detected_drop = phandle.open(\"min_detected_drop\", { load: true }).values[0];\n\n        if (\"skip\" in phandle.children) {\n            parameters.skip = phandle.open(\"skip\", { load: true }).values[0] > 0;\n        }\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellAdtQcMetricsResults(detected.length, 1);\n                cache.metrics.detected({ copy: false }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ copy: false }).set(sums);\n                let igg_total = mhandle.open(\"igg_total\", { load: true }).values;\n                cache.metrics.subsetTotals(0, { copy: false }).set(igg_total);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n                let thresholds_igg_total = thandle.open(\"igg_total\", { load: true }).values;\n\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.filters = new AdtQcFiltersMimic(\n                    thresholds_detected,\n                    thresholds_igg_total,\n                    discards\n                );\n            }\n\n            output = new AdtQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as qcutils from \"./utils/quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction findUsefulUpstreamStates(states, msg) {\n    let is_valid = utils.findValidUpstreamStates(states, msg);\n    let useful = [];\n    for (const v of is_valid) {\n        if (!states[v].skipped()) {\n            useful.push(v);\n        }\n    }\n    return useful;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells.\n * It wraps the `filterCells` function from [**scran.js**](https://github.com/jkanche/scran.js).\n * For multi-modal datasets, this combines the quality calls from all modalities; a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState\");\n        }\n        this.#inputs = inputs;\n\n        for (const v of Object.values(qc_states)) {\n            if (!(v instanceof qcutils.QualityControlStateBase)) {\n                throw new Error(\"'qc_states' should contain QualityControlStateBase objects\");\n            }\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    hasAvailable(type) {\n        if (\"matrix\" in this.#cache) {\n            return this.#cache.matrix.has(type);\n        } else {\n            return this.#inputs.hasAvailable(type);\n        }\n    }\n\n    fetchFilteredMatrix({ type = \"RNA\" } = {}) {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix.get(type);\n    }\n\n    /**\n     * Fetch the filtered vector of block assignments.\n     *\n     * @return An Int32WasmArray of length equal to the number of cells after filtering, containing the block assignment for each cell.\n     *\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    fetchDiscards() {\n        if (\"discard_buffer\" in this.#cache) {\n            return this.#cache.discard_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Fetch an annotation for the cells remaining after QC filtering.\n     *\n     * @param {string} col - Name of the annotation field of interest.\n     *\n     * @return {Array|TypedArray} Array of length equal to the number of filtered cells, containing the requested annotations.\n     */\n    fetchFilteredAnnotations(col) { \n        let vec = this.#inputs.fetchAnnotations(col);\n        if (\"discard_buffer\" in this.#cache) {\n            var discard = this.#cache.discard_buffer.array();\n            return vec.filter((x, i) => !discard[i]);\n        } else {\n            return vec;\n        }\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n        let available = this.#inputs.listAvailableTypes();\n        for (const a of available) {\n            let src = this.#inputs.fetchCountMatrix({ type: a });\n\n            let sub;\n            if (\"discard_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.discard_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"discard_buffer\" in this.#cache) {\n                // Filtering on the block.\n                let bcache = utils.allocateCachedArray(this.#cache.matrix.numberOfColumns(), \"Int32Array\", this.#cache, \"block_buffer\");\n                scran.filterBlock(block, this.#cache.discard_buffer, { buffer: bcache });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute() {\n        this.changed = false;\n\n        // Checking upstreams.\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n        for (const x of Object.values(this.#qc_states)) {\n            if (x.changed) {\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            let to_use = findUsefulUpstreamStates(this.#qc_states, \"QC\");\n\n            if (to_use.length > 0) {\n                let disc_buffer;\n                let first = this.#qc_states[to_use[0]].fetchDiscards();\n\n                if (to_use.length > 1) {\n                    // A discard signal in any modality causes the cell to be removed. \n                    disc_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"discard_buffer\");\n                    let disc_arr = disc_buffer.array();\n                    disc_arr.fill(0);\n\n                    for (const u of to_use) {\n                        this.#qc_states[u].fetchDiscards().forEach((y, i) => { disc_arr[i] |= y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    disc_buffer = first.view();\n                    utils.freeCache(this.#cache.discard_buffer);\n                    this.#cache.discard_buffer = disc_buffer;\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.discard_buffer);\n                delete this.#cache.discard_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /**\n     * Undo the effect of filtering on an array of indices.\n     * This is primarily useful for adjusting indices from downstream steps (e.g., {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices})\n     * so that it can be used in {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the pre-filtered matrix.\n     */\n    undoFiltering(indices) {\n        let discards = this.fetchDiscards();\n        if (discards !== null) {\n            let keep = [];\n            discards.forEach((x, i) => {\n                if (x == 0) {\n                    keep.push(i);\n                }\n            });\n            indices.forEach((x, i) => {\n                indices[i] = keep[x];\n            });\n        } \n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return {Object} An object containing:\n     *\n     * - `retained`: the number of cells retained after filtering out low-quality cells.\n     */\n    summary() {\n        let remaining = 0;\n        if (\"discard_buffer\" in this.#cache) {\n            this.#cache.discard_buffer.forEach(x => { remaining += (x == 0); });\n        } else {\n            let available = this.#inputs.hasAvailable();\n            remaining = this.#inputs.fetchCountMatrix(available[0]).numberOfColumns();\n        }\n        return { \"retained\": remaining };\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        ghandle.createGroup(\"parameters\"); // for tradition\n\n        let rhandle = ghandle.createGroup(\"results\"); \n\n        // If it's not present, then none of the upstream QC states applied\n        // any filtering, so we don't really have anything to do here.\n        if (\"discard_buffer\" in this.#cache) {\n            let disc = this.#cache.discard_buffer;\n\n            // If it's present and it's not a view, we save it; otherwise, we\n            // skip it, under the assumption that only one of the upstream QC\n            // states contains the discard vector.\n            if (disc.owner === null) {\n                rhandle.writeDataSet(\"discards\", \"Uint8\", null, disc);\n            }\n\n        }\n    }\n}\n\nexport function unserialize(handle, inputs, qc_states) {\n    let parameters = CellFilteringState.defaults();\n    let cache = {};\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"discards\" in rhandle.children) {\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n            }\n        } \n\n        if (!(\"discard_buffer\" in cache)) {\n            let to_use = findUsefulUpstreamStates(qc_states, \"QC\");\n\n            if (to_use.length == 1) {\n                // We figure out which upstream QC state contains the discard vector\n                // and create a view on it so that our discard_buffer checks work properly.\n                // (v1 and earlier also implicitly falls in this category.)\n                let use_state = qc_states[to_use[0]];\n                cache.discard_buffer = use_state.fetchDiscards().view();\n            } else if (to_use.length == 0) {\n                // No-op; we don't need to define discard_buffer.\n                ;\n            } else {\n                throw new Error(\"no more than one upstream QC state should be valid if 'discards' is not available\");\n            }\n        }\n\n        output = new CellFilteringState(inputs, qc_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.discard_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as utils from \"./general.js\";\n\nexport function subsetSums(qc, filter, mat, cache, name) {\n    if (qc.skipped()) {\n        return null;\n    }\n\n    let output = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache, name);\n    let discards = filter.fetchDiscards();\n\n    // unsafe, so no more Wasm allocations past this point. Unfortunately, we\n    // can't use copy: view here, because the sums in the QC state may not be a\n    // WasmArray if it's a reloaded mimic, in which case a copy: view request\n    // would fail.\n    let sums = qc.fetchSums({ unsafe: true }); \n\n    if (discards == null) {\n        output.set(sums);\n    } else {\n        let oarr = output.array();\n        var j = 0;\n        discards.forEach((x, i) => {\n            if (!x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                oarr[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n\nexport class NormalizationStateBase {}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the `logNormCounts` function from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NormalizationState extends nutils.NormalizationStateBase {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        super();\n\n        if (!(qc instanceof qc_module.QualityControlState)) {\n            throw new Error(\"'filt' should be a State object from './quality_control.js'\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filt' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sum_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return true;\n    }\n\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * Extract normalized expression values.\n     * @param {number} index - An integer specifying the row index to extract.\n     * @return A Float64Array of length equal to the number of (QC-filtered) cells, containing the log-normalized expression values for each cell.\n     */\n    fetchExpression(index) {\n        var mat = this.fetchNormalizedMatrix();\n        var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache); // re-using the buffer.\n        mat.row(index, { buffer: buffer });\n        return buffer.slice();\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix({ type: \"RNA\" });\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute() {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            this.changed = true;\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An empty object.\n     * This is just provided for consistency with the other classes.\n     */\n    summary() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        // Token effort.\n        let ghandle = handle.createGroup(\"normalization\");\n        ghandle.createGroup(\"parameters\"); \n        ghandle.createGroup(\"results\"); \n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new NormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain AdtQualityControlState}.\n * It wraps the `groupedSizeFactors` and `logNormCounts` functions from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState extends nutils.NormalizationStateBase {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        super();\n\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n\n        this.#parameters.target_matrix = \"ADT\";\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.exp_buffer);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#filter.hasAvailable(this.#parameters.target_matrix);\n    }\n\n    fetchNormalizedMatrix() {\n        if (this.valid()) {\n            if (!(\"matrix\" in this.#cache)) {\n                this.#raw_compute();\n            }\n            return this.#cache.matrix;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Extract normalized expression values.\n     * @param {number} index - An integer specifying the row index to extract.\n     * @return A Float64Array of length equal to the number of (QC-filtered) cells, containing the log-normalized expression values for each cell.\n     */\n    fetchExpression(index) {\n        var mat = this.fetchNormalizedMatrix();\n        var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"exp_buffer\"); // re-using the buffer.\n        mat.row(index, { buffer: buffer });\n        return buffer.slice();\n    }\n\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        delete output.target_matrix;\n        return output;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    useRNAMatrix() {\n        // For testing only!\n        this.#parameters.target_matrix = \"RNA\";\n        return;\n    }\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix({ type: this.#parameters.target_matrix });\n        var block = this.#filter.fetchFilteredBlock();\n\n        var buffer = this.#cache.sf_buffer;\n        if (buffer.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {number} num_pcs - Number of PCs to use for creating a low-dimensional embedding for clustering.\n     * @param {number} num_clusters - Number of clusters to create with k-means clustering.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(num_pcs, num_clusters) {\n        this.changed = false;\n\n        if (this.#qc.changed || this.#filter.changed || num_pcs !== this.#parameters.num_pcs || num_clusters != this.#parameters.num_clusters) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix({ type: this.#parameters.target_matrix });\n                let total_buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"total_buffer\");\n\n                var block = this.#filter.fetchFilteredBlock();\n                var sf_buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"sf_buffer\");\n                scran.quickAdtSizeFactors(mat, { totals: total_buffer, block: block, buffer: sf_buffer, numberOfPCs: num_pcs, numberOfClusters: num_clusters });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.num_clusters = num_clusters;\n        } \n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n           num_pcs: 25,\n           num_clusters: 20\n        };\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return {?object} Object containing `size_factors`, a Float64Array containing the size factor for each cell.\n     *\n     * If there were no ADT features in the dataset, `null` is returned instead.\n     */\n    summary() {\n        if (!this.valid()) {\n            return null;\n        }\n\n        return {\n            size_factors: this.#cache.sf_buffer.slice()\n        };\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        phandle.writeDataSet(\"num_pcs\", \"Int32\", [], this.#parameters.num_pcs);\n        phandle.writeDataSet(\"num_clusters\", \"Int32\", [], this.#parameters.num_clusters);\n\n        let rhandle = ghandle.createGroup(\"results\"); \n        if (this.valid()) {\n            rhandle.writeDataSet(\"size_factors\", \"Float64\", null, this.#cache.sf_buffer);\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    let cache = {};\n    let parameters = AdtNormalizationState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\");\n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.num_clusters = phandle.open(\"num_clusters\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n            \n            if (\"size_factors\" in rhandle.children) {\n                let sf = rhandle.open(\"size_factors\", { load: true }).values;\n                cache.sf_buffer = scran.createFloat64WasmArray(sf.length);\n                cache.sf_buffer.set(sf);\n            }\n\n            output = new AdtNormalizationState(qc, filter, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.sf_buffer);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtNormalizationState(qc, filter, parameters, cache);\n    }\n\n    return output;\n}\n","import * as cluster from \"./clusterKmeans.js\";\nimport * as lognorm from \"./logNormCounts.js\";\nimport * as grouped from \"./groupedSizeFactors.js\";\nimport * as pca from \"./runPCA.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Quickly compute size factors for an ADT count matrix.\n * This generates k-means clusters from a matrix of PCs before calling {@linkcode groupedSizeFactors}.\n * The aim is to account for composition biases that are common in ADT-based data, while avoiding problems with per-cell sparsity.\n *\n * @param {ScranMatrix} x - An ADT count matrix.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.numberOfClusters=20] - Number of clusters to create.\n * More clusters improves the accuracy of the size factors at the cost of precision.\n * @param {number} [options.numberOfPCs=25] - Number of PCs to use.\n * More PCs captures more biological signal at the cost of increasing noise.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.totals=null] - Array containing the total count for each column in `x`.\n * If `null`, this is computed from `x`.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Blocking level for each column in `x`, see {@linkcode logNormCounts}.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to the number of columns in `x`.\n * If `null`, an array is allocated by the function.\n * \n * @return {Float64WasmArray} Per-cell size factors for each column of `x`.\n *\n * If `buffer` is supplied, it is directly used as the return value.\n */\nexport function quickAdtSizeFactors(x, { numberOfClusters = 20, numberOfPCs = 25, totals = null, block = null, buffer = null } = {}) {\n    let norm, pcs;\n    try {\n        norm = lognorm.logNormCounts(x, { sizeFactors: totals, block: block });\n        pcs = pca.runPCA(norm, { numberOfPCs: Math.min(norm.numberOfRows() - 1, numberOfPCs) });\n    } finally {\n        utils.free(norm);\n    }\n\n    let clust;\n    try {\n        clust = cluster.clusterKmeans(pcs, numberOfClusters);\n    } finally {\n        utils.free(pcs);\n    }\n\n    let local_buffer;\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' should be equal to the number of columns in 'x'\");\n        }\n        grouped.groupedSizeFactors(x, clust.clusters({ copy: \"view\" }), { buffer: buffer });\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(clust);\n    }\n\n    return buffer;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./general.js\";\n\nexport function formatPCs(pcs) {\n    return {\n        \"pcs\": pcs.principalComponents({ copy: \"view\" }),\n        \"num_pcs\": pcs.numberOfPCs(),\n        \"num_obs\": pcs.numberOfCells()\n    };\n}\n\nexport function formatSummary(pcs) {\n    var var_exp = pcs.varianceExplained();\n    var total_var = pcs.totalVariance();\n    var_exp.forEach((x, i) => {\n        var_exp[i] = x/total_var;\n    });\n    return { \n        \"var_exp\": var_exp \n    };\n}\n\nexport class PcaStateBase {}\n\nexport class PcaMimic { \n    constructor(pcs, var_exp) {\n        this.var_exp = var_exp;\n        try {\n            this.pcs = scran.createFloat64WasmArray(pcs.length);\n            this.pcs.set(pcs);\n        } catch (e) {\n            utils.freeCache(this.pcs);\n            throw e;\n        }\n    }\n\n    principalComponents({ copy }) {\n        return utils.mimicGetter(this.pcs, copy);\n    }\n\n    numberOfCells() {\n        return this.pcs.length / this.numberOfPCs();\n    }\n\n    numberOfPCs() {\n        return this.var_exp.length;\n    }\n\n    varianceExplained({ copy = true } = {}) {\n        return utils.mimicGetter(this.var_exp, copy);\n    }\n\n    totalVariance () {\n        return 1;\n    }\n\n    free() {\n        this.pcs.free();\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./normalization.js\";\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the `modelGeneVar` function from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.NormalizationState)) {\n            throw new Error(\"'norm' should be a State object from './normalization.js'\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    fetchResiduals({ unsafe = false } = {}) {\n        return this.#cache.results.residuals({ copy: !unsafe });\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n \n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {number} span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(span) {\n        this.changed = false;\n        \n        if (this.#norm.changed || span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            let mat = this.#norm.fetchNormalizedMatrix();\n            let block = this.#filter.fetchFilteredBlock();\n            this.#cache.results = scran.modelGeneVar(mat, { span: span, block: block });\n\n            this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n            this.#cache.sorted_residuals.sort();\n\n            this.#parameters.span = span;\n            this.changed = true;\n        }\n\n        return;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    #format_results({ copy = true } = {}) {\n        return {\n            \"means\": this.#cache.results.means({ copy: copy }),\n            \"vars\": this.#cache.results.variances({ copy: copy }),\n            \"fitted\": this.#cache.results.fitted({ copy: copy }),\n            \"resids\": this.#cache.results.residuals({copy: copy })\n        };\n    }\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An object containing:\n     *\n     * - `means`: a Float64Array containing the mean log-expression for each gene.\n     * - `vars`: a Float64Array containing the variance in log-expression for each gene.\n     * - `fitted`: a Float64Array containing the fitted value of the mean-variance trend for each gene.\n     * - `resids`: a Float64Array containing the residuals from the mean-variance trend for each gene.\n     */\n    summary() {\n        return this.#format_results();\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(\"feature_selection\");\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\"); \n            phandle.writeDataSet(\"span\", \"Float64\", [], this.#parameters.span);\n        }\n\n        {\n            let res = this.#format_results({ copy: \"hdf5\" }); \n            let rhandle = ghandle.createGroup(\"results\"); \n            for (const [k, v] of Object.entries(res)) {\n                rhandle.writeDataSet(k, \"Float64\", null, v);\n            }\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nclass ModelGeneVarMimic {\n    constructor(means, vars, fitted, resids) {\n        this.means_ = means;\n        this.vars_ = vars;\n        this.fitted_ = fitted;\n        this.resids_ = resids;\n    }\n\n    means({copy}) {\n        return utils.mimicGetter(this.means_, copy);\n    }\n\n    variances({copy}) {\n        return utils.mimicGetter(this.vars_, copy);\n    }\n\n    fitted({copy}) {\n        return utils.mimicGetter(this.fitted_, copy);\n    }\n\n    residuals({copy}) {\n        return utils.mimicGetter(this.resids_, copy);\n    }\n\n    free() {}\n}\n\nexport function unserialize(handle, permuter, filter, norm) {\n    let ghandle = handle.open(\"feature_selection\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            span: phandle.open(\"span\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        let reloaded = {};\n\n        // Possibly permuting it to match the new permutation order;\n        // see 'unserialize' in 'inputs.js'.\n        for (const key of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n            let value = rhandle.open(key, { load: true }).values;\n            permuter(value);\n            reloaded[key] = value;\n        }\n\n        cache.results = new ModelGeneVarMimic(reloaded.means, reloaded.vars, reloaded.fitted, reloaded.resids);\n    }\n\n    cache.sorted_residuals = cache.results.residuals({ copy: true });\n    cache.sorted_residuals.sort();\n\n    return new FeatureSelectionState(filter, norm, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as putils from \"./utils/pca.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the `runPCA` function from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class PcaState extends putils.PcaStateBase {\n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        super();\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.NormalizationState)) {\n            throw new Error(\"'norm' should be a State object from './normalization.js'\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a State object from './feature_selection.js'\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return true;\n    }\n\n    fetchPCs() {\n        return putils.formatPCs(this.#cache.pcs);\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `pca` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {number} num_pcs - Number of PCs to return.\n     * @param {number} num_hvgs - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(num_hvgs, num_pcs, block_method) {\n        this.changed = false;\n\n        if (this.#feat.changed || num_hvgs !== this.#parameters.num_hvgs) {\n            choose_hvgs(num_hvgs, this.#feat, this.#cache);\n            this.#parameters.num_hvgs = num_hvgs;\n            this.changed = true;\n        }\n\n        if (this.changed || this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            let sub = this.#cache.hvg_buffer;\n            let block = this.#filter.fetchFilteredBlock();\n            var mat = this.#norm.fetchNormalizedMatrix();\n            utils.freeCache(this.#cache.pcs);\n            this.#cache.pcs = scran.runPCA(mat, { features: sub, numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n            this.changed = true;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An object containing:\n     *\n     * - `var_exp`: a `Float64Array` of length equal to `num_pcs`, containing the proportion of variance explained for each successive PC.\n     */\n    summary() {\n        return putils.formatSummary(this.#cache.pcs);\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\"); \n            phandle.writeDataSet(\"num_hvgs\", \"Int32\", [], this.#parameters.num_hvgs);\n            phandle.writeDataSet(\"num_pcs\", \"Int32\", [], this.#parameters.num_pcs);\n            phandle.writeDataSet(\"block_method\", \"String\", [], this.#parameters.block_method);\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n\n            let ve = this.summary().var_exp;\n            rhandle.writeDataSet(\"var_exp\", \"Float64\", null, ve);\n\n            let pcs = this.fetchPCs();\n            rhandle.writeDataSet(\"pcs\", \"Float64\", [pcs.num_obs, pcs.num_pcs], pcs.pcs); // remember, it's transposed.\n        }\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResiduals({ unsafe: true });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm, feat) {\n    let ghandle = handle.open(step_name);\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters = { \n            num_hvgs: phandle.open(\"num_hvgs\", { load: true }).values[0],\n            num_pcs: phandle.open(\"num_pcs\", { load: true }).values[0]\n        };\n\n        // For back-compatibility.\n        if (\"block_method\" in phandle.children) {\n            parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n            if (parameters.block_method == \"mnn\") {\n                parameters.block_method = \"weight\";\n            }\n        } else {\n            parameters.block_method = \"none\";\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        choose_hvgs(parameters.num_hvgs, feat, cache);\n\n        let rhandle = ghandle.open(\"results\");\n        let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n        let pcs = rhandle.open(\"pcs\", { load: true }).values;\n        cache.pcs = new putils.PcaMimic(pcs, var_exp);\n\n        output = new PcaState(filter, norm, feat, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.hvg_buffer);\n        utils.freeCache(cache.pcs);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as putils from \"./utils/pca.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the `runPCA` function from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState extends putils.PcaStateBase {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        super();\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    fetchPCs() {\n        if (this.valid()) {\n            return putils.formatPCs(this.#cache.pcs);\n        } else {\n            return null;\n        }\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `pca` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {number} num_pcs - Number of PCs to return.\n     * @param {string} block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(num_pcs, block_method) {\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return {?object}\n     * An object containing:\n     *\n     * - `var_exp`: a `Float64Array` of length equal to `num_pcs`, containing the proportion of variance explained for each successive PC.\n     *\n     * If there were no ADT features in the dataset, `null` is returned instead.\n     */\n    summary() {\n        if (this.valid()) {\n            return putils.formatSummary(this.#cache.pcs);\n        } else {\n            return null;\n        }\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\"); \n            phandle.writeDataSet(\"num_pcs\", \"Int32\", [], this.#parameters.num_pcs);\n            phandle.writeDataSet(\"block_method\", \"String\", [], this.#parameters.block_method);\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n\n            if (this.valid()) {\n                let ve = this.summary().var_exp;\n                rhandle.writeDataSet(\"var_exp\", \"Float64\", null, ve);\n\n                let pcs = this.fetchPCs();\n                rhandle.writeDataSet(\"pcs\", \"Float64\", [pcs.num_obs, pcs.num_pcs], pcs.pcs); // remember, it's transposed.\n            }\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = AdtPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n                let pcs = rhandle.open(\"pcs\", { load: true }).values;\n                cache.pcs = new putils.PcaMimic(pcs, var_exp);\n            }\n\n            output = new AdtPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new AdtPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as putils from \"./utils/pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the `scaleByNeighbors` function from [**scran.js**](https://jkanche.com/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        for (const x of Object.values(pca_states)) {\n            if (!(x instanceof putils.PcaStateBase)) {\n                throw new Error(\"each entry of 'pc_states' should be a PcaStateBase object\");\n            }\n        }\n        this.#pca_states = pca_states;\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchPCs() {\n        return {\n            \"pcs\": this.#cache.combined_buffer,\n            \"num_obs\": this.#cache.num_cells,\n            \"num_pcs\": this.#cache.total_dims\n        };\n    }\n\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        let out = { ...this.#parameters };\n        if (out.weights !== null) {\n            out.weights = { ...out.weights };\n        }\n        return out;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return { \n            weights: null,\n            approximate: true\n        };\n    }\n\n    static createPcsView(cache, upstream) {\n        utils.freeCache(cache.combined_buffer);\n        cache.combined_buffer = upstream.pcs.view();\n        cache.num_cells = upstream.num_obs;\n        cache.total_dims = upstream.num_pcs;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {?Object} weights - Object containing the weights for each modality.\n     * Keys should be the name of the modality (e.g., `\"RNA\"`, `\"ADT\"`) while values should be non-negative numbers.\n     * Alternatively, if `null`, all modalities are given equal weight.\n     * @param {boolean} approximate - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(weights, approximate) {\n        this.changed = false;\n\n        for (const [k, v] of Object.entries(this.#pca_states)) {\n            if (v.changed) { // include possible changes from valid to invalid.\n                this.changed = true;\n            }\n        }\n        let to_use = utils.findValidUpstreamStates(this.#pca_states, \"PCA\");\n        let needs_combining = to_use.length > 1;\n\n        if (needs_combining) {\n            if (this.changed || approximate !== this.#parameters.approximate || utils.changedParameters(weights, this.#parameters.weights)) {\n                let weight_arr = null;\n\n                if (weights !== null) {\n                    weight_arr = [];\n                    let has_pos_weight = [];\n\n                    for (const x of to_use) {\n                        if (!(x in weights)) {\n                            throw new Error(\"no weight specified for '\" + x + \"'\");\n                        }\n                        if (weights[x] > 0) {\n                            weight_arr.push(weights[x]);\n                            has_pos_weight.push(x);\n                        }\n                    }\n\n                    to_use = has_pos_weight;\n                }\n\n                if (to_use.length == 1) {\n                    // If only one modality has positive weight,\n                    // we can skip the calculation of combined embeddings.\n                    let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                    this.constructor.createPcsView(this.#cache, pcs);\n\n                } else {\n                    let collected = [];\n                    let total = 0;\n                    let ncells = null;\n\n                    for (const k of to_use) {\n                        let curpcs = this.#pca_states[k].fetchPCs();\n                        collected.push(curpcs.pcs);\n                        if (ncells == null) {\n                            ncells = curpcs.num_obs;\n                        } else if (ncells !== curpcs.num_obs) {\n                            throw new Error(\"number of cells should be consistent across all embeddings\");\n                        }\n                        total += curpcs.num_pcs;\n                    }\n\n                    let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                    scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: approximate });\n                    this.#cache.num_cells = ncells;\n                    this.#cache.total_dims = total;\n                }\n\n                this.changed = true;\n            }\n        } else {\n            if (this.changed) {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                this.constructor.createPcsView(this.#cache, pcs);\n            }\n        }\n\n        // Updating all parameters anyway. This requires us to take ownership\n        // of 'weights' to avoid pass-by-reference shenanigans.\n        if (weights !== null) {\n            weights = { ...weights };\n        }\n        this.#parameters.weights = weights;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    summary() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\"); \n            phandle.writeDataSet(\"approximate\", \"Uint8\", [], this.#parameters.approximate);\n            let whandle = phandle.createGroup(\"weights\");\n            if (this.#parameters.weights !== null) {\n                for (const [k, v] of Object.entries(this.#parameters.weights)) {\n                    whandle.writeDataSet(k, \"Float64\", [], v);\n                }\n            }\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n            let pcs = this.fetchPCs();\n            if (pcs.pcs.owner === null) {\n                // If it's not a view, we save it; otherwise we assume\n                // that we can recover it from the upstream PCA states.\n                rhandle.writeDataSet(\"combined\", \"Float64\", [pcs.num_obs, pcs.num_pcs], pcs.pcs); // remember, it's transposed.\n            }\n        }\n    }\n}\n\nexport function unserialize(handle, pca_states) {\n    let cache = {};\n    let parameters = CombineEmbeddingsState.defaults();\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            {\n                let phandle = ghandle.open(\"parameters\");\n                parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n                let whandle = phandle.open(\"weights\");\n                let keys = Object.keys(whandle.children);\n\n                // If it's empty, we just use the default of null.\n                if (keys.length) {\n                    parameters.weights = {};\n                    for (const k of keys) {\n                        parameters.weights[k] = whandle.open(k, { load: true }).values[0];\n                    }\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"combined\" in rhandle.children) {\n                let phandle = rhandle.open(\"combined\", { load: true });\n                cache.num_cells = phandle.shape[0];\n                cache.total_dims = phandle.shape[1];\n\n                let vals = phandle.values;\n                cache.combined_buffer = scran.createFloat64WasmArray(vals.length);\n                cache.combined_buffer.set(vals);\n            }\n        }\n\n        if (!(\"combined_buffer\" in cache)) {\n            // This only happens if there was only one upstream PCA state; in which case, \n            // we figure out which upstream PCA state contains the PC vector\n            // and create a view on it so that our fetchPCs() works properly.\n            // (v1 and earlier also implicitly falls in this category.)\n\n            let to_use = utils.findValidUpstreamStates(pca_states, \"PCA\");\n\n            if (to_use.length > 1 && parameters.weights !== null) {\n                let has_nonzero_weight = [];\n                for (const k of to_use) {\n                    if (parameters.weights[k] > 0) {\n                        has_nonzero_weight.push(k);\n                    }\n                }\n                to_use = has_nonzero_weight;\n            }\n\n            if (to_use.length != 1) {\n                throw new Error(\"only one upstream PCA state should be valid with non-zero weight if 'combined' is not available\");\n            }\n\n            let pcs = pca_states[to_use[0]].fetchPCs();\n            CombineEmbeddingsState.createPcsView(cache, pcs);\n        }\n\n        output = new CombineEmbeddingsState(pca_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.combined_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { buildNeighborSearchIndex, BuildNeighborSearchIndexResults } from \"./findNearestNeighbors.js\"; \n\n/**\n * Scale embeddings based on the variation between neighboring cells.\n * This aims to equalize the noise across embeddings for the same population of cells across different data modalities,\n * allowing them to be combined into a single embedding for coordinated downstream analyses.\n *\n * @param {Array} embeddings - Array of Float64WasmArrays containing column-major matrices where rows are dimensions and columns are cells.\n * All entries of this array should contain data for the same number and ordering of cells.\n * @param {number} numberOfCells - Number of cells in all embeddings.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.neighbors=20] - Number of neighbors to use for quantifying variation.\n * Larger values provide a more stable calculation but assume larger subpopulations.\n * @param {?Array} [options.indices=null] - Array of {@linkplain BuildNeighborSearchIndexResults} objects, \n * where each entry is constructed from the corresponding entry of `embeddings` (see {@linkcode buildNeighborSearchIndex}).\n * This can be used to avoid redundant calculation of indices if they are already available.\n * @param {?Float64WasmArray} [options.buffer=null] - Array in which to store the combined embedding.\n * This should have length equal to the product of `numberOfCells` and the sum of dimensions of all embeddings.\n * @param {boolean} [options.approximate=true] - Should we construct an approximate search index if `indices` is not supplied?\n * @param {?(Array|TypedArray|Float64WasmArray)} [options.weights=null] - Array of length equal to the number of embeddings, containing a non-enegative relative weight for each embedding.\n * This is used to scale each embedding if non-equal noise is desired in the combined embedding.\n * If `null`, all embeddings receive the same weight.\n *\n * @return {Float64WasmArray} Array containing the combined embeddings in column-major format, i.e., dimensions in rows and cells in columns.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function scaleByNeighbors(embeddings, numberOfCells, { neighbors = 20, indices = null, buffer = null, approximate = true, weights = null } = {}) {\n    let nembed = embeddings.length;\n    let embed_ptrs, index_ptrs;\n    let holding_ndims;\n    let holding_weights;\n    let local_buffer;\n\n    let deletable = [];\n    try {\n        // Fetching the pointers.\n        embed_ptrs = utils.createBigUint64WasmArray(nembed);\n        let embed_arr = embed_ptrs.array();\n        for (var i = 0; i < nembed; i++) {\n            embed_arr[i] = BigInt(embeddings[i].offset);\n        }\n\n        let weight_offset = 0;\n        let use_weights = false;\n        if (weights !== null) {\n            use_weights = true;\n            holding_weights = utils.wasmifyArray(weights, \"Float64WasmArray\");\n            if (holding_weights.length != nembed) {\n                throw new Error(\"length of 'weights' should be equal to the number of embeddings\");\n            }\n            weight_offset = holding_weights.offset;\n        }\n\n        // Allocating output space, if necessary; and then scaling.\n        let allocator = (total_ndim) => {\n            let total_len = total_ndim * numberOfCells;\n            if (buffer === null) {\n                local_buffer = utils.createFloat64WasmArray(total_len);\n                buffer = local_buffer;\n            } else if (total_len !== buffer.length) {\n                throw new Error(\"length of 'buffer' should be equal to the product of 'numberOfCells' and the total number of dimensions\");\n            }\n        }\n\n        if (indices !== null) {\n            if (nembed !== indices.length) {\n                throw new Error(\"'indices' and 'embeddings' should have the same length\");\n            }\n\n            index_ptrs = utils.createBigUint64WasmArray(nembed);\n            let index_arr = index_ptrs.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let index = indices[i];\n                if (numberOfCells != index.numberOfCells()) {\n                    throw new Error(\"each element of 'indices' should have the same number of cells as 'numberOfCells'\");\n                }\n                if (embeddings[i].length != index.numberOfCells() * index.numberOfDims()) {\n                    throw new Error(\"length of arrays in 'embeddings' should equal the length of arrays used to build 'indices'\");\n                }\n\n                index_arr[i] = BigInt(indices[i].index.$$.ptr);\n                total_ndim += indices[i].numberOfDims();\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_indices(\n                numberOfCells, \n                nembed, \n                embed_ptrs.offset, \n                index_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset\n            ));\n        } else {\n            holding_ndims = utils.createInt32WasmArray(nembed);\n            let ndims_arr = holding_ndims.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let n = embeddings[i].length;\n                ndims_arr[i] = Math.floor(n / numberOfCells);\n                if (numberOfCells * ndims_arr[i] !== n) {\n                    throw new Error(\"length of arrays in 'embeddings' should be a multiple of 'numberOfCells'\");\n                }\n                total_ndim += ndims_arr[i];\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_matrices(\n                numberOfCells, \n                nembed, \n                holding_ndims.offset, \n                embed_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                approximate\n            ));\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        for (const x of deletable) {\n            x.free();\n        }\n        utils.free(embed_ptrs);\n        utils.free(index_ptrs);\n        utils.free(holding_weights);\n        utils.free(holding_ndims);\n    }\n\n    return buffer;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the `mnnCorrect` function from [**scran.js**](https://jkanche.com/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchPCs() {\n        let upstream = this.#combined.fetchPCs();\n        upstream.pcs = this.#cache.corrected;\n        return upstream;\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * @param {string} method - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * @param {number} num_neighbors - Number of neighbors to use during MNN correction.\n     * @param {boolean} approximate - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(method, num_neighbors, approximate) {\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (method == \"mnn\" && block !== null);\n\n        if (this.changed || method !== this.#parameters.method || num_neighbors !== this.#parameters.num_neighbors || approximate !== this.#parameters.approximate) { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchPCs();\n                let corrected = utils.allocateCachedArray(pcs.pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs.pcs, block, { k: num_neighbors, buffer: corrected, numberOfCells: pcs.num_obs, numberOfDims: pcs.num_pcs, approximate: approximate });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                let upstream = this.#combined.fetchPCs();\n                this.#cache.corrected = upstream.pcs.view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters.method = method;\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n\n    /**************************\n     ******** Results**********\n     **************************/\n\n    summary() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\"); \n            phandle.writeDataSet(\"method\", \"String\", [], this.#parameters.method);\n            phandle.writeDataSet(\"num_neighbors\", \"Int32\", [], this.#parameters.num_neighbors);\n            phandle.writeDataSet(\"approximate\", \"Uint8\", [], Number(this.#parameters.approximate));\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n            let pcs = this.fetchPCs();\n            if (pcs.pcs.owner === null) {\n                // If it's not a view, we save it; otherwise we assume\n                // that we can recover it from the upstream state.\n                rhandle.writeDataSet(\"corrected\", \"Float64\", [pcs.num_obs, pcs.num_pcs], pcs.pcs); // remember, it's transposed.\n            }\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, combined) {\n    let cache = {};\n    let parameters = BatchCorrectionState.defaults();\n    let output;\n    \n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.method = phandle.open(\"method\", { load: true }).values[0];\n        parameters.num_neighbors = phandle.open(\"num_neighbors\", { load: true }).values[0];\n        parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"corrected\" in rhandle.children) {\n                let corrected = rhandle.open(\"corrected\", { load: true }).values;\n                cache.corrected = scran.createFloat64WasmArray(corrected.length);\n                cache.corrected.set(corrected);\n            } else {\n                // Creating a view from the upstream combined state.\n                let pcs = combined.fetchPCs();\n                cache.corrected = pcs.pcs.view();\n            }\n\n            output = new BatchCorrectionState(filter, combined, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.corrected);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        let ghandle = handle.open(\"pca\");\n\n        let rhandle = ghandle.open(\"results\");\n        if (\"corrected\" in rhandle) {\n            let corrected = rhandle.open(\"corrected\", { load: true }).values;\n            let corbuffer = utils.allocateCachedArray(corrected.length, \"Float64Array\", cache, \"corrected\");\n            corbuffer.set(corrected);\n        }\n\n        output = new BatchCorrectionState(filter, combined, parameters, cache);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as pca from \"./runPCA.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Perform mutual nearest neighbor (MNN) correction on a low-dimensional representation.\n * This is primarily used to remove batch effects.\n *\n * @param {(RunPCAResults|TypedArray|Array|Float64WasmArray)} x - A matrix of low-dimensional results where rows are dimensions and columns are cells.\n * If this is a {@linkplain RunPCAResults} object, the PCs are automatically extracted.\n * Otherwise, the matrix should be provided as an array in column-major form, with specification of `numberOfDims` and `numberOfCells`.\n * @param {(Int32WasmArray|Array|TypedArray)} block - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform normalization within each block.\n * @param {object} [options] - Further optional parameters.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer of length equal to the product of the number of cells and dimensions,\n * to be used to store the corrected coordinates for each cell.\n * If `null`, this is allocated and returned by the function.\n * @param {?number} [options.numberOfDims=null] - Number of dimensions in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {?number} [options.numberOfCells=null] - Number of cells in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {number} [options.k=15] - Number of neighbors to use in the MNN search. \n * @param {number} [options.numberOfMADs=3] - Number of MADs to use to define the threshold on the distances to the neighbors,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustIterations=2] - Number of robustness iterations to use for computing the center of mass,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustTrim=0.25] - Proportion of furthest observations to remove during robustness iterations, \n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {string} [options.referencePolicy=\"max-size\"] - What policy to use to choose the first reference batch.\n * This can be the largest batch (`\"max-size\"`), the most variable batch (`\"max-variance\"`), the batch with the highest RSS (`\"max-rss\"`) or batch 0 in `block` (`\"input\"`).\n * @param {boolean} [options.approximate=true] - Whether to perform an approximate nearest neighbor search.\n *\n * @return {Float64WasmArray} Array of length equal to `x`, containing the batch-corrected low-dimensional coordinates for all cells.\n * Values are organized using the column-major layout.\n * This is equal to `buffer` if provided.\n */\nexport function mnnCorrect(x, block, { \n    buffer = null, \n    numberOfDims = null,\n    numberOfCells = null,\n    k = 15,\n    numberOfMADs = 3, \n    robustIterations = 2, \n    robustTrim = 0.25,\n    referencePolicy = \"max-size\",\n    approximate = true\n} = {}) {\n\n    let local_buffer;\n    let x_data;\n    let block_data;\n\n    try {\n        if (x instanceof pca.RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            x = x.principalComponents({ copy: \"view\" });\n        } else {\n            if (numberOfDims === null || numberOfCells === null || numberOfDims * numberOfCells !== x.length) {\n                throw new Error(\"length of 'x' must be equal to the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n            x_data = utils.wasmifyArray(x, \"Float64WasmArray\");\n            x = x_data;\n        }\n\n        if (buffer == null) {\n            local_buffer = utils.createFloat64WasmArray(numberOfCells * numberOfDims);\n            buffer = local_buffer;\n        } else if (buffer.length !== x.length) {\n            throw new Error(\"length of 'buffer' must be equal to the product of the number of dimensions and cells\");\n        }\n\n        block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n        if (block_data.length != numberOfCells) {\n            throw new Error(\"'block' must be of length equal to the number of cells in 'x'\");\n        }\n\n        wasm.call(module => module.mnn_correct(\n            numberOfDims, \n            numberOfCells,\n            x.offset,\n            block_data.offset,\n            buffer.offset,\n            k,\n            numberOfMADs,\n            robustIterations,\n            robustTrim,\n            referencePolicy,\n            approximate\n        ));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n        \n    } finally {\n        utils.free(x_data);\n    }\n\n    return buffer; \n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the `buildNeighborSearchIndex` function from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        var pcs = this.#correct.fetchPCs();\n        this.#cache.raw = scran.buildNeighborSearchIndex(pcs.pcs, { approximate: approximate, numberOfDims: pcs.num_pcs, numberOfCells: pcs.num_obs });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {boolean} approximate - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(approximate) {\n        this.changed = false;\n\n        if (this.#correct.changed || approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(approximate);\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        return;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An empty object.\n     * This is just provided for consistency with the other classes.\n     */\n    summary() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(\"neighbor_index\");\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n            phandle.writeDataSet(\"approximate\", \"Uint8\", [], Number(this.#parameters.approximate));\n        }\n\n        ghandle.createGroup(\"results\");\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let ghandle = handle.open(\"neighbor_index\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            approximate: phandle.open(\"approximate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let cache = {};\n    return new NeighborIndexState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\";\n\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\nexport const int2summaries = { 0: \"min\", 1: \"mean\", 4: \"min_rank\" };\n\nexport function serializeGroupStats(ihandle, obj, group, { no_summaries = false } = {}) {\n    for (const x of [ \"means\", \"detected\" ]) {\n        let y= obj[x](group, { copy: \"hdf5\" });\n        ihandle.writeDataSet(x, \"Float64\", null, y);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        let i0 = i;\n        if (i == \"delta_detected\") {\n            i0 = \"deltaDetected\";\n        }\n\n        let extractor = (index) => obj[i0](group, { summary: index, copy: \"hdf5\" });\n        if (no_summaries) {\n            let y = extractor(summaries2int[\"mean\"]);\n            ihandle.writeDataSet(i, \"Float64\", null, y);\n        } else {\n            let curhandle = ihandle.createGroup(i);\n            for (const [j, k] of Object.entries(summaries2int)) {\n                let y = extractor(k);\n                curhandle.writeDataSet(j, \"Float64\", null, y);\n            }\n        }\n    }\n}\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = handle.open(x, { load: true }).values;\n        permuter(output[x]);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(summaries2int)) {\n                current[j] = rhandle.open(j, { load: true }).values;\n                permuter(current[j]);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\n/*\n * Helper function to retrieve marker statistics for plotting.\n * This is used both for cluster-specific markers as well as the\n * DE genes that are computed for a custom selection vs the rest.\n */\nexport function fetchGroupResults(results, group, rank_type) {\n    if (!rank_type || rank_type === undefined) {\n        rank_type = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        let index = 1;\n        if (rank_type.match(/-min$/)) {\n            index = 0;\n        } else if (rank_type.match(/-min-rank$/)) {\n            increasing = true;\n            index = 4;\n        }\n\n        if (rank_type.match(/^cohen-/)) {\n            ranking = results.cohen(group, { summary: index, copy: false });\n        } else if (rank_type.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: index, copy: false });\n        } else if (rank_type.match(/^lfc-/)) {\n            ranking = results.lfc(group, { summary: index, copy: false });\n        } else if (rank_type.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: index, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rank_type + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.means(group, { copy: false }));\n    var stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkcode neighbor_index}.\n * This wraps `clusterSNNGraph` and related functions from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchClustersAsWasmArray() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSNNGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(resolution) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterSNNGraph(this.#cache.graph, { resolution: resolution });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * The exception is `run_me`, which is computed internally and does not correspond to any parameter in `snn_graph_cluster`.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {number} k - Number of nearest neighbors used to construct the graph.\n     * @param {string} scheme - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {number} resolution - Number containing the resolution of the community detection.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, k, scheme, resolution) {\n        this.changed = false;\n\n        if (this.#index.changed || k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        if (this.changed || scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.#parameters.scheme = scheme;\n            this.changed = true \n        }\n\n        if (this.changed || resolution !== this.#parameters.resolution || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(resolution);\n            } else {\n                delete this.#cache.clusters;\n            }\n            this.#parameters.resolution = resolution;\n            this.changed = true;\n        }\n\n        return;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An empty object, see {@linkplain ChooseClusteringState} for the actual cluster assignments.\n     */\n    summary() {\n        // Cluster IDs will be passed to main thread in \n        // choose_clustering, so no need to do it here.\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(\"snn_graph_cluster\");\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n            phandle.writeDataSet(\"k\", \"Int32\", [], this.#parameters.k);\n            phandle.writeDataSet(\"scheme\", \"String\", [], this.#parameters.scheme);\n            phandle.writeDataSet(\"resolution\", \"Float64\", [], this.#parameters.resolution);\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n            if (this.#valid()) {\n                let clusters = this.fetchClustersAsWasmArray();\n                rhandle.writeDataSet(\"clusters\", \"Int32\", null, clusters);\n            }\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nclass SNNClusterMimic {\n    constructor(clusters) {\n        this.buffer = scran.createInt32WasmArray(clusters.length);\n        this.buffer.set(clusters);\n    }\n\n    membership({ copy }) {\n        return utils.mimicGetter(this.buffer, copy);\n    }\n\n    free() {\n        this.buffer.free();\n    }\n}\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"snn_graph_cluster\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters.k = phandle.open(\"k\", { load: true }).values[0];\n\n        parameters.scheme = phandle.open(\"scheme\", { load: true }).values[0];\n        if (typeof parameters.scheme !== \"string\") { // because I stuffed up and tried to save a string as an int in v1.0, oops.\n            parameters.scheme = \"rank\";\n        }\n\n        parameters.resolution = phandle.open(\"resolution\", { load: true }).values[0];\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        if (\"clusters\" in rhandle.children) {\n            let clusters = rhandle.open(\"clusters\", { load: true }).values;\n            cache.clusters = new SNNClusterMimic(clusters);\n        }\n    }\n\n    return new SnnGraphClusterState(index, parameters, cache);\n}\n\n\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\n/**\n * This step performs k-means clustering on the PCs, wrapping the `clusterKmeans` function from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchClustersAsWasmArray() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `kmeans_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * The exception is `run_me`, which is computed internally and does not correspond to any parameter in `kmeans_cluster`.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {number} k - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, k) {\n        this.changed = false;\n\n        if (this.#correct.changed || k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchPCs();\n                this.#cache.raw = scran.clusterKmeans(pcs.pcs, k, { numberOfDims: pcs.num_pcs, numberOfCells: pcs.num_obs, initMethod: \"pca-part\" });\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        return;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An empty object, see {@linkplain ChooseClusteringState} for the actual cluster assignments.\n     */\n    summary() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n            phandle.writeDataSet(\"k\", \"Int32\", [], this.#parameters.k);\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n            if (this.#valid()) {\n                let clusters = this.fetchClustersAsWasmArray();\n                rhandle.writeDataSet(\"clusters\", \"Int32\", null, clusters);\n             }\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nclass KmeansMimic {\n    constructor(clusters) {\n        this.buffer = scran.createInt32WasmArray(clusters.length);\n        this.buffer.set(clusters);\n    }\n\n    clusters({ copy }) {\n        return utils.mimicGetter(this.buffer, copy);\n    }\n\n    free() {\n        this.buffer.free();\n    }\n}\n\nexport function unserialize(handle, pca) {\n    let parameters = {\n        k: 10\n    };\n    let cache = {};\n\n    // Protect against old analysis states that don't have kmeans_cluster.\n    if (\"kmeans_cluster\" in handle.children) {\n        let ghandle = handle.open(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.k = phandle.open(\"k\", { load: true }).values[0];\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            if (\"clusters\" in rhandle.children) {\n                let clusters = rhandle.open(\"clusters\", { load: true }).values;\n                cache.raw = new KmeansMimic(clusters);\n            }\n        }\n    }\n\n    return new KmeansClusterState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchClustersAsWasmArray() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClustersAsWasmArray();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClustersAsWasmArray();\n        }\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /**\n     * Obtain the indices of all cells belonging to the specified cluster.\n     *\n     * @param {number} cluster - Identifier for the cluster of interest.\n     * This should be a number in the range of values defined by {@linkcode ChooseClusteringState#summary summary.clusters}.\n     *\n     * @return {Array} Array of indices for all cells belonging to `cluster`.\n     * Note that indices are relative to the filtered matrix - \n     * use {@linkcode CellFilteringState#undoFiltering CellFilteringState.undoFiltering} to convert them to indices on the original dataset.\n     */\n    fetchClusterIndices(cluster) {\n        let keep = [];\n        this.fetchClustersAsWasmArray().forEach((x, i) => {\n            if (x == cluster) {\n                keep.push(i);\n            }\n        });\n        return keep;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {string} method - Either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(method) {\n        this.changed = true;\n        \n        if (method == this.#parameters.method) {\n            if (method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters.method = method;\n        return;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An object containing:\n     *\n     * - `clusters`: an Int32Array of length equal to the number of cells (after QC filtering),\n     * containing the cluster assignment for each cell.\n     */\n    summary() {\n        var clusters = this.fetchClustersAsWasmArray();\n        return { \"clusters\": clusters.slice() };\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(\"choose_clustering\");\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n            phandle.writeDataSet(\"method\", \"String\", [], this.#parameters.method);\n        }\n\n        // No need to serialize the cluster IDs as this is done for each step.\n        ghandle.createGroup(\"results\");\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, snn, kmeans) {\n    let ghandle = handle.open(\"choose_clustering\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            method: phandle.open(\"method\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    return new ChooseClusteringState(snn, kmeans, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the `scoreMarkers` function from [**scran.js**](https://github.com/jkanche/scran.js).\n * The clustering is obtained from the {@linkcode choose_clustering} step.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        for (const norm of Object.values(norm_states)) {\n            if (!(norm instanceof nutils.NormalizationStateBase)) {\n                throw new Error(\"'norm' should be a NormalizationStateBase object\");\n            }\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    free() {\n        for (const v of Object.values(this.#cache.raw)) {\n            utils.freeCache(v);\n        }\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Fetch the marker statistics for a given cluster.\n     *\n     * @param {number} group - An integer specifying the cluster of interest.\n     * This should be less than the value returned by {@linkcode MarkerDetectionState#numberOfGroups numberOfGroups}.\n     * @param {string} rank_type - Summarized effect size to use for ranking markers.\n     * This should follow the format of `<effect>-<summary>` where `<effect>` may be `lfc`, `cohen`, `auc` or `delta_detected`,\n     * and `<summary>` may be `min`, `mean` or `min-rank`.\n     * @param {string} feat_type - The feature type of interest, usually `\"RNA\"` or `\"ADT\"`.\n     *\n     * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rank_type`.\n     * This contains:\n     *   - `means`: a `Float64Array` of length equal to the number of genes, containing the mean expression within the selection.\n     *   - `detected`: a `Float64Array` of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n     *   - `lfc`: a `Float64Array` of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n     *   - `delta_detected`: a `Float64Array` of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n     */\n    fetchGroupResults(group, rank_type, feat_type) {\n        return markers.fetchGroupResults(this.#cache.raw[feat_type], group, rank_type); \n    }\n\n    /** \n     * @return The number of clusters for which markers were computed.\n     */\n    numberOfGroups() {\n        let first = Object.values(this.#cache.raw)[0];\n        return first.numberOfGroups();\n    }\n\n    fetchGroupMeans(group, feat_type, { copy = true }) {\n        return this.#cache.raw[feat_type].means(group, { copy: copy });\n    }\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @return The state is updated with new results.\n     */\n    compute() {\n        this.changed = false;\n\n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (v.changed || this.#choice.changed) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClustersAsWasmArray();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block });\n\n                // No parameters to set.\n\n                this.changed = true;\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An empty object.\n     * This is returned for consistency with the other steps.\n     */\n    summary() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(\"marker_detection\");\n        ghandle.createGroup(\"parameters\");\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n            let chandle = rhandle.createGroup(\"per_cluster\");\n\n            for (const [k, v] of Object.entries(this.#cache.raw)) {\n                let khandle = chandle.createGroup(k);\n                var num = v.numberOfGroups();\n                for (var i = 0; i < num; i++) {\n                    let ihandle = khandle.createGroup(String(i));\n                    markers.serializeGroupStats(ihandle, v, i);\n                }\n            }\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nclass ScoreMarkersMimic {\n    constructor(clusters) {\n        this.clusters = clusters;\n    }\n\n    effect_grabber(key, group, summary, copy) {\n        let sidx = markers.int2summaries[summary];\n        let chosen = this.clusters[group][key][sidx];\n        return utils.mimicGetter(chosen, copy);\n    }\n\n    lfc(group, { summary, copy }) {\n        return this.effect_grabber(\"lfc\", group, summary, copy);\n    }\n\n    deltaDetected(group, { summary, copy }) {\n        return this.effect_grabber(\"delta_detected\", group, summary, copy);\n    }\n\n    cohen(group, { summary, copy }) {\n        return this.effect_grabber(\"cohen\", group, summary, copy);\n    }\n\n    auc(group, { summary, copy }) {\n        return this.effect_grabber(\"auc\", group, summary, copy);\n    }\n\n    stat_grabber(key, group, copy) {\n        let chosen = this.clusters[group][key];\n        return utils.mimicGetter(chosen, copy);\n    }\n\n    means(group, { copy }) {\n        return this.stat_grabber(\"means\", group, copy);\n    }\n\n    detected(group, { copy }) {\n        return this.stat_grabber(\"detected\", group, copy);\n    }\n\n    numberOfGroups() {\n        return Object.keys(this.clusters).length;\n    }\n\n    free() {}\n}\n\nexport function unserialize(handle, permuters, filter, norm_states, choice) {\n    let ghandle = handle.open(\"marker_detection\");\n\n    // No parameters to unserialize.\n    let parameters = {};\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"clusters\" in rhandle.children) { \n            // below v2.0\n            let chandle = rhandle.open(\"clusters\");\n            let clusters = {};\n            for (const cl of Object.keys(chandle.children)) {\n                clusters[Number(cl)] = markers.unserializeGroupStats(chandle.open(cl), permuters[\"RNA\"]);\n            }\n            cache.raw = { RNA: new ScoreMarkersMimic(clusters) };\n        } else {\n            // after v2.0.\n            let chandle = rhandle.open(\"per_cluster\");\n            cache.raw = {};\n            for (const a of Object.keys(chandle.children)) {\n                let clusters = {};\n                let ahandle = chandle.open(a);\n                for (const cl of Object.keys(ahandle.children)) {\n                    clusters[Number(cl)] = markers.unserializeGroupStats(ahandle.open(cl), permuters[a]);\n                }\n                cache.raw[a] = new ScoreMarkersMimic(clusters);\n            }\n        }\n    }\n\n    return new MarkerDetectionState(filter, norm_states, choice, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./normalization.js\";\n\nexport const step_name = \"custom_selections\";\n\n/**\n * Applications can perform marker detection on custom selections of cells.\n * This allows users to dynamically select cells on a UI and quickly obtain a list of distinguishing markers for that selection.\n * This wraps the `scoreMarkers` function from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CustomSelectionsState {\n    #filter;\n    #norm_states;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm_states, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        for (const norm of Object.values(norm_states)) {\n            if (!(norm instanceof nutils.NormalizationStateBase)) {\n                throw new Error(\"'norm' should be a NormalizationStateBase object\");\n            }\n        }\n        this.#norm_states = norm_states;\n\n        this.#cache = (cache === null ? { \"results\": {} } : cache); \n        this.#parameters = (parameters === null ? { \"selections\": {} } : parameters);\n        this.changed = false;\n    }\n\n    #liberate(i) {\n        for (const [k, v] of Object.entries(this.#cache.results[i].raw)) {\n            v.free();                                                \n        }\n    }\n\n    free() {\n        utils.freeCache(this.#cache.buffer);\n        for (const k of Object.keys(this.#cache.results)) {\n            this.#liberate(k);\n        }\n    }\n\n    /***************************\n     ******** Setters **********\n     ***************************/\n\n    /**\n     * Add a custom selection and compute its markers.\n     *\n     * @param {string} id A unique identifier for the new custom selection.\n     * @param {Array|TypedArray} selection The indices of the cells in the selection.\n     * Indices should refer to positions of cells in the QC-filtered matrix, not the original matrix.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `selection` before storing it inside this object.\n     * If `false`, it is assumed that the caller makes no further modifications to the passed `selection`.\n     *\n     * @return The custom selection is added to the state and calculation of its markers is performed.\n     * Nothing is returned.\n     */\n    addSelection(id, selection, { copy = true } = {}) {\n        let to_use = utils.findValidUpstreamStates(this.#norm_states);\n        let mat = this.#norm_states[to_use[0]].fetchNormalizedMatrix();\n        utils.checkIndices(selection, mat.numberOfColumns());\n\n        // Assumes that we have at least one cell in and outside the selection!\n        var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Int32Array\", this.#cache);\n        buffer.fill(0);\n        var tmp = buffer.array();\n        selection.forEach(element => { tmp[element] = 1; });\n\n        let res = {};\n        for (const k of to_use) {\n            let v = this.#norm_states[k];\n            if (v.valid()) {\n                let mat = v.fetchNormalizedMatrix();\n                res[k] = scran.scoreMarkers(mat, buffer); \n            }\n        }\n              \n        // Removing previous results, if there were any.\n        if (id in this.#cache.results) {\n            this.#liberate(id);\n        }\n      \n        this.#cache.results[id] = { \"raw\": res };\n\n        // making a copy to take ownership.\n        if (copy) {\n            selection = selection.slice();\n        }\n        this.#parameters.selections[id] = selection;\n        return;\n    }\n\n    /**\n     * Remove a custom selection and its results from the state.\n     *\n     * @param {string} id - An identifier for the selection to be removed.\n     *\n     * @return The specified selection and its results are removed from the state.\n     * Nothing is returned.\n     */\n    removeSelection(id) {\n        this.#liberate(id);\n        delete this.#cache.results[id];\n        delete this.#parameters.selections[id];\n        return;\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Fetch the marker results for a custom selection.\n     * \n     * @param {string} id - An identifier for the desired selection.\n     * @param {string} rank_type - Effect size to use for ranking markers.\n     * This should be one of `lfc`, `cohen`, `auc` or `delta_detected`.\n     * @param {string} feat_type - The feature type of interest, usually `\"RNA\"` or `\"ADT\"`.\n     *\n     * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rank_type`.\n     * This contains:\n     * - `means`: a `Float64Array` of length equal to the number of genes, containing the mean expression within the selection.\n     * - `detected`: a `Float64Array` of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n     * - `lfc`: a `Float64Array` of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n     * - `delta_detected`: a `Float64Array` of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n     */\n    fetchResults(id, rank_type, feat_type) {\n        var current = this.#cache.results[id].raw[feat_type];\n        return markers.fetchGroupResults(current, 1, rank_type + \"-mean\"); \n    }\n\n    /**\n     * Retrieve the indices for a selection of interest.\n     *\n     * @param {string} id - The identifier for the selection.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `selection` before returning it.\n     * If `false`, it is assumed that the caller does not modify the selection.\n     *\n     * @return {Array|TypedArray} Array of indices in the requested selection.\n     * Note that indices are relative to the filtered matrix - \n     * use {@linkcode CellFilteringState#undoFiltering CellFilteringState.undoFiltering} to convert them to indices on the original dataset.\n     */\n    fetchSelectionIndices(id, { copy = true } = {}) {\n        let raw = this.#parameters.selections[id];\n        if (copy) {\n            raw = raw.slice();\n        }\n        return raw;\n    }\n\n    /**\n     * Retrieve indices for all selections.\n     *\n     * @return {object} Object where the keys are the selection names and the values are arrays of indices for each selection.\n     * Each array is a copy and can be modified without affecting the CustomSelectionsState.\n     * See {@linkcode CustomSelectionsState#fetchSelectionIndices fetchSelectionIndices} for more details on the interpretation of the indices.\n     */\n    fetchSelections() {\n        let replacement = {};\n        for (const [k, v] of Object.entries(this.#parameters.selections)) {\n            replacement[k] = v.slice(); \n        }\n        return replacement;        \n    }\n\n    fetchParameters() {\n        return {};\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @return The state is updated by removing stale selections if the QC filter was altered.\n     */\n    compute() {\n        this.changed = false;\n\n        /* If the QC filter was re-run, all of the selections are invalidated as\n         * the identity of the indices may have changed.\n         */\n        if (this.#filter.changed) {\n            for (const key of Object.entries(this.#cache.results)) {\n                this.#liberate(key);\n            }\n            this.#parameters.selections = {};\n            this.#cache.results = {};\n            this.changed = true;\n        }\n\n        /*\n         * Technically we would need to re-run detection on the existing selections\n         * if the normalization changed but the QC was the same. In practice, this\n         * never happens, so we'll deal with it later.\n         */\n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /***************************\n     ******** Results **********\n     **************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return An empty object.\n     * This is returned for consistency with the other steps.\n     */\n    summary() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(\"custom_selections\");\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n            let shandle = phandle.createGroup(\"selections\");\n            for (const [key, val] of Object.entries(this.#parameters.selections)) {\n                shandle.writeDataSet(String(key), \"Int32\", null, val);\n            }\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n            let phandle = rhandle.createGroup(\"per_selection\");\n            for (const [key, val] of Object.entries(this.#cache.results)) {\n                let ihandle = phandle.createGroup(key);\n                for (const [key2, val2] of Object.entries(val.raw)) {\n                    let ahandle = ihandle.createGroup(key2);\n                    markers.serializeGroupStats(ahandle, val2, 1, { no_summaries: true });\n                }\n            }\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nclass CustomMarkersMimic {\n    constructor(results) {\n        this.results = results;\n    }\n\n    effect_grabber(key, group, summary, copy) {\n        if (group != 1) {\n            throw \"only group 1 is supported for custom marker mimics\";\n        }\n        if (summary != 1) {\n            throw \"only the mean effect size is supported for custom marker mimics\";\n        }\n        let chosen = this.results[group][key];\n        return utils.mimicGetter(chosen, copy);\n    }\n\n    lfc(group, { summary, copy }) {\n        return this.effect_grabber(\"lfc\", group, summary, copy);\n    }\n\n    deltaDetected(group, { summary, copy }) {\n        return this.effect_grabber(\"delta_detected\", group, summary, copy);\n    }\n\n    cohen(group, { summary, copy }) {\n        return this.effect_grabber(\"cohen\", group, summary, copy);\n    }\n\n    auc(group, { summary, copy }) {\n        return this.effect_grabber(\"auc\", group, summary, copy);\n    }\n\n    stat_grabber(key, group, copy) {\n        let chosen = this.results[group][key];\n        return utils.mimicGetter(chosen, copy);\n    }\n\n    means(group, { copy }) {\n        return this.stat_grabber(\"means\", group, copy);\n    }\n\n    detected(group, { copy }) {\n        return this.stat_grabber(\"detected\", group, copy);\n    }\n\n    free() {}\n}\n\nexport function unserialize(handle, permuters, filter, norm_states) {\n    let ghandle = handle.open(\"custom_selections\");\n\n    let parameters = { selections: {} };\n    {\n        let phandle = ghandle.open(\"parameters\");\n        let shandle = phandle.open(\"selections\");\n\n        for (const key of Object.keys(shandle.children)) {\n            let vals = shandle.open(key, { load: true }).values;\n\n            // v1 wasn't sorted, so we make sure to sort things.\n            for (var i = 1; i < vals.length; i++) {\n                if (vals[i] < vals[i-1]) {\n                    vals.sort();\n                    break;\n                }\n            }\n\n            parameters.selections[key] = vals;\n        }\n    }\n\n    let cache = { results: {} };\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"markers\" in rhandle.children) {\n            // before v2.0\n            let mhandle = rhandle.open(\"markers\");\n            for (const sel of Object.keys(mhandle.children)) {\n                let current = markers.unserializeGroupStats(mhandle.open(sel), permuters[\"RNA\"], { no_summaries: true });\n                cache.results[sel] = { raw: { RNA: new CustomMarkersMimic({ 1 : current }) } };\n            }\n        } else {\n            // after v2.0.\n            let phandle = rhandle.open(\"per_selection\");\n            for (const sel of Object.keys(phandle.children)) {\n                let shandle = phandle.open(sel);\n                let collected = {};\n                for (const feat of Object.keys(shandle.children)) {\n                    let current = markers.unserializeGroupStats(shandle.open(feat), permuters[feat], { no_summaries: true });\n                    collected[feat] = new CustomMarkersMimic({ 1 : current });\n                }\n                cache.results[sel] = { raw: collected };\n            }\n        }\n    }\n\n    return new CustomSelectionsState(filter, norm_states, parameters, cache);\n}\n\n","import * as inputs from \"./steps/inputs.js\";\nimport * as qc from \"./steps/quality_control.js\";\nimport * as qcadt from \"./steps/adt_quality_control.js\";\nimport * as filter from \"./steps/cell_filtering.js\";\nimport * as norm from \"./steps/normalization.js\";\nimport * as normadt from \"./steps/adt_normalization.js\";\nimport * as pca from \"./steps/pca.js\";\nimport * as pcaadt from \"./steps/adt_pca.js\";\nimport * as combine from \"./steps/combine_embeddings.js\";\nimport * as correct from \"./steps/batch_correction.js\";\nimport * as index from \"./steps/neighbor_index.js\";\nimport * as markers from \"./steps/marker_detection.js\";\nimport * as custom from \"./steps/custom_selections.js\";\n\n/**\n * Generate an object containing all of the default analysis parameters.\n *\n * @return An object where each property corresponds to an analysis step and contains the default parameters for that step.\n * See the documentation for each step's `compute` method for more details:\n * \n * - {@linkcode InputsState#compute inputs}\n * - {@linkcode QualityControlState#compute quality_control}\n * - {@linkcode AdtQualityControlState#compute adt_quality_control}\n * - {@linkcode CellFiltering#compute cell_filtering}\n * - {@linkcode FeatureSelectionState#compute feature_selection}\n * - {@linkcode PcaState#compute pca}\n * - {@linkcode NeighborIndexState#compute neighbor_index}\n * - {@linkcode TsneState#compute tsne}\n * - {@linkcode UmapState#compute umap}\n * - {@linkcode KmeansClusterState#compute kmeans_cluster}\n * - {@linkcode SnnGraphClusterState#compute snn_graph_cluster}\n * - {@linkcode ChooseClusteringState#compute choose_clustering}\n * - {@linkcode CellLabellingState#compute cell_labelling}\n */\nexport function analysisDefaults() {\n    var output = {\n        feature_selection: {\n            span: 0.3\n        },\n        combine_embeddings: {\n            weights: null\n        },\n        batch_correction: {\n            method: \"none\"\n        },\n        tsne: {\n            perplexity: 30,\n            iterations: 500,\n            animate: false\n        },\n        umap: {\n            num_neighbors: 15,\n            num_epochs: 500,\n            min_dist: 0.1,\n            animate: false\n        },\n        kmeans_cluster: {\n            k: 10\n        },\n        snn_graph_cluster: {\n            k: 10,\n            scheme: \"rank\",\n            resolution: 1\n        },\n        choose_clustering: {\n            method: \"snn_graph\"\n        },\n        cell_labelling: {\n            mouse_references: [],\n            human_references: []\n        }\n    };\n\n    output[inputs.step_name] = inputs.InputsState.defaults();\n\n    output[qc.step_name] = qc.QualityControlState.defaults();\n    output[qcadt.step_name] = qcadt.AdtQualityControlState.defaults();\n    output[filter.step_name] = filter.CellFilteringState.defaults();\n\n    output[norm.step_name] = norm.NormalizationState.defaults();\n    output[normadt.step_name] = normadt.AdtNormalizationState.defaults();\n\n    output[pca.step_name] = pca.PcaState.defaults();\n    output[pcaadt.step_name] = pcaadt.AdtPcaState.defaults();\n\n    output[combine.step_name] = combine.CombineEmbeddingsState.defaults();\n    output[correct.step_name] = correct.BatchCorrectionState.defaults();\n\n    output[index.step_name] = index.NeighborIndexState.defaults();\n\n    output[markers.step_name] = markers.MarkerDetectionState.defaults();\n    output[custom.step_name] = custom.CustomSelectionsState.defaults();\n\n    return output;\n}\n\nconst correctible_pca_steps = [pca.step_name, pcaadt.step_name];\n\n/**\n * Set the batch correction parameters across multiple steps.\n * This is a convenient helper as the correction process is split across the PCA and batch correction steps.\n * For MNN, we need to weight by block in PCA before performing MNN correction;\n * for linear regression, we need to regress by block in PCA without any additional correction;\n * and for no correction, we need to turn off any block handling in PCA as well as removing any additional correction.\n *\n * @param {object} parameters Object containing parameters for all steps, e.g., from {@linkcode analysisDefaults}.\n * @param {string} method Correction method to perform, one of `\"mnn\"`, \"`regress\"` or `\"none\"`.\n * \n * @return `parameters` is modified with appropriate parameters in `batch_correction`, `pca` and `pcaadt`.\n */\nexport function configureBatchCorrection(parameters, method) {\n    let correct_method;\n    let pca_blocker;\n\n    if (method == \"mnn\") {\n        correct_method = method;\n        pca_blocker = \"weight\";\n    } else if (method == \"regress\") {\n        correct_method = \"none\";\n        pca_blocker = method;\n    } else if (method == \"none\") {\n        correct_method = method;\n        pca_blocker = method;\n    } else {\n        throw new Error(\"unknown correction method '\" + method + \"'\");\n    }\n\n    parameters[correct.step_name].method = correct_method;\n    for (const x of correctible_pca_steps) {\n        parameters[x].block_method = pca_blocker;\n    }\n\n    return parameters;\n}\n\n/**\n * Guess the `method` value from {@linkcode configureBatchCorrection} based on the parameter object.\n * This effectively consolidates the various correction parameters into a single setting.\n *\n * @param {object} parameters - Object containing parameters for all steps, typically after {@linkcode configureBatchCorrection}.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.strict] - Whether to only report the `method` when the set of parameters modified by {@linkcode configureBatchCorrection} are consistent.\n *\n * @return {?string} One of `\"mnn\"`, `\"regress\"` or `\"none\"`, based on the expected set of modifications from {@linkcode configureBatchCorrection}.\n * If `strict = false` and there is no exact match to the expected set, the most appropriate method is returned;\n * otherwise, if `strict = true`, `null` is returned.\n */\nexport function guessBatchCorrectionConfig(parameters, { strict = false } = {}) {\n    let pca_blockers = new Set(correctible_pca_steps.map(x => parameters[x].block_method));\n\n    let resp;\n    if (parameters[correct.step_name].method == \"mnn\") {\n        resp = \"mnn\";\n        if (strict) {\n            if (pca_blockers.size > 1 || !pca_blockers.has(\"weight\")) {\n                resp = null;\n            }\n        }\n    } else {\n        if (pca_blockers.has(\"regress\")) {\n            if (strict && pca_blockers.size > 1) {\n                resp = null;\n            } else {\n                resp = \"regress\";\n            }\n        } else if (pca_blockers.has(\"none\")) {\n            if (strict && pca_blockers.size > 1) {\n                resp = null;\n            } else {\n                resp = \"none\";\n            }\n        } else {\n            // If pca block_methods are set to 'weight',\n            // this doesn't really correspond to anything,\n            // but is closest to 'none'.\n            if (strict) {\n                resp = null;\n            } else {\n                resp = \"none\";\n            }\n        }\n    }\n\n    return resp;\n}\n\nconst approximatable_steps = [correct.step_name, combine.step_name, index.step_name];\n\n/**\n * Specify whether approximate neighbor searches should be performed across all affected steps.\n * This is a convenient helper as it is generally unnecessary to switch between exact and approximate searches in different steps.\n *\n * @param {object} parameters Object containing parameters for all steps, e.g., from {@linkcode analysisDefaults}.\n * @param {boolean} approximate Whether to perform approximate nearest neighbor searces.\n * \n * @return `parameters` is modified with appropriate parameters in relevant steps, e.g., `batch_correction`, `combine_embeddings` and `neighbor_index`.\n */\nexport function configureApproximateNeighbors(parameters, approximate) {\n    for (const step of approximatable_steps) {\n        parameters[step].approximate = approximate;\n    }\n    return parameters;\n}\n\n/**\n * Guess the value of `approximate` from {@linkcode configureApproximateNeighbors} based on the parameter object.\n * This effectively consolidates the various approximation parameters into a single setting.\n *\n * @param {object} parameters - Object containing parameters for all steps, typically after {@linkcode configureApproximateNeighbors}.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.strict] - Whether to only report `approximate` when the set of parameters modified by {@linkcode configureApproximateNeighbors} are consistent.\n *\n * @return {?boolean} Whether or not approximate neighbor search was used.\n * If `strict = false` and there is a mixture of approximate and exact matches, an approximate search is reported;\n * otherwise, if `strict = true`, `null` is returned.\n */\nexport function guessApproximateNeighborsConfig(parameters, { strict = false } = {}) {\n    let approximates = new Set(approximatable_steps.map(x => parameters[x].approximate));\n    if (strict && approximates.size > 1) {\n        return null;\n    } else {\n        return approximates.has(true);\n    }\n}\n","/**\n * Webpack (or something in kana's build system) specifically recognizes the\n * hard-coded path in this 'new Worker(new URL(...))' pattern. This is why we\n * have hard-coded creators for the workers rather than allowing callers to\n * pass in the URL as a variable, as that doesn't pack the worker's JS.\n */\n\nexport function createTsneWorker() {\n    return new Worker(new URL(\"../steps/tsne.worker.js\", import.meta.url), { type: \"module\" });\n}\n\nexport function createUmapWorker() {\n    return new Worker(new URL(\"../steps/umap.worker.js\", import.meta.url), { type: \"module\" });\n}\n\nexport function registerCallback(worker, callback) {\n    worker.onmessage = callback;\n    return;\n}\n\nexport function sendMessage(worker, message, transfer) {\n    worker.postMessage(message, transfer);\n    return;\n}\n\nexport function terminateWorker(worker) {\n    worker.terminate();\n    return;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./general.js\";\nimport * as aworkers from \"../../abstract/worker_parent.js\";\n\nvar animateFun = (x, y, i) => null;\n\n/**\n * Specify a function to handle animation iterations for the low-dimensional embeddings.\n * The exact nature of this handling is arbitrary - developers may post the contents to another thread, save them to file, etc.\n *\n * @param {function} fun - Function to process each animation iteration.\n * This should accept four arguments, in the following order:\n * - A string containing either `\"tsne\"` or `\"umap\"`.\n * - A `Float64Array` containing the x-coordinates for each cell.\n * - A `Float64Array` containing the y-coordinates for each cell.\n * - An integer specifying the iteration number.\n *\n * @return `fun` is set as the global animator function for t-SNE and UMAP.\n * The _previous_ value of the animator is returned.\n */\nexport function setVisualizationAnimate(fun) {\n    let previous = animateFun;\n    animateFun = fun;\n    return previous;\n}\n\nexport var scranOptions = { numberOfThreads: 1 };\n\nexport function computeNeighbors(index, k) {\n    var nn_index = index.fetchIndex();\n\n    var output = { \"num_obs\": nn_index.numberOfCells() };\n    var results = null, rbuf = null, ibuf = null, dbuf = null;\n    try {\n        results = scran.findNearestNeighbors(nn_index, k);\n\n        rbuf = scran.createInt32WasmArray(results.numberOfCells());\n        ibuf = scran.createInt32WasmArray(results.size());\n        dbuf = scran.createFloat64WasmArray(results.size());\n\n        results.serialize({ runs: rbuf, indices: ibuf, distances: dbuf });\n        output[\"size\"] = results.size();\n        output[\"runs\"] = rbuf.array().slice();\n        output[\"indices\"] = ibuf.array().slice();\n        output[\"distances\"] = dbuf.array().slice();\n\n    } finally {\n        if (results !== null) {\n            results.free();\n        }\n        if (rbuf !== null) {\n            rbuf.free();\n        }\n        if (ibuf !== null) {\n            ibuf.free();\n        }\n        if (dbuf !== null) {\n            dbuf.free();\n        }\n    }\n\n    return output;\n}\n\nexport function sendTask(worker, payload, cache, transferrable = []) {\n    var i = cache.counter;\n    var p = new Promise((resolve, reject) => {\n        cache.promises[i] = { \"resolve\": resolve, \"reject\": reject };\n    });\n    cache.counter++;\n    payload.id = i;\n    aworkers.sendMessage(worker, payload, transferrable);\n    return p;\n}\n\nconst worker_registry = [];\n\nexport function initializeWorker(worker, cache, scranOptions) { \n    let n = worker_registry.length;\n    worker_registry.push(worker);\n\n    aworkers.registerCallback(worker, msg => {\n        var type = msg.data.type;\n        if (type.endsWith(\"_iter\")) {\n            animateFun(type.slice(0, -5), msg.data.x, msg.data.y, msg.data.iteration);\n            return;\n        }\n  \n        var id = msg.data.id;\n        var fun = cache.promises[id];\n        if (type == \"error\") {\n            fun.reject(msg.data.error);\n        } else {\n            fun.resolve(msg.data.data);\n        }\n        delete cache.promises[id];\n    });\n\n    return {\n        \"worker_id\": n,\n        \"ready\": sendTask(worker, { \"cmd\": \"INIT\", scranOptions: scranOptions }, cache)\n    };\n}\n\nexport function killWorker(worker_id) {\n    let worker = worker_registry[worker_id];\n    worker_registry[worker_id] = null;\n    return aworkers.terminateWorker(worker);\n}\n\nexport function killAllWorkers() {\n    let p = [];\n    for (const x of worker_registry) {\n        if (x !== null) {\n            let p_ = aworkers.terminateWorker(x);\n            if (p_) { // not null, not undefined.\n                p.push(p_);\n            }\n        }\n    }\n    return Promise.all(p).then(x => null);\n}\n\nexport function runWithNeighbors(worker, args, nn_out, cache) {\n    var run_msg = {\n        \"cmd\": \"RUN\",\n        \"params\": args \n    };\n\n    var transferrable = [];\n    if (nn_out !== null) {\n        transferrable = [\n            nn_out.runs.buffer,\n            nn_out.indices.buffer,\n            nn_out.distances.buffer\n        ];\n        run_msg.neighbors = nn_out;\n    }\n\n    return sendTask(worker, run_msg, cache, transferrable);\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"../abstract/worker_parent.js\";\n\n/**\n * This creates a t-SNE embedding based on the neighbor index constructed by {@linkplain NeighborIndexState}.\n * This wraps `runTSNE` and related functions from [**scran.js**](https://github.com/jkanche/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class TsneState {\n    #index;\n    #parameters;\n    #cache;\n    #reloaded;\n\n    #worker;\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = { \"counter\": 0, \"promises\": {} };\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createTsneWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, this.#cache, vizutils.scranOptions);\n        this.#worker = worker;\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(perplexity, iterations, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            var k = scran.perplexityToNeighbors(perplexity);\n            nn_out = vizutils.computeNeighbors(this.#index, k);\n        }\n\n        let args = {\n            \"perplexity\": perplexity,\n            \"iterations\": iterations,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the t-SNE runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker, args, nn_out, this.#cache);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `tsne` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {number} perplexity - Number specifying the perplexity for the probability calculations.\n     * @param {number} iterations - Number of iterations to run the algorithm.\n     * @param {boolean} animate - Whether o process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return t-SNE coordinates are computed in parallel on a separate worker thread.\n     * A promise is returned that resolves when those calculations are complete.\n     */\n    compute(perplexity, iterations, animate) {\n        let same_neighbors = (!this.#index.changed && perplexity === this.#parameters.perplexity);\n        if (same_neighbors && iterations == this.#parameters.iterations) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(perplexity, iterations, animate, !same_neighbors);\n\n        this.#parameters.perplexity = perplexity;\n        this.#parameters.iterations = iterations;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    async #fetch_results(copy) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n        \n            output.iterations = this.#parameters.iterations;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker, { \"cmd\": \"FETCH\" }, this.#cache);\n        }\n    }\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return A promise that resolves to an object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     */\n    summary() {\n        return this.#fetch_results(true);\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    async serialize(handle) {\n        let ghandle = handle.createGroup(\"tsne\");\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n            phandle.writeDataSet(\"perplexity\", \"Float64\", [], this.#parameters.perplexity);\n            phandle.writeDataSet(\"iterations\", \"Int32\", [], this.#parameters.iterations);\n            phandle.writeDataSet(\"animate\", \"Uint8\", [], Number(this.#parameters.animate));\n        }\n\n        {\n            let res = await this.#fetch_results(false);\n            let rhandle = ghandle.createGroup(\"results\");\n            rhandle.writeDataSet(\"x\", \"Float64\", null, res.x);\n            rhandle.writeDataSet(\"y\", \"Float64\", null, res.y);\n        }\n\n        return;\n    }\n\n    /***************************\n     ******* Animators *********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.perplexity, this.#parameters.iterations, true, true);\n\n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => {\n                    return {\n                        \"type\": \"tsne_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker, { \"cmd\": \"RERUN\" }, this.#cache);\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"tsne\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            perplexity: phandle.open(\"perplexity\", { load: true }).values[0],\n            iterations: phandle.open(\"iterations\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    return new TsneState(index, parameters, reloaded);\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"../abstract/worker_parent.js\";\n\n/**\n * This creates a UMAP embedding based on the neighbor index constructed at {@linkplain NeighborIndexState}.\n * This wraps `runUMAP` and related functions from [**scran.js**](https://github.com/jkanche/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class UmapState {\n    #index;\n    #parameters;\n    #cache;\n    #reloaded;\n\n    #worker;\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = { \"counter\": 0, \"promises\": {} };\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createUmapWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, this.#cache, vizutils.scranOptions);\n        this.#worker = worker;\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(num_neighbors, num_epochs, min_dist, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            nn_out = vizutils.computeNeighbors(this.#index, num_neighbors);\n        }\n\n        let args = {\n            \"num_neighbors\": num_neighbors,\n            \"num_epochs\": num_epochs,\n            \"min_dist\": min_dist,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the UMAP runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker, args, nn_out, this.#cache);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `umap` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {number} num_neighbors - Number of neighbors to use to construct the simplicial sets.\n     * @param {number} num_epochs - Number of epochs to run the algorithm.\n     * @param {number} min_dist - Number specifying the minimum distance between points.\n     * @param {boolean} animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return UMAP coordinates are computed in parallel on a separate worker thread.\n     * A promise that resolves when the calculations are complete.\n     */\n    compute(num_neighbors, num_epochs, min_dist, animate) {\n        let same_neighbors = (!this.#index.changed && this.#parameters.num_neighbors === num_neighbors);\n        if (same_neighbors && num_epochs === this.#parameters.num_epochs && min_dist === this.#parameters.min_dist) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(num_neighbors, num_epochs, min_dist, animate, !same_neighbors);\n\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.num_epochs = num_epochs;\n        this.#parameters.min_dist = min_dist;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    async #fetch_results(copy) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n\n            output.iterations = this.#parameters.num_epochs;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker, { \"cmd\": \"FETCH\" }, this.#cache);\n        }\n    }\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return A promise that resolves to an object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     */\n    summary() {\n        return this.#fetch_results(true);\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    async serialize(handle) {\n        let ghandle = handle.createGroup(\"umap\");\n\n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n            phandle.writeDataSet(\"num_neighbors\", \"Int32\", [], this.#parameters.num_neighbors);\n            phandle.writeDataSet(\"num_epochs\", \"Int32\", [], this.#parameters.num_epochs);\n            phandle.writeDataSet(\"min_dist\", \"Float64\", [], this.#parameters.min_dist);\n            phandle.writeDataSet(\"animate\", \"Uint8\", [], Number(this.#parameters.animate));\n        }\n\n        {\n            let res = await this.#fetch_results(false);\n            let rhandle = ghandle.createGroup(\"results\");\n            rhandle.writeDataSet(\"x\", \"Float64\", null, res.x);\n            rhandle.writeDataSet(\"y\", \"Float64\", null, res.y);\n        }\n\n        return;\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.num_neighbors, this.#parameters.num_epochs, this.#parameters.min_dist, true, true);\n      \n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => { \n                    return {\n                        \"type\": \"umap_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker, { \"cmd\": \"RERUN\" }, this.#cache);\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"umap\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            num_neighbors: phandle.open(\"num_neighbors\", { load: true }).values[0],\n            num_epochs: phandle.open(\"num_epochs\", { load: true }).values[0],\n            min_dist: phandle.open(\"min_dist\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    return new UmapState(index, parameters, reloaded);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rutils from \"../readers/utils/index.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as markers_module from \"./marker_detection.js\";\n\nvar downloadFun = async (url) => {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return await resp.arrayBuffer();\n};\n\nconst proxy = \"https://cors-proxy.aaron-lun.workers.dev\";\nconst hs_base = \"https://github.com/clusterfork/singlepp-references/releases/download/hs-latest\";\nconst mm_base = \"https://github.com/clusterfork/singlepp-references/releases/download/mm-latest\";\n\n// Loaded references are constant, independent of the dataset;\n// so we can keep these as globals for re-use across States.\nconst hs_loaded = {};\nconst mm_loaded = {};\n\n/**\n * Cell labelling involves assigning cell type labels to clusters using the [**SingleR** algorithm](https://github.com/LTLA/CppSingleR),\n * based on [pre-formatted reference expression profiles](https://github.com/clusterfork/singlepp-references).\n * This wraps `labelCells` and related functions from [**scran.js**](https://github.com/jkanche/scran.js).\n *\n * In theory, we could do this at the single-cell level, but we use clusters instead to expedite the computation and simplify interpretation.\n * If multiple references are requested, we will use each for assignment before attempting to choose the best label for each cluster across references.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellLabellingState {\n    #inputs;\n    #markers;\n    #parameters;\n    #cache;\n\n    #hs_built;\n    #mm_built;\n\n    constructor(inputs, markers, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        if (!(markers instanceof markers_module.MarkerDetectionState)) {\n            throw new Error(\"'markers' should be a State object from './marker_detection.js'\");\n        }\n        this.#markers = markers;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n\n        this.#hs_built = {};\n        this.#mm_built = {};\n    }\n\n    free() {\n        utils.freeCache(this.#cache.buffer);\n        for (const [k, v] of Object.entries(this.#hs_built)) {\n            v.raw.free();\n        }\n        for (const [k, v] of Object.entries(this.#mm_built)) {\n            v.raw.free();\n        }\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        let out = { ...this.#parameters };\n        for (const key of [ \"human_references\", \"mouse_references\" ]) {\n            out[key] = out[key].slice();\n        }\n        return out;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    async #build_reference(name, species, rebuild) {\n        let base;\n        let all_loaded;\n        let all_built;\n        if (species == \"human\") {\n            base = hs_base;\n            all_loaded = hs_loaded;\n            all_built = this.#hs_built;\n        } else {\n            base = mm_base;\n            all_loaded = mm_loaded;\n            all_built = this.#mm_built;\n        }\n\n        if (!(name in all_loaded)) {\n            let buffers = await Promise.all([\n                downloadFun(proxy + \"/\" + encodeURIComponent(base + \"/\" + name + \"_genes.csv.gz\")),\n                downloadFun(proxy + \"/\" + encodeURIComponent(base + \"/\" + name + \"_labels_fine.csv.gz\")),\n                downloadFun(proxy + \"/\" + encodeURIComponent(base + \"/\" + name + \"_label_names_fine.csv.gz\")),\n                downloadFun(proxy + \"/\" + encodeURIComponent(base + \"/\" + name + \"_markers_fine.gmt.gz\")),\n                downloadFun(proxy + \"/\" + encodeURIComponent(base + \"/\" + name + \"_matrix.csv.gz\"))\n            ]);\n\n            let loaded;\n            try {\n                loaded = scran.loadLabelledReferenceFromBuffers(\n                    new Uint8Array(buffers[4]), // rank matrix\n                    new Uint8Array(buffers[3]), // markers\n                    new Uint8Array(buffers[1])) // label per sample\n\n                let gene_lines = rutils.readLines(new Uint8Array(buffers[0]), { compression: \"gz\" }); // gene names\n                let ensembl = [];\n                let symbol = [];\n                gene_lines.forEach(x => {\n                    let fields = x.split(\",\");\n                    ensembl.push(fields[0]);\n                    symbol.push(fields[1]);\n                });\n\n                let labels = rutils.readLines(new Uint8Array(buffers[2]), { compression: \"gz\" }); // full label names\n                all_loaded[name] = { \n                    \"raw\": loaded, \n                    \"genes\": {\n                        \"ensembl\": ensembl,\n                        \"symbol\": symbol\n                    },\n                    \"labels\": labels\n                };\n\n            } catch (e) {\n                utils.freeCache(loaded);\n                throw e;\n            }\n        }\n\n        if (!(name in all_built) || rebuild) {\n            let built;\n            try {\n                if (name in all_built) {\n                    utils.freeCache(all_built[name].raw);\n                }\n\n                let current = all_loaded[name];\n                let loaded = current.raw;\n\n                let chosen_ids;\n                if (this.#cache.feature_details.type === \"ensembl\") {\n                    chosen_ids = current.genes.ensembl;\n                } else {\n                    chosen_ids = current.genes.symbol;\n                }\n\n                let built = scran.buildLabelledReference(this.#cache.features, loaded, chosen_ids); \n                all_built[name] = {\n                    \"features\": chosen_ids,\n                    \"raw\": built\n                };\n\n            } catch (e) {\n                utils.freeCache(built);\n                throw e;\n            }\n        }\n\n        return {\n            \"loaded\": all_loaded[name],\n            \"built\": all_built[name]\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * Each argument is taken from the property of the same name in the `cell_labelling` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @param {Array} mouse_references - Array of strings specifying the names of the reference datasets for mouse datasets, e.g., `\"ImmGen\"`.\n     * @param {Array} human_references - Array of strings specifying the names of the reference datasets for human datasets, e.g., `\"BlueprintEncode\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(human_references, mouse_references) {\n        if (!this.#inputs.changed && \n            !this.#markers.changed &&\n            compare_arrays(human_references, this.#parameters.human_references) &&\n            compare_arrays(mouse_references, this.#parameters.mouse_references)) \n        {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        if (this.#inputs.changed || !(\"features\" in this.#cache)) {\n            let feat_out = choose_features(this.#inputs);\n            this.#cache.features = feat_out.features;\n            this.#cache.feature_details = feat_out.details;\n        }\n        let species = this.#cache.feature_details.species;\n\n        // Take ownership to avoid pass-by-reference shenanigans.\n        human_references = human_references.slice();\n        mouse_references = mouse_references.slice();\n\n        // Fetching all of the references. This is effectively a no-op\n        // if the inputs have not changed, so we do it to fill up 'valid'.\n        let valid = {};\n        if (species == \"human\") {\n            for (const ref of human_references) {\n                valid[ref] = this.#build_reference(ref, \"human\", this.#inputs.changed);\n            }\n        } else if (species == \"mouse\") {\n            for (const ref of mouse_references) {\n                valid[ref] = this.#build_reference(ref, \"mouse\", this.#inputs.changed);\n            }\n        }\n\n        // Creating a column-major array of mean vectors for each cluster.\n        let cluster_means = this.#cache.buffer;\n        let ngenes = this.#cache.features.length;\n        let ngroups = this.#markers.numberOfGroups(); \n\n        if (this.#markers.changed || typeof cluster_means === \"undefined\") {\n            cluster_means = utils.allocateCachedArray(ngroups * ngenes, \"Float64Array\", this.#cache);\n\n            for (var g = 0; g < ngroups; g++) {\n                let means = this.#markers.fetchGroupMeans(g, \"RNA\", { copy: false }); // Warning: direct view in wasm space - be careful.\n                let cluster_array = cluster_means.array();\n                cluster_array.set(means, g * ngenes);\n            }\n        }\n\n        let promises = [];\n\n        // Running classifications on the cluster means. Note that compute() itself\n        // cannot be async, as we need to make sure 'changed' is set and available for\n        // downstream steps; hence the explicit then().\n        this.#cache.results = {};\n        for (const [key, val] of Object.entries(valid)) {\n            let p = val.then(ref => {\n                let output = scran.labelCells(cluster_means, ref.built.raw, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                let labels = [];\n                for (const o of output) {\n                    labels.push(ref.loaded.labels[o]);\n                }\n                return labels;\n            });\n            this.#cache.results[key] = p;\n            promises.push(p);\n        }\n\n        // Performing additional integration, if necessary. We don't really \n        // need this if there's only one reference.\n        let used_refs = Object.keys(valid);\n        if (used_refs.length > 1) {\n            if (this.#inputs.changed || !compare_arrays(used_refs, this.#cache.used) || !(\"integrated\" in this.#cache)) {\n                let used_vals = Object.values(valid);\n\n                this.#cache.integrated = Promise.all(used_vals)\n                    .then(arr => {\n                        let loaded = arr.map(x => x.loaded.raw);\n                        let feats = arr.map(x => x.built.features);\n                        let built = arr.map(x => x.built.raw);\n                        return scran.integrateLabelledReferences(this.#cache.features, loaded, feats, built);\n                    }\n                );\n            }\n\n            let p = this.#cache.integrated\n                .then(async (integrated) => {\n                    let results = [];\n                    for (const key of used_refs) {\n                        results.push(await this.#cache.results[key]);\n                    }\n\n                    let out = scran.integrateCellLabels(cluster_means, results, integrated, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let as_names = [];\n                    out.forEach(i => {\n                        as_names.push(used_refs[i]);\n                    });\n                    return as_names;\n                }\n            );\n            this.#cache.integrated_results = p;\n            promises.push(p);\n        } else {\n            delete this.#cache.integrated_results;\n        }\n\n        this.#cache.used = used_refs;\n        this.#parameters.human_references = human_references;\n        this.#parameters.mouse_references = mouse_references;\n        this.changed = true;\n\n        return Promise.all(promises).then(x => null);\n    }\n\n    /***************************\n     ******** Results **********\n     ***************************/\n\n    /**\n     * Obtain a summary of the state, typically for display on a UI like **kana**.\n     *\n     * @return A promise that resolves to an object containing:\n     *\n     * - `per_reference`: an object where keys are the reference names and the values are arrays of strings.\n     *   Each array is of length equal to the number of clusters and contains the cell type classification for each cluster.\n     * - `integrated`: an array of length equal to the number of clusters.\n     *   Each element is a string specifying the name of the reference with the best label for each cluster.\n     */\n    async summary() {\n        // No real need to clone these, they're string arrays\n        // so they can't be transferred anyway.\n        let perref = {};\n        for (const [key, val] of Object.entries(this.#cache.results)) {\n            perref[key] = await val;\n        }\n\n        let output = { \"per_reference\": perref };\n        if (\"integrated_results\" in this.#cache) {\n            output.integrated = await this.#cache.integrated_results;\n        }\n\n        return output;\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    async serialize(handle) {\n        let ghandle = handle.createGroup(\"cell_labelling\");\n        \n        {\n            let phandle = ghandle.createGroup(\"parameters\");\n            phandle.writeDataSet(\"mouse_references\", \"String\", null, this.#parameters.mouse_references);\n            phandle.writeDataSet(\"human_references\", \"String\", null, this.#parameters.human_references);\n        }\n\n        {\n            let rhandle = ghandle.createGroup(\"results\");\n            let res = await this.summary();\n\n            let perhandle = rhandle.createGroup(\"per_reference\");\n            for (const [key, val] of Object.entries(res.per_reference)) {\n                perhandle.writeDataSet(key, \"String\", null, val);\n            }\n\n            if (\"integrated\" in res) {\n                rhandle.writeDataSet(\"integrated\", \"String\", null, res.integrated);\n            }\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\n// Try to figure out the best feature identifiers to use,\n// based on the highest confidence annotation.\nfunction choose_features(inputs) {\n    let genes = inputs.fetchGenes();\n    let types = inputs.fetchGeneTypes();\n\n    let best_feature = null;\n    let best = null;\n    for (const [key, val] of Object.entries(types)) {\n        if (best === null) {\n            best_feature = key;\n            best = val;\n        } else if (val.confidence > best.confidence) {\n            best_feature = key;\n            best = val;\n        }\n    }\n\n    return {\n        features: genes[best_feature],\n        details: best \n    };\n}\n\nfunction compare_arrays(x, y) {\n    if (typeof x === \"undefined\" || typeof y === \"undefined\") {\n        return false;\n    }\n    if (x.length != y.length) {\n        return false;\n    }\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] != y[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, markers) {\n    let parameters =  {\n        mouse_references: [],\n        human_references: []\n    };\n    let cache = { results: {} };\n\n    // Protect against old analysis states that don't have cell_labelling.\n    if (\"cell_labelling\" in handle.children) {\n        let ghandle = handle.open(\"cell_labelling\");\n        \n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.mouse_references = phandle.open(\"mouse_references\", { load: true }).values;\n            parameters.human_references = phandle.open(\"human_references\", { load: true }).values;\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            let perhandle = rhandle.open(\"per_reference\");\n            for (const key of Object.keys(perhandle.children)) {\n                cache.results[key] = perhandle.open(key, { load: true }).values;\n            }\n            if (\"integrated\" in rhandle.children) {\n                cache.integrated_results = rhandle.open(\"integrated\", { load: true }).values;\n            }\n        }\n    }\n\n    return new CellLabellingState(inputs, markers, parameters, cache);\n}\n\n/**************************\n ******** Setters *********\n **************************/\n\n/**\n * Specify a function to download references for the cell labelling step.\n *\n * @param {function} fun - Function that accepts a single string containing a URL,\n * and returns an ArrayBuffer of that URL's contents.\n *\n * @return `fun` is set as the global downloader for this step. \n * The _previous_ value of the downloader is returned.\n */\nexport function setCellLabellingDownload(fun) {\n    let previous = downloadFun;\n    downloadFun = fun;\n    return previous;\n}\n","import * as scran from \"scran.js\";\n\nimport * as inputs from \"./steps/inputs.js\";\n\nimport * as qc from \"./steps/quality_control.js\";\nimport * as qcadt from \"./steps/adt_quality_control.js\";\nimport * as filters from \"./steps/cell_filtering.js\";\n\nimport * as normalization from \"./steps/normalization.js\";\nimport * as normadt from \"./steps/adt_normalization.js\";\n\nimport * as variance from \"./steps/feature_selection.js\";\n\nimport * as pca from \"./steps/pca.js\";\nimport * as pcaadt from \"./steps/adt_pca.js\";\nimport * as combine from \"./steps/combine_embeddings.js\";\nimport * as correct from \"./steps/batch_correction.js\";\n\nimport * as index from \"./steps/neighbor_index.js\";\nimport * as cluster_choice from \"./steps/choose_clustering.js\";\nimport * as kmeans_cluster from \"./steps/kmeans_cluster.js\";\nimport * as snn_cluster from \"./steps/snn_graph_cluster.js\";\n\nimport * as tsne from \"./steps/tsne.js\";\nimport * as umap from \"./steps/umap.js\";\n\nimport * as cluster_markers from \"./steps/marker_detection.js\";\nimport * as label_cells from \"./steps/cell_labelling.js\";\nimport * as custom_markers from \"./steps/custom_selections.js\";\n\nconst step_inputs = inputs.step_name;\nconst step_qc = qc.step_name;\nconst step_qc_adt = qcadt.step_name;\nconst step_filter = filters.step_name;\nconst step_norm = normalization.step_name;\nconst step_norm_adt = normadt.step_name;\nconst step_feat = \"feature_selection\";\nconst step_pca = pca.step_name;\nconst step_pca_adt = pcaadt.step_name;\nconst step_combine = \"combine_embeddings\";\nconst step_correct = \"batch_correction\";\nconst step_neighbors = index.step_name;\nconst step_tsne = \"tsne\";\nconst step_umap = \"umap\";\nconst step_kmeans = \"kmeans_cluster\";\nconst step_snn = \"snn_graph_cluster\";\nconst step_choice = \"choose_clustering\";\nconst step_markers = cluster_markers.step_name;\nconst step_labels = \"cell_labelling\";\nconst step_custom = custom_markers.step_name;\n\n/**\n * Create a new analysis state in preparation for calling {@linkcode runAnalysis}.\n * Multiple states can be created and used interchangeably within the same Javascript runtime.\n *\n * @return A promise that resolves to an object containing states for all analysis steps.\n * This object can be used as input into {@linkcode runAnalysis}.\n */\nexport async function createAnalysis() {\n    return create_analysis(new inputs.InputsState);\n}\n\nfunction create_analysis(input_state) {\n    let output = {};\n    output[step_inputs] = input_state;\n\n    output[step_qc] = new qc.QualityControlState(output[step_inputs]);\n    output[step_qc_adt] = new qcadt.AdtQualityControlState(output[step_inputs]);\n    output[step_filter] = new filters.CellFilteringState(output[step_inputs], { \"RNA\": output[step_qc], \"ADT\": output[step_qc_adt] });\n\n    output[step_norm] = new normalization.NormalizationState(output[step_qc], output[step_filter]);\n    output[step_norm_adt] = new normadt.AdtNormalizationState(output[step_qc_adt], output[step_filter]);\n\n    output[step_feat] = new variance.FeatureSelectionState(output[step_filter], output[step_norm]);\n\n    output[step_pca] = new pca.PcaState(output[step_filter], output[step_norm], output[step_feat]);\n    output[step_pca_adt] = new pcaadt.AdtPcaState(output[step_filter], output[step_norm_adt]);\n    output[step_combine] = new combine.CombineEmbeddingsState({ \"RNA\": output[step_pca], \"ADT\": output[step_pca_adt] });\n    output[step_correct] = new correct.BatchCorrectionState(output[step_filter], output[step_combine]);\n\n    output[step_neighbors] = new index.NeighborIndexState(output[step_correct]);\n\n    output[step_tsne] = new tsne.TsneState(output[step_neighbors]);\n    output[step_umap] = new umap.UmapState(output[step_neighbors]);\n\n    output[step_kmeans] = new kmeans_cluster.KmeansClusterState(output[step_correct]);\n    output[step_snn] = new snn_cluster.SnnGraphClusterState(output[step_neighbors]);\n    output[step_choice] = new cluster_choice.ChooseClusteringState(output[step_snn], output[step_kmeans]);\n\n    let norm_states = { \"RNA\": output[step_norm], \"ADT\": output[step_norm_adt] };\n    output[step_markers] = new cluster_markers.MarkerDetectionState(output[step_filter], norm_states, output[step_choice]);\n    output[step_labels] = new label_cells.CellLabellingState(output[step_inputs], output[step_markers]);\n    output[step_custom] = new custom_markers.CustomSelectionsState(output[step_filter], norm_states);\n\n    return Promise.all([output[step_tsne].ready(), output[step_umap].ready()]).then(val => output);\n}\n\n/**\n * Free the contents of an analysis state.\n * This releases memory on the **scran.js** Wasm heap and terminates any workers associated with this analysis.\n *\n * @param state An existing analysis state, produced by {@linkcode createAnalysis} or {@linkcode loadAnalysis}.\n *\n * @return A promise that resolves to `null` when all states are freed.\n */\nexport function freeAnalysis(state) {\n    let promises = [];\n    for (const [k, v] of Object.entries(state)) {\n        let p = v.free();\n        if (p) { // not null, not undefined.\n            promises.push(p); \n        }\n    }\n    return Promise.all(promises).then(x => null);\n}\n\n/**\n * Run a basic single-cell RNA-seq analysis with the specified files and parameters.\n * This will cache the results from each step so that, if the parameters change, only the affected steps will be rerun.\n *\n * @param {object} state - Object containing the analysis state, produced by {@linkcode createAnalysis} or {@linkcode loadAnalysis}.\n * @param {Array} matrices - Object where each (arbitrarily named) property corresponds to an input matrix. \n * Each matrix should be an object with `type` string property and any number of additional properties referring to individual data files.\n *\n * - If `type: \"MatrixMarket\"`, the object should contain an `mtx` property, referring to a (possibly Gzipped) Matrix Market file containing a count matrix.\n *   The object may contain a `genes` property, referring to a (possibly Gzipped) tab-separated file with the gene ID and symbols for each row of the count matrix.\n *   The object may contain a `annotation` property, referring to a (possibly Gzipped) tab-separated file with the gene ID and symbols for each row of the count matrix.\n * - If `type: \"10X\"`, the object should contain an `h5` property, referring to a HDF5 file following the 10X Genomics feature-barcode matrix format.\n *   It is assumed that the matrix has already been filtered to contain only the cell barcodes.\n * - If `type: \"H5AD\"`, the object should contain an `h5` property, referring to a H5AD file.\n *\n * The representation of each reference to a data file depends on the runtime.\n * In the browser, each data file manifests as a `File` object; for Node.js, each data file should be represented as a string containing a file path.\n *\n * Alternatively, `matrices` may be `null`, in which case the count matrices are extracted from `state`.\n * This assumes that the data matrices were already cached in `state`, either from a previous call to {@linkcode runAnalysis} or from @{linkcode loadAnalysis}.\n * @param {object} params - An object containing parameters for all steps.\n * See {@linkcode analysisDefaults} for more details.\n * @param {object} [options] - Optional parameters.\n * @param {function} [options.startFun] - Function that is called when each step is started.\n * This should accept a single argument - the name of the step.\n * If `null`, nothing is executed.\n * @param {function} [options.finishFun] - Function that is called on successful execution of each step.\n * This should accept two arguments - the name of the step and an object containing the results of that step.\n * (The latter will be undefined if the step uses a previously cached result.)\n * If `null`, nothing is executed.\n * \n * @return A promise that resolves to `null` when all asynchronous analysis steps are complete.\n * The contents of `state` are modified by reference to reflect the latest state of the analysis with the supplied parameters.\n */\nexport async function runAnalysis(state, matrices, params, { startFun = null, finishFun = null } = {}) {\n    let quickStart = step => {\n        if (startFun !== null) {\n            startFun(step);\n        }\n    }\n\n    let quickFinish = step => {\n        if (finishFun !== null) {\n            if (state[step].changed) {\n                finishFun(step, state[step].summary());\n            } else {\n                finishFun(step);\n            }\n        }\n    }\n\n    let promises = [];\n    let asyncQuickFinish = (step, p) => {\n        if (finishFun !== null) {\n            if (state[step].changed) {\n                p = state[step].summary().then(res => finishFun(step, res));\n            } else {\n                p = p.then(out => finishFun(step));\n            }\n        }\n        promises.push(p);\n    }\n\n    /*** Loading ***/\n    quickStart(step_inputs);\n    await state[step_inputs].compute(\n        matrices, \n        params[step_inputs][\"sample_factor\"],\n        params[step_inputs][\"subset\"]\n    );\n    quickFinish(step_inputs);\n\n    /*** Quality control ***/\n    quickStart(step_qc);\n    state[step_qc].compute(\n        params[step_qc][\"skip\"],\n        params[step_qc][\"use_mito_default\"], \n        params[step_qc][\"mito_prefix\"], \n        params[step_qc][\"nmads\"]\n    );\n    quickFinish(step_qc);\n\n    quickStart(step_qc_adt);\n    state[step_qc_adt].compute(\n        params[step_qc_adt][\"skip\"],\n        params[step_qc_adt][\"igg_prefix\"], \n        params[step_qc_adt][\"nmads\"],\n        params[step_qc_adt][\"min_detected_drop\"]\n    );\n    quickFinish(step_qc_adt);\n\n    quickStart(step_filter);\n    state[step_filter].compute();\n    quickFinish(step_filter);\n\n    /*** Normalization ***/\n    quickStart(step_norm);\n    state[step_norm].compute();\n    quickFinish(step_norm);\n\n    quickStart(step_norm_adt);\n    state[step_norm_adt].compute(\n        params[step_norm_adt][\"num_pcs\"],    \n        params[step_norm_adt][\"num_clusters\"]    \n    );\n    quickFinish(step_norm_adt);\n\n    /*** Feature selection ***/\n    quickStart(step_feat);\n    state[step_feat].compute(\n        params[step_feat][\"span\"]\n    );\n    quickFinish(step_feat);\n  \n    /*** Dimensionality reduction ***/\n    quickStart(step_pca);\n    state[step_pca].compute(\n        params[step_pca][\"num_hvgs\"],\n        params[step_pca][\"num_pcs\"],\n        params[step_pca][\"block_method\"]\n    );\n    quickFinish(step_pca);\n\n    quickStart(step_pca_adt);\n    state[step_pca_adt].compute(\n        params[step_pca_adt][\"num_pcs\"],\n        params[step_pca_adt][\"block_method\"]\n    );\n    quickFinish(step_pca_adt);\n\n    quickStart(step_combine);\n    state[step_combine].compute(\n        params[step_combine][\"weights\"],\n        params[step_combine][\"approximate\"]\n    );\n    quickFinish(step_combine);\n\n    quickStart(step_correct);\n    state[step_correct].compute(\n        params[step_correct][\"method\"],\n        params[step_correct][\"num_neighbors\"],\n        params[step_correct][\"approximate\"]\n    );\n    quickFinish(step_correct);\n\n    /*** Nearest neighbors ***/\n    quickStart(step_neighbors);\n    state[step_neighbors].compute(\n        params[step_neighbors][\"approximate\"]\n    );\n    quickFinish(step_neighbors);\n\n    /*** Visualization ***/\n    {\n        quickStart(step_tsne);\n        let p = state[step_tsne].compute(\n            params[step_tsne][\"perplexity\"],\n            params[step_tsne][\"iterations\"], \n            params[step_tsne][\"animate\"]\n        );\n        asyncQuickFinish(step_tsne, p);\n    }\n\n    {\n        quickStart(step_umap);\n        let p = state[step_umap].compute(\n            params[step_umap][\"num_neighbors\"], \n            params[step_umap][\"num_epochs\"], \n            params[step_umap][\"min_dist\"], \n            params[step_umap][\"animate\"]\n        );\n        asyncQuickFinish(step_umap, p);\n    }\n\n    /*** Clustering ***/\n    let method = params[step_choice][\"method\"];\n\n    quickStart(step_kmeans);\n    state[step_kmeans].compute(\n        method == \"kmeans\", \n        params[step_kmeans][\"k\"]\n    );\n    quickFinish(step_kmeans);\n\n    quickStart(step_snn);\n    state[step_snn].compute(\n        method == \"snn_graph\", \n        params[step_snn][\"k\"], \n        params[step_snn][\"scheme\"], \n        params[step_snn][\"resolution\"]\n    );\n    quickFinish(step_snn);\n\n    quickStart(step_choice);\n    state[step_choice].compute(\n        method\n    );\n    quickFinish(step_choice);\n\n    /*** Markers and labels ***/\n    quickStart(step_markers);\n    state[step_markers].compute();\n    quickFinish(step_markers);\n\n    {\n        quickStart(step_labels);\n        let p = state[step_labels].compute(\n            params[step_labels][\"human_references\"],\n            params[step_labels][\"mouse_references\"]\n        );\n        asyncQuickFinish(step_labels, p);\n    }\n\n    state[step_custom].compute();\n    quickFinish(step_custom);\n\n    await Promise.all(promises);\n    return null;\n}\n\n/**\n * Save the current analysis state into a HDF5 file.\n * This HDF5 file can then be embedded into a `*.kana` file for distribution.\n *\n * @param {object} state - Object containing the analysis state, produced by {@linkcode createAnalysis} or {@linkcode loadAnalysis}.\n * If produced by {@linkcode createAnalysis}, it should have been run through {@linkcode runAnalysis} beforehand.\n * @param {string} path - Path to the output HDF5 file.\n * On browsers, this will lie inside the virtual file system of the **scran.js** module.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.embedded] - Whether to store information for embedded data files.\n * If `false`, links to data files are stored instead, see {@linkcode setCreateLink}.\n * \n * @return A HDF5 file is created at `path` containing the analysis parameters and results - see https://ltla.github.io/kanaval for more details on the structure.\n * If `embedded = false`, a promise is returned that resolves to `null` when the saving is complete.\n * Otherwise, an object is returned containing:\n * - `collected`: an array of length equal to the number of data files.\n *   If `linkFun: null`, each element is an ArrayBuffer containing the file contents, which can be used to assemble an embedded `*.kana` file.\n *   Otherwise, if `linkFun` is supplied, each element is a string containing the linking identifier to the corresponding file.\n * - `total`: an integer containing the total length of all ArrayBuffers in `collected`.\n *   This will only be present if `linkFun` is not supplied.\n */\nexport async function saveAnalysis(state, path, { embedded = true } = {}) {\n    let saver = null;\n    let saved = null;\n\n    if (embedded) {\n        saved = { collected: [], total: 0 };\n        saver = (serialized, size) => {\n            saved.collected.push(serialized);\n            let current = saved.total;\n            saved.total += size;\n            return {\n                \"offset\": current,\n                \"size\": size\n            };\n        };\n    }\n\n    let handle = scran.createNewHDF5File(path);\n\n    /*** Loading ***/\n    await state[step_inputs].serialize(handle, saver);\n\n    /*** Quality control ***/\n    state[step_qc].serialize(handle);\n    state[step_qc_adt].serialize(handle);\n    state[step_filter].serialize(handle);\n\n    /*** Normalization ***/\n    state[step_norm].serialize(handle);\n    state[step_norm_adt].serialize(handle);\n\n    /*** Feature selection ***/\n    state[step_feat].serialize(handle);\n\n    /*** Dimensionality reduction ***/\n    state[step_pca].serialize(handle);\n    state[step_pca_adt].serialize(handle);\n    state[step_combine].serialize(handle);\n    state[step_correct].serialize(handle);\n\n    /*** Nearest neighbors ***/\n    state[step_neighbors].serialize(handle);\n\n    /*** Visualization ***/\n    await state[step_tsne].serialize(handle);\n    await state[step_umap].serialize(handle);\n\n    /*** Clustering ***/\n    state[step_kmeans].serialize(handle);\n    state[step_snn].serialize(handle);\n    state[step_choice].serialize(handle);\n\n    /*** Markers and labels ***/\n    state[step_markers].serialize(handle);\n    await state[step_labels].serialize(handle);\n    state[step_custom].serialize(handle);\n\n    return saved;\n}\n\n/**\n * Load an analysis state from a HDF5 state file, usually excised from a `*.kana` file.\n *\n * @param {string} path - Path to the HDF5 file containing the analysis state.\n * On browsers, this should lie inside the virtual file system of the **scran.js** module.\n * @param {function} loadFun - Function to load each embedded data file.\n * This should accept two arguments - an offset to the start of the file in the embedded file buffer, and the size of the file.\n *\n * In the browser, the function should return an ArrayBuffer containing the contents of the file.\n * For Node.js, the function should return a string containing a path to the file.\n * In both cases, the function may instead return a promise that resolves to the expected values.\n *\n * Note that this function is only used if the state file at `path` contains information for embedded files; \n * otherwise, links are resolved using reader-specific functions (see {@linkcode setResolveLink} for the common use cases).\n * @param {object} [options] - Optional parameters.\n * @param {function} [options.finishFun] - Function that is called on after extracting results for each step.\n * This should accept two arguments - the name of the step and an object containing the results of that step.\n * If `null`, a no-op function is automatically created.\n *\n * @return An object containing the loaded analysis state.\n * This is conceptually equivalent to creating a state with {@linkcode createAnalysis} and running it through {@linkcode runAnalysis}.\n */\nexport async function loadAnalysis(path, loadFun, { finishFun = null } = {}) {\n    let state = {};\n    let handle = new scran.H5File(path);\n    let quickFun = step => {\n        if (finishFun !== null) {\n            finishFun(step, state[step].summary());\n        }\n    }\n\n    /*** Loading ***/\n    let permuters;\n    {\n        let out = await inputs.unserialize(handle, loadFun);\n        state[step_inputs] = out.state;\n        permuters = out.permuters;\n        quickFun(step_inputs);\n    }\n\n    /*** Quality control ***/\n    {\n        state[step_qc] = qc.unserialize(handle, state[step_inputs]);\n        quickFun(step_qc);\n    }\n\n    {\n        state[step_qc_adt] = qcadt.unserialize(handle, state[step_inputs]);\n        quickFun(step_qc_adt);\n    }\n\n    {\n        state[step_filter] = filters.unserialize(handle, state[step_inputs], { \"RNA\": state[step_qc], \"ADT\": state[step_qc_adt] });\n        quickFun(step_filter);\n    }\n\n    /*** Normalization ***/\n    {\n        state[step_norm] = normalization.unserialize(handle, state[step_qc], state[step_filter]);\n        quickFun(step_norm);\n    }\n\n    {\n        state[step_norm_adt] = normadt.unserialize(handle, state[step_qc_adt], state[step_filter]);\n        quickFun(step_norm_adt);\n    }\n\n    /*** Feature selection ***/\n    {\n        state[step_feat] = variance.unserialize(handle, permuters[\"RNA\"], state[step_filter], state[step_norm]);\n        quickFun(step_feat);\n    }\n\n    /*** Dimensionality reduction ***/\n    {\n        state[step_pca] = pca.unserialize(handle, state[step_filter], state[step_norm], state[step_feat]);\n        quickFun(step_pca);\n    }\n\n    {\n        state[step_pca_adt] = pcaadt.unserialize(handle, state[step_filter], state[step_norm_adt]);\n        quickFun(step_pca_adt);\n    }\n\n    {\n        state[step_combine] = combine.unserialize(handle, { \"RNA\": state[step_pca], \"ADT\": state[step_pca_adt] });\n        quickFun(step_combine);\n    }\n\n    {\n        state[step_correct] = correct.unserialize(handle, state[step_filter], state[step_combine]);\n        quickFun(step_correct);\n    }\n\n    /*** Nearest neighbors ***/\n    {\n        state[step_neighbors] = index.unserialize(handle, state[step_correct]);\n        quickFun(step_neighbors);\n    }\n\n    /*** Visualization ***/\n    // Note that all awaits here are trivial, and just occur because summary()\n    // is async for general usage.  So we can chuck them in without really\n    // worrying that they're blocking anything here.\n    {\n        state[step_tsne] = tsne.unserialize(handle, state[step_neighbors]);\n        if (finishFun !== null) {\n            finishFun(step_tsne, await state[step_tsne].summary());\n        }\n    }\n\n    {\n        state[step_umap] = umap.unserialize(handle, state[step_neighbors]);\n        if (finishFun !== null) {\n            finishFun(step_umap, await state[step_umap].summary());\n        }\n    }\n\n    /*** Clustering ***/\n    {\n        state[step_kmeans] = kmeans_cluster.unserialize(handle, state[step_correct]);\n        quickFun(step_kmeans);\n    }\n\n    {\n        state[step_snn] = snn_cluster.unserialize(handle, state[step_neighbors]);\n        quickFun(step_snn);\n    }\n\n    {\n        state[step_choice] = cluster_choice.unserialize(handle, state[step_snn], state[step_kmeans]);\n        quickFun(step_choice);\n    }\n\n    /*** Markers and labels ***/\n    let norm_states = { \"RNA\": state[step_norm], \"ADT\": state[step_norm_adt] };\n    {\n        state[step_markers] = cluster_markers.unserialize(handle, permuters, state[step_filter], norm_states, state[step_choice]);\n        quickFun(step_markers);\n    }\n\n    {\n        state[step_labels] = label_cells.unserialize(handle, state[step_inputs], state[step_markers]);\n        if (finishFun !== null) {\n            finishFun(step_labels, await state[step_labels].summary());\n        }\n    }\n\n    {\n        state[step_custom] = custom_markers.unserialize(handle, permuters, state[step_filter], norm_states);\n        quickFun(step_custom);\n    }\n\n    return state;\n}\n\n/**\n * Retrieve analysis parameters from a state object.\n *\n * @param {object} state - Object containing the analysis state, produced by {@linkcode createAnalysis} or {@linkcode loadAnalysis}.\n *\n * @return {object} Object containing the analysis parameters for each step, similar to that created by {@linkcode analysisDefaults}.\n */\nexport function retrieveParameters(state) {\n    let params = {};\n    for (const [k, v] of Object.entries(state)) {\n        params[k] = v.fetchParameters();\n    }\n    return params;\n}\n\n/**\n * Create a new analysis state object consisting of a subset of cells from an existing analysis state.\n * This assumes that the existing state already contains loaded matrix data in its `inputs` property,\n * which allows us to create a cheap reference without reloading the data into memory.\n *\n * @param {object} state - State object such as that produced by {@linkcode createAnalysis} or {@linkcode linkAnalysis}.\n * This should already contain loaded data, e.g., after a run of {@linkcode runAnalysis}.\n * @param {TypedArray|Array} indices - Array containing the indices for the desired subset of cells.\n * This should be sorted and non-duplicate.\n * Any existing subset in `state` will be overridden by `indices`.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.copy=true] - Whether to make a copy of `indices` before storing it inside the returned state object.\n * If `false`, it is assumed that the caller makes no further use of the passed `indices`.\n * @param {boolean} [options.onOriginal=false] - Whether `indices` contains indices on the original dataset or on the dataset in `state`.\n * This distinction is only relevant if `state` itself contains an analysis of a subsetted dataset.\n * If `false`, the `indices` are assumed to refer to the columns of the already-subsetted dataset that exists in `state`;\n * if `true`, the `indices` are assumed to refer to the columns of the original dataset from which the subset in `state` was created.\n *\n * @return {object} A state object containing loaded matrix data in its `inputs` property.\n * Note that the other steps do not have any results, so this object should be passed through {@linkcode runAnalysis} before it can be used.\n */\nexport async function subsetInputs(state, indices, { copy = true, onOriginal = false } = {}) {\n    return create_analysis(state.inputs.createDirectSubset(indices, { copy: copy, onOriginal: onOriginal }));\n}\n","import * as scran from \"scran.js\";\n\nfunction recoverTypedArrays(object) {\n    if (Array.isArray(object)) {\n        for (var i = 0; i < object.length; i++) {\n            object[i] = recoverTypedArrays(object[i]);\n        }\n    } else if (object instanceof Object) {\n        if (\"_TypedArray_class\" in object) {\n            var cls = object[[\"_TypedArray_class\"]];\n            var vals = object[[\"_TypedArray_values\"]];\n            switch (cls) {\n                case \"Uint8Array\":\n                    object = new Uint8Array(vals.length);\n                    break;\n                case \"Int8Array\":\n                    object = new Int8Array(vals.length);\n                    break;\n                case \"Uint8Array\":\n                    object = new Uint8Array(vals.length);\n                    break;\n                case \"Uint16Array\":\n                    object = new Uint16Array(vals.length);\n                    break;\n                case \"Int16Array\":\n                    object = new Int16Array(vals.length);\n                    break;\n                case \"Uint32Array\":\n                    object = new Uint32Array(vals.length);\n                    break;\n                case \"Int32Array\":\n                    object = new Int32Array(vals.length);\n                    break;\n                case \"Uint64Array\":\n                    object = new Uint64Array(vals.length);\n                    break;\n                case \"Int64Array\":\n                    object = new Int64Array(vals.length);\n                    break;\n                case \"Float32Array\":\n                    object = new Float32Array(vals.length);\n                    break;\n                case \"Float64Array\":\n                    object = new Float64Array(vals.length);\n                    break;\n                default:\n                    throw \"unrecognized TypedArray class '\" + cls;\n            }\n            object.set(vals);\n        } else {\n            for (const [key, element] of Object.entries(object)) {\n                object[key] = recoverTypedArrays(element);\n            }\n        }\n    } \n    return object;\n}\n\nexport function convertFromVersion0(state, newfile) {\n    let fhandle = scran.createNewHDF5File(newfile);\n\n    // Storing inputs.\n    {\n        let ghandle = fhandle.createGroup(\"inputs\");\n        let params = state.inputs.parameters;\n        let phandle = ghandle.createGroup(\"parameters\");\n        phandle.writeDataSet(\"format\", \"String\", [], params.type);\n\n        let fihandle = phandle.createGroup(\"files\")\n        for (const [index, info] of params.files.entries()) {\n            let xhandle = fihandle.createGroup(String(index));\n            xhandle.writeDataSet(\"type\", \"String\", [], info.type);\n            xhandle.writeDataSet(\"name\", \"String\", [], info.name);\n\n            if (info.buffer instanceof Object) { // i.e., embedded\n                xhandle.writeDataSet(\"offset\", \"Uint32\", [], info.buffer.offset);\n                xhandle.writeDataSet(\"size\", \"Uint32\", [], info.buffer.size);\n            } else { // i.e. KanaDB links.\n                xhandle.writeDataSet(\"id\", \"String\", [], info.buffer);\n            }\n        }\n\n        // Only storing the number of cells and genes. If we want the \n        // barcode annotations, we might as well just read from the source.\n        let chandle = ghandle.createGroup(\"results\");\n        let contents = state.inputs.contents;\n        let ngenes = Object.values(contents.genes)[0].length;\n        chandle.writeDataSet(\"dimensions\", \"Int32\", null, [ngenes, contents.num_cells]);\n\n        // Unfortunately the v0 didn't contain enough information to \n        // easily reproduce the permutations, so we just save the already-permuted genes here.\n        let gehandle = chandle.createGroup(\"genes\");\n        for (const [key, val] of Object.entries(contents.genes)) {\n            gehandle.writeDataSet(key, \"String\", null, val);\n        }\n    }\n\n    // Storing quality control. This consolidates elements from \n    // several steps in v0 for simplicity.\n    {\n        let ghandle = fhandle.createGroup(\"quality_control\");\n        let phandle = ghandle.createGroup(\"parameters\");\n\n        let mparams = state.quality_control_metrics.parameters;\n        phandle.writeDataSet(\"use_mito_default\", \"Uint8\", [], Number(mparams.use_mito_default));\n        phandle.writeDataSet(\"mito_prefix\", \"String\", [], mparams.mito_prefix);\n\n        let tparams = state.quality_control_thresholds.parameters;\n        phandle.writeDataSet(\"nmads\", \"Float64\", [], tparams.nmads);\n\n        // Saving all the contents.\n        let chandle = ghandle.createGroup(\"results\");\n\n        let mhandle = chandle.createGroup(\"metrics\");\n        let mcontents = recoverTypedArrays(state.quality_control_metrics.contents);\n        mhandle.writeDataSet(\"sums\", \"Float64\", null, mcontents.sums);\n        mhandle.writeDataSet(\"detected\", \"Int32\", null, mcontents.detected);\n        mhandle.writeDataSet(\"proportion\", \"Float64\", null, mcontents.proportion);\n\n        // Converting the thresholds into arrays to handle multi-batch analyses.\n        let thandle = chandle.createGroup(\"thresholds\");\n        let tcontents = recoverTypedArrays(state.quality_control_thresholds.contents);\n        for (const x of [ \"sums\", \"detected\", \"proportion\" ]) {\n            thandle.writeDataSet(x, \"Float64\", null, [tcontents[x]]);\n        }\n\n        let disc = tcontents.discards;\n        chandle.writeDataSet(\"discards\", \"Uint8\", null, disc);\n\n        // Don't bother saving 'retained', we'll get that from 'discards'.\n    }\n\n    // Normalization just needs a group but it doesn't actually have any information right now.\n    {\n        let ghandle = fhandle.createGroup(\"normalization\");\n        ghandle.createGroup(\"parameters\");\n        ghandle.createGroup(\"results\");\n    }\n\n    // Feature selection.\n    {\n        let ghandle = fhandle.createGroup(\"feature_selection\");\n\n        let phandle = ghandle.createGroup(\"parameters\");\n        phandle.writeDataSet(\"span\", \"Float64\", [], state.feature_selection.parameters.span);\n\n        let chandle = ghandle.createGroup(\"results\");\n        let contents = recoverTypedArrays(state.feature_selection.contents);\n        for (const x of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n            chandle.writeDataSet(x, \"Float64\", null, contents[x]);\n        }\n    }\n\n    // PCA.\n    {\n        let ghandle = fhandle.createGroup(\"pca\");\n\n        let phandle = ghandle.createGroup(\"parameters\");\n        let params = state.pca.parameters;\n        for (const x of [ \"num_hvgs\", \"num_pcs\" ]) {\n            phandle.writeDataSet(x, \"Int32\", null, params[x]);\n        }\n\n        let chandle = ghandle.createGroup(\"results\");\n        let contents = recoverTypedArrays(state.pca.contents);\n\n        let ve = contents.var_exp;\n        chandle.writeDataSet(\"var_exp\", \"Float64\", null, ve);\n\n        // Save as a matrix.\n        let npcs = ve.length;\n        let ncells = contents.pcs.length / npcs;\n        chandle.writeDataSet(\"pcs\", \"Float64\", [ncells, npcs], contents.pcs); // transposed in HDF5.\n    }\n\n    // Neighbor index.\n    {\n        let ghandle = fhandle.createGroup(\"neighbor_index\");\n        let phandle = ghandle.createGroup(\"parameters\");\n        let params = state.pca.parameters;\n        phandle.writeDataSet(\"approximate\", \"Uint8\", [], Number(params.approximate));\n\n        ghandle.createGroup(\"results\");\n    }\n\n    // t-SNE details.\n    {\n        let ghandle = fhandle.createGroup(\"tsne\");\n\n        let phandle = ghandle.createGroup(\"parameters\");\n        let params = state.tsne.parameters;\n        phandle.writeDataSet(\"perplexity\", \"Float64\", [], params.perplexity);\n        phandle.writeDataSet(\"iterations\", \"Int32\", [], params.iterations);\n        phandle.writeDataSet(\"animate\", \"Uint8\", [], params.animate);\n\n        let chandle = ghandle.createGroup(\"results\");\n        let contents = recoverTypedArrays(state.tsne.contents);\n        chandle.writeDataSet(\"x\", \"Float64\", null, contents.x);\n        chandle.writeDataSet(\"y\", \"Float64\", null, contents.y);\n\n        // Don't bother saving the number of iterations.\n    }\n\n    // UMAP details.\n    {\n        let ghandle = fhandle.createGroup(\"umap\");\n\n        let phandle = ghandle.createGroup(\"parameters\");\n        let params = state.umap.parameters;\n        phandle.writeDataSet(\"num_neighbors\", \"Int32\", [], params.num_neighbors);\n        phandle.writeDataSet(\"num_epochs\", \"Int32\", [], params.num_epochs);\n        phandle.writeDataSet(\"min_dist\", \"Float64\", [], params.min_dist);\n        phandle.writeDataSet(\"animate\", \"Uint8\", [], Number(params.animate));\n\n        let chandle = ghandle.createGroup(\"results\");\n        let contents = recoverTypedArrays(state.umap.contents);\n        chandle.writeDataSet(\"x\", \"Float64\", null, contents.x);\n        chandle.writeDataSet(\"y\", \"Float64\", null, contents.y);\n\n        // Don't bother saving the number of iterations.\n    }\n\n    // K-means.\n    {\n        let ghandle = fhandle.createGroup(\"kmeans_cluster\");\n        let phandle = ghandle.createGroup(\"parameters\");\n\n        let dhandle = phandle.createDataSet(\"k\", \"Int32\", []);\n        if (\"kmeans_cluster\" in state) {\n            let params = state.kmeans_cluster.parameters;\n            dhandle.write(params.k);\n        } else {\n            dhandle.write(10);\n        }\n\n        let chandle = ghandle.createGroup(\"results\");\n        let contents = recoverTypedArrays(state.kmeans_cluster.contents);\n        if (\"kmeans_cluster\" in state) {\n            chandle.writeDataSet(\"clusters\", \"Int32\", null, contents.clusters);\n        }\n    }\n\n    // SNN graph clustering. This consolidates details from several steps in v0.\n    {\n        let ghandle = fhandle.createGroup(\"snn_graph_cluster\");\n\n        let phandle = ghandle.createGroup(\"parameters\");\n        let find_params = state.snn_find_neighbors.parameters;\n        phandle.writeDataSet(\"k\", \"Int32\", [], find_params.k);\n\n        let build_params = state.snn_build_graph.parameters;\n        phandle.writeDataSet(\"scheme\", \"String\", [], [\"rank\", \"number\", \"jaccard\"][build_params.scheme]);\n\n        let cluster_params = state.snn_cluster_graph.parameters;\n        phandle.writeDataSet(\"resolution\", \"Float64\", [], cluster_params.resolution);\n\n        let chandle = ghandle.createGroup(\"results\");\n        let contents = recoverTypedArrays(state.snn_cluster_graph.contents);\n        chandle.writeDataSet(\"clusters\", \"Int32\", null, contents.clusters);\n    }\n\n    // Choose clustering.\n    {\n        let ghandle = fhandle.createGroup(\"choose_clustering\");\n        let phandle = ghandle.createGroup(\"parameters\");\n        phandle.writeDataSet(\"method\", \"String\", [], state.choose_clustering.parameters.method);\n    }\n\n    // Marker detection.\n    {\n        let ghandle = fhandle.createGroup(\"marker_detection\");\n        ghandle.createGroup(\"parameters\");\n\n        let chandle = ghandle.createGroup(\"results\");\n        let rhandle = chandle.createGroup(\"clusters\");\n        let results = state.marker_detection.contents;\n        for (const [index, val] of results.entries()) {\n            let ihandle = rhandle.createGroup(String(index));\n            let current = recoverTypedArrays(val);\n\n            for (const x of [ \"means\", \"detected\" ]) {\n                ihandle.writeDataSet(x, \"Float64\", null, current[x]);\n            }\n\n            for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n                let rankings = current[i];\n                let rhandle = ihandle.createGroup(i);\n\n                for (const j of [ \"min\", \"mean\", \"min-rank\" ]) {\n                    let name = (j == \"min-rank\" ? \"min_rank\" : j);\n                    rhandle.writeDataSet(name, \"Float64\", null, rankings[j]);\n                }\n            }\n        }\n    }\n\n    // Custom markers.\n    {\n        let ghandle = fhandle.createGroup(\"custom_selections\");\n\n        let phandle = ghandle.createGroup(\"parameters\");\n        let shandle = phandle.createGroup(\"selections\");\n        let params = state.custom_marker_management.parameters;\n        for (const [key, val] of Object.entries(params.selections)) {\n            shandle.writeDataSet(String(key), \"Int32\", null, val);\n        }\n\n        let chandle = ghandle.createGroup(\"results\");\n        let rhandle = chandle.createGroup(\"markers\");\n        for (const [key, val] of Object.entries(state.custom_marker_management.contents.results)) {\n            let ihandle = rhandle.createGroup(String(key));\n            let current = recoverTypedArrays(val);\n\n            for (const x of [ \"means\", \"detected\" ]) {\n                ihandle.writeDataSet(x, \"Float64\", null, current[x]);\n            }\n\n            for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n                ihandle.writeDataSet(i, \"Float64\", null, current[i][\"mean\"]);\n            }\n        }\n    }\n\n}\n","import * as from_v0 from \"./legacy_v0.js\";\nimport * as scran from \"scran.js\";\nimport * as pako from \"pako\";\n\n// Must be integers!\nconst FORMAT_EMBEDDED = 0;\nconst FORMAT_LINKED = 1;\nexport const FORMAT_VERSION = 2001000;\n\nfunction numberToBuffer(number) {\n    // Store as little-endian. Probably safer\n    // than trying to cast it from a Uint64Array;\n    // not sure that endianness is strictly defined.\n    var output = new Uint8Array(8);\n\n    var i = 0;\n    while (number > 0) {\n        output[i] = number % 256;\n        number = Math.floor(number / 256);\n        i++;\n    }\n\n    return output;\n}\n\nfunction bufferToNumber(buffer) {\n    var output = 0;\n    var multiplier = 1;\n    for (const x of buffer) {\n        output += multiplier * x;\n        multiplier *= 256;\n    }\n    return output;\n}\n\nexport function createPreamble(embedded, stateSize) {\n    var combined = new ArrayBuffer(24);\n    var combined_arr = new Uint8Array(combined);\n    var offset = 0;\n\n    let format = numberToBuffer(embedded ? FORMAT_EMBEDDED : FORMAT_LINKED);\n    combined_arr.set(format, offset); \n    offset += format.length;\n\n    let version = numberToBuffer(FORMAT_VERSION);\n    combined_arr.set(version, offset); \n    offset += version.length;\n\n    let state_len = numberToBuffer(stateSize);\n    combined_arr.set(state_len, offset); \n    offset += state_len.length;\n\n    if (offset != 24) {\n        throw \"oops - accounting error in the serialization code!\";\n    }\n\n    return combined;\n}\n\nexport function parsePreamble(buffer) {\n    var offset = 0;\n    var format = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var version = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var state_len = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    return {\n        \"embedded\": (format == FORMAT_EMBEDDED),\n        \"version\": version,\n        \"state\": state_len,\n        \"offset\": offset\n    };\n}\n","import * as sutils from \"./utils/serialize.js\";\nimport * as scran from \"scran.js\";\nimport * as v0 from \"./utils/legacy_v0.js\";\nimport * as pako from \"pako\";\nexport { FORMAT_VERSION } from \"./utils/serialize.js\";\n\n/**\n * This contains a function to create and load a kana file with the browser.\n */\nexport function createKanaFileInternal(statePath, inputFiles) {\n    let embedded = (inputFiles !== null);\n    let state = scran.readFile(statePath);\n\n    let preamble = sutils.createPreamble(embedded, state.byteLength);\n\n    let total = preamble.byteLength + state.byteLength;\n    if (embedded) {\n        for (const ibuf of inputFiles) {\n            total += ibuf.byteLength;\n        }\n    }\n\n    let output = new ArrayBuffer(total);\n    let arr = new Uint8Array(output);\n    arr.set(new Uint8Array(preamble));\n\n    let offset = preamble.byteLength;\n    arr.set(new Uint8Array(state), offset);\n    offset += state.byteLength;\n\n    if (embedded) {\n        for (const ibuf of inputFiles) {\n            arr.set(new Uint8Array(ibuf), offset);\n            offset += ibuf.byteLength;\n        }\n    }\n\n    return output;\n}\n\nexport function parseKanaFileInternal(input, statePath) {\n    let parsed = sutils.parsePreamble(input);\n    let delta = parsed.offset + parsed.state;\n    let statebuffer = input.slice(parsed.offset, delta);\n\n    if (parsed.version < 1000000) {\n        var contents = pako.ungzip(new Uint8Array(statebuffer), { \"to\": \"string\" });\n        let state = JSON.parse(contents);\n        v0.convertFromVersion0(state, statePath);\n    } else {\n        scran.writeFile(statePath, new Uint8Array(statebuffer));\n    }\n\n    if (parsed.embedded) {\n        return (offset, size) => input.slice(delta + offset, delta + offset + size);\n    } else {\n        return null;\n    }\n}\n","import * as afile from \"./abstract/file.js\";\nimport * as aserialize from \"./abstract/serialize.js\";\n\n/**\n * Current version of the kana format.\n * This is encoded as an `XXXYYYZZZ` integer for version `XXX.YYY.ZZZ`, e.g., 1001002 for version 1.1.2.\n * @type {number}\n */\nexport const kanaFormatVersion = aserialize.FORMAT_VERSION;\n\n/**\n * Create a `*.kana` file from the HDF5 state file and the various data files.\n *\n * @param {string} statePath - String containing a file path to an existing HDF5 state file.\n * This should be the same as the `path` used in {@linkcode saveAnalysis}.\n * On browsers, the path should exist inside the virtual file system of the **scran.js** module.\n * @param {Array} inputFiles - Array of files to be embedded into the `*.kana` file.\n * On Node.js, this should be an array of file paths; on browsers, this should be an array of ArrayBuffers.\n * Typically this is obtained as the resolved return value of {@linkcode saveAnalysis}.\n *\n * If `null`, it is assumed that files are linked instead of embedded.\n * @param {object} [options] - Further options. \n * For Node.js, callers can specify `outputPath`, a string containing the output path for the newly created `*.kana` file.\n *\n * @return \n * For Node.js, a promise is returned that resolves to a path to a new `*.kana` file. \n * This is equal to `outputPath` if supplied, otherwise a path to a file in a temporary directory is returned.\n *\n * In browsers, an ArrayBuffer is returned containing the full contents of the new `*.kana` file.\n */\nexport function createKanaFile(statePath, inputFiles, options = {}) {\n    return aserialize.createKanaFileInternal(statePath, inputFiles, options);\n}\n\n/**\n * Parse a `*.kana` file by extracting the HDF5 state file and returning a function to extract embeddded data files.\n *\n * @param {string|ArrayBuffer} input - The input `*.kana` file.\n * For Node.js, this should be a string containing a path to the file.\n * On browsers, this should be an ArrayBuffer containing the full file contents.\n * @param {string} statePath - String containing a file path to save the HDF5 state file.\n * This will also be the path supplied to {@linkcode loadAnalysis} to load the state into memory.\n * On browsers, this will exist inside the virtual file system of the **scran.js** module.\n * @param {object} [options] - Further options. \n * For Node.js, callers can specify `stageDir`, a string containing a path to a staging directory for the extracted data files.\n *\n * @return The HDF5 state file is written to `statePath`.\n\n * In the browser, if `input` contains embedded files, a function is returned that extracts each data file given its offset and size.\n * (This should be used as `loadFun` in {@linkcode loadAnalysis}.)\n * If `input` contains linked files, `null` is returned.\n *\n * For Node.js, a promise is returned that evaluates to the aforementioned function or `null`. \n */\nexport function parseKanaFile(input, statePath, options = {}) {\n    return aserialize.parseKanaFileInternal(input, statePath, options);\n}\n\n/**\n * Remove a HDF5 file at the specified path, typically corresponding to the value of `statePath` in {@linkcode saveAnalysis} or {@linkcode loadAnalysis}.\n * Such files are typically temporary intermediates that are generated from or used to generate a `*.kana` file.\n *\n * @param {string} path Path to a HDF5 file.\n * On browsers, this path will exist inside the **scran.js** virtual filesystem.\n *\n * @return The specified file is removed.\n * If the file does not exist, this function is a no-op.\n */\nexport function removeHDF5File(path) {\n    afile.removeH5(path, { allowed: true });\n    return;\n}\n","import * as rutils from \"./readers/index.js\";\nimport * as iutils from \"./steps/inputs.js\";\nimport * as f from \"./abstract/file.js\";\n\n/**\n * Perform preflight validation of the annotations in the input matrices.\n *\n * This is usually done in regards to the consistency of gene annotations for multiple matrices.\n * If multiple matrices are present, an error is raised if any matrix does not contain gene annotations;\n * or there is no common species and feature type for annotations across all matrices;\n * or the intersection of genes is empty.\n *\n * @param {object} matrices - An object where each property is itself an object representing a single input matrix.\n * See the argument of the same name in {@linkcode runAnalysis} for more details.\n *\n * @return {object} An object containing preflight check information for the `annotations` and `features`.\n *\n * `annotations` is an object where each property corresponds to an input matrix in `matrices`.\n * Each element:\n * -  `null`, if the corresponding matrix does not contain any annotations.\n * - An object describing the cell annotation fields in the corresponding matrix.\n *   Each key of the inner object contains the name of an annotation field,\n *   while each value is an object summarizing that annotation.\n *   Each object contains:\n *   - a `type` property, indicating whether the annotation is `\"categorical\"` or \"`continuous\"`.\n *   - for categorical annotations, a `values` array containing the unique values.\n *     This may be truncated for brevity, in which case the `truncated` property is `true`.\n *   - for continuous annotations, the `min` and `max` properties containing the minimum and maximum values.\n *\n * `features` is an object where each key is the name of a modality (e.g., `\"RNA\"`, `\"ADT\"`) and the property is another object.\n * Each inner object contains:\n * - `common`: an integer containing the number of common genes across all matrices.\n *    This may be `null` if `matrices` has only a single entry that lacks gene annotation.\n * - `fields`: an object where each property corresponds to an input matrix in `matrices`.\n *    Each property is a string containing the name of the gene annotation field that was chosen for the intersection in the corresponding matrix.\n *    This may be `null` if `matrices` has only a single entry that lacks gene annotation.\n *\n * @async\n */\nexport async function validateAnnotations(matrices) {\n    let mkeys = Object.keys(matrices);\n    let multi = mkeys.length > 1;\n\n    let promises = [];\n    for (const key of mkeys) {\n        let val = matrices[key];\n        let namespace = rutils.chooseReader(val.format);\n        promises.push(namespace.preflight(val));\n    }\n    let collected = await Promise.all(promises);\n\n    let genes = {};\n    let annotations = {};\n    for (const [i, key] of Object.entries(mkeys)) {\n        let stuff = collected[i];\n        if (stuff.genes !== null) {\n            genes[key] = stuff.genes;\n        } else if (multi) {\n            throw new Error(\"cannot find gene annotations for matrix '\" + key + \"'\");\n        }\n        annotations[key] = stuff.annotations;\n    }\n\n    // Find the intersection of all modalities.\n    let modalities = null;\n    for (const [k, v] of Object.entries(genes)) {\n        if (modalities == null) {\n            modalities = new Set(Object.keys(v));\n        } else {\n            let alt = Object.keys(v).filter(x => modalities.has(x));\n            modalities = new Set(alt);\n        }\n    }\n\n    // For each modality, intersect the features.\n    let feature_info = {};\n    \n    if (modalities !== null) {\n        for (const m of modalities) {\n            feature_info[m] = {};\n\n            let genes2 = {};\n            for (const [k, v] of Object.entries(genes)) {\n                genes2[k] = v[m];\n            }\n            let results = iutils.commonFeatureTypes(genes2);\n            if (results.best_type === null) {\n                throw new Error(\"cannot find common feature types across all matrices\");\n            }\n            feature_info[m].fields = results.best_fields;\n\n            if (multi) {\n                let intersection = null;\n                for (const [k, v] of Object.entries(results.best_fields)) {\n                    let curgenes = genes2[k][v];\n                    if (intersection === null) {\n                        intersection = curgenes;\n                    } else {\n                        let dset = new Set(curgenes);\n                        intersection = intersection.filter(n => dset.has(n));\n                    }\n                }\n                feature_info[m].common = intersection.length;\n            } else {\n                feature_info[m].common = Object.values(Object.values(genes2)[0])[0].length;\n            }\n        }\n    } else {\n        feature_info[\"RNA\"] = { common: null, fields: null };\n    }\n\n    return { \n        annotations: annotations,\n        features: feature_info\n    };\n}\n","export * from \"./defaults.js\";\nexport * from \"./analysis.js\";\nexport * from \"./serialize.js\";\n\nexport { validateAnnotations } from \"./preflight.js\";\nexport { availableReaders } from \"./readers/index.js\";\nexport { setVisualizationAnimate } from \"./steps/utils/viz_parent.js\";\nexport { setCreateLink, setResolveLink, unpackText, readLines, readTable, promoteToNumber } from \"./readers/utils/index.js\";\nexport { setCellLabellingDownload } from \"./steps/cell_labelling.js\";\n\nimport * as scran from \"scran.js\";\nimport * as vizutils from \"./steps/utils/viz_parent.js\";\n\n/**\n * Initialize the backend for computation.\n * This is required prior to running any other **bakana** function.\n *\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.numberOfThreads] - Number of threads used by **scran.js**.\n * @param {boolean} [options.localFile] - Whether to use local file paths for imported modules in **scran.js**.\n * This only needs to be `true` for old Node versions that do not support file URIs.\n * \n * @return A promise that resolves to `null` when initialization is complete.\n */\nexport function initialize({ numberOfThreads = 1, localFile = false } = {}) {\n    let s = scran.initialize({ \n        numberOfThreads: numberOfThreads,\n        localFile: localFile\n    });\n    vizutils.scranOptions.localFile = localFile;\n    return s.then(x => null); \n}\n\n/**\n * Terminate the backend, in particular shutting down all workers.\n * This is typically necessary for a clean shutdown in Node.js applications.\n *\n * @return A promise that resolves to `null` when all workers are terminated.\n */\nexport function terminate() {\n    let s = scran.terminate();\n    let w = vizutils.killAllWorkers();\n    return Promise.all([s, w]).then(x => null);\n}\n\n/**\n * Call a **scran.js** function.\n * This allows client applications to operate in the same **scran.js** memory space as **bakana** functions,\n * which is not guaranteed if applications import **scran.js** on their own (e.g., due to name mangling with Webpack).\n *\n * @param {function} fun - A function that accepts the **scran.js** module object and presumably calls some of its functions.\n *\n * @return The return value of `fun`.\n */\nexport function callScran(fun) {\n    return fun(scran);\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\n\n/**\n * Wrapper around a matrix allocated on the Wasm heap.\n * @hideconstructor\n */\nexport class ScranMatrix {\n    #id;\n    #matrix;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#matrix = raw;\n        return;\n    }\n\n    /**\n     * @return {ScranMatrix} A clone of the current ScranMatrix instance.\n     * This can be freed independently of the current instance.\n     */\n    clone() {\n        return gc.call(\n            module => this.#matrix.clone(),\n            ScranMatrix\n        );\n    }\n\n    // Internal use only, not documented.\n    get matrix() {\n        return this.#matrix;\n    }\n\n    /**\n     * @return {number} Number of rows in the matrix.\n     */\n    numberOfRows() {\n        return this.#matrix.nrow();\n    }\n\n    /**\n     * @return {number} Number of columns in the matrix.\n     */\n    numberOfColumns() {\n        return this.#matrix.ncol();\n    }\n\n    /**\n     * @param {number} i - Index of the row to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     * @param {object} [options] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     *\n     * @return {Float64Array} An array containing the contents of row `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    row(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.row(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.ncol());\n            try {\n                this.#matrix.row(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /**\n     * @param {number} i - Index of the column to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     * @param {object} [options] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     *\n     * @return {Float64Array} An array containing the contents of column `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    column(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.column(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.column(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /** \n     * Free the memory on the Wasm heap for this.#matrix.\n     * This invalidates this object and all of its references.\n     */\n    free() {\n        if (this.#matrix !== null) {\n            gc.release(this.#id);\n            this.#matrix = null;\n        }\n        return;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is sparse.\n     */\n    isSparse() {\n        return this.#matrix.sparse();\n    }\n\n    /**\n     * @return {boolean} Whether the ScranMatrix contains a non-trivial organization of row identities.\n     * If `true`, the row identities can be extracted from {@linkcode ScranMatrix#identities identities};\n     * otherwise, the row identities are assumed to be consecutive increasing integers from 0 up to the number of rows.\n     */\n    isReorganized() {\n        return this.#matrix.reorganized();\n    }\n\n    // Deprecated, kept around for back-compatibility as of 0.1.1.\n    isPermuted() {\n        return this.isReorganized();\n    }\n\n    /**\n     * Obtain the identities of the rows of the matrix, assuming {@linkcode ScranMatrix#isReorganized isReorganized} returns `true`.\n     *\n     * @param {object} [options] - Optional parameters.\n     * @param {?Int32WasmArray} [options.buffer=null] Buffer to extract into.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     *\n     * @return {Int32Array} An array containing the row identities.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    identities({ buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.identities(buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createInt32WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.identities(buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper for the variance modelling results, produced by {@linkcode modelGeneVar}.\n * @hideconstructor\n */\nexport class ModelGeneVarResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.block=-1] - Number of the block for which to extract statistics.\n     * If negative, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the mean log-expression across all cells in the specified `block` \n     * (or the average across all blocks, if `block < 0`).\n     */\n    means({ block = -1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.means(block), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.block=-1] - Number of the block for which to extract statistics.\n     * If negative, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the variance of log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     */\n    variances({ block = -1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.variances(block), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.block] - Number of the block for which to extract statistics.\n     * If negative, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the fitted value of the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     */\n    fitted({ block = -1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.fitted(block), copy);\n    }\n\n    /**\n     * @param {object} [options] - Optional parameters.\n     * @param {number} [options.block] - Number of the block for which to extract statistics.\n     * If negative, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the residuals from the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     */\n    residuals({ block = -1, copy = true } = {}) {\n        return utils.possibleCopy(this.#results.residuals(block), copy);\n    }\n\n    /**\n     * @return {number} Number of blocks used.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Model the mean-variance trend across genes.\n *\n * @param {ScranMatrix} x - The normalized log-expression matrix.\n * @param {object} [options] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to fit the mean-variance trend within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {number} [options.span=0.3] - Span to use for the LOWESS trend fitting.\n *\n * @return {ModelGeneVarResults} Object containing the variance modelling results.\n */\nexport function modelGeneVar(x, { block = null, span = 0.3 } = {}) {\n    var block_data;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.model_gene_var(x.matrix, use_blocks, bptr, span),\n            ModelGeneVarResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n","import { buffer, wasmArraySpace } from \"./wasm.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Helper function to create a Uint8WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Uint8WasmArray} Uint8WasmArray on the **scran.js** Wasm heap.\n */\nexport function createUint8WasmArray(length) {\n    return wa.createUint8WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Int32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Int32WasmArray} Int32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createInt32WasmArray(length) {\n    return wa.createInt32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a BigUint64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {BigUint64WasmArray} BigUint64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createBigUint64WasmArray (length) {\n    return wa.createBigUint64WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float64WasmArray} Float64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat64WasmArray(length) {\n    return wa.createFloat64WasmArray(wasmArraySpace(), length);\n}\n\nexport function wasmifyArray(x, expected) {\n    if (x instanceof wa.WasmArray) {\n        if (expected !== null && expected != x.constructor.className) {\n            throw new Error(\"expected '\" + expected + \"', got '\" + x.constructor.className + \"'\");\n        }\n\n        if (x.space === wasmArraySpace()) {\n            // Creating a view. This ensures that callers can always call\n            // free() on the output of this function without worrying about\n            // whether they are breaking something else that was using 'x'.\n            if (x.owner === null) {\n                return x.view();\n            } else {\n                return x; // it's already a view, so we just pass it along.\n            }\n        } else {\n            // If it's a different space, then we have to make a copy.\n            return x.clone(wasmArraySpace());\n        }\n    }\n\n    let y = null;\n    if (expected !== null) {\n        y = wa.convertToWasmArray(wasmArraySpace(), x, wa.stringToClass(expected));\n    } else {\n        y = wa.convertToWasmArray(wasmArraySpace(), x);\n    }\n\n    return y;\n}\n\n/**\n * Try to free a **scran.js** object's memory (typically involving some memory allocated on the Wasm heap) by calling its `free` method.\n *\n * @param {?object} x - Instance of a **scran.js** or **wasmarrays.js** class to be freed.\n * May also be `null` or undefined.\n * \n * @return The output of `x.free()` - unless `x` is undefined or `null`, in which case nothing is performed.\n */\nexport function free(x) {\n    if (typeof x == \"undefined\" || x == null) {\n        return;\n    }\n    return x.free();\n}\n\n// Exported for back-compatibility, deprecated as of 0.3.0.\nexport function safeFree(x) {\n    return free(x);\n}\n\nexport function extractXY(ncells, coordinates) {\n    let x = new Float64Array(ncells);\n    let y = new Float64Array(ncells);\n\n    for (var i = 0; i < ncells; i++) {\n        x[i] = coordinates[2 * i];\n        y[i] = coordinates[2 * i + 1];\n    }\n\n    return { \"x\": x, \"y\": y };\n}\n\n/**\n * Possibly copy an array out of the Wasm heap, avoiding potential invalidation at the cost of some efficiency.\n *\n * @param {TypedArray} x - Array of data, possibly on the **scran.js** Wasm heap.\n * @param {(string|boolean)} copy - Copying mode to use.\n *\n * @return {TypedArray|WasmArray} The return value depends on the value of `copy`:\n * - If `copy = true`, a TypedArray copy of `x` is created with `x.slice()` and returned.\n *   This is a good default to avoid invalidation of TypedArray views on the heap upon reallocation, by creating a Javascript-owned copy for downstream use.\n * - If `copy = false`, `x` is returned directly.\n *   This avoids making any copy but runs the risk of invalidation when the Wasm heap is resized;\n *   it should only be used when no further Wasm allocations are performed within the lifetime of `x`.\n * - If `copy = \"view\"`, a WasmArray view is created from `x` and returned.\n *   This avoids any copy and is robust to invalidation but requires an extra `WasmArray.array()` call to create a TypedArray.\n */\nexport function possibleCopy(x, copy) {\n    if (copy === \"view\") {\n        if (x.buffer !== buffer()) {\n            throw new Error(\"cannot use copy = \\\"view\\\" for non-Wasm TypedArrays\");\n        }\n\n        let view_class = x.constructor.name.replace(\"Array\", \"WasmArray\");\n\n        // This function should only be used for objects generated in the\n        // buffer owned by scran.js, so we can assume that x's space is the\n        // same as that of the wasmArraySpace().\n        return wa.createWasmArrayView(wasmArraySpace(), x.length, x.byteOffset, wa.stringToClass(view_class));\n\n    } else if (copy) {\n        return x.slice();\n\n    } else {\n        return x;\n    }\n}\n\nexport function matchOptions(name, value, choices) {\n    if (choices.indexOf(value) == -1) {\n        throw new Error(\"'\" + name + \"=' should be one of '\" + choices.join(\"', '\") + \"'\");\n    }\n}\n","import loadScran from \"./wasm/scran.js\";\nimport { register } from \"wasmarrays.js\";\n\nconst cache = {};\n\n/**\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.numberOfThreads=4] - Number of threads to use for calculations.\n * This will spin up the requested number of Web Workers during module initialization.\n * @param {boolean} [options.localFile=false] - Whether or not to look for the Wasm and worker scripts locally.\n * This should only be `true` when using old versions of Node.js where file URLs are not supported, \n * and is ignored completely outside of Node.js contexts.\n *\n * @return {boolean}\n * The Wasm bindings are initialized and `true` is returned.\n * If the bindings were already initialized (e.g., by a previous call), nothing is done and `false` is returned.\n */\nexport async function initialize({ numberOfThreads = 4, localFile = false } = {}) {\n    if (\"module\" in cache) {\n        return false;\n    }\n\n    let options = {\n        scran_custom_nthreads: numberOfThreads\n    };\n\n\n    cache.module = await loadScran(options);\n    cache.space = register(cache.module);\n\n    return true;\n}\n\nexport function call(func) {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n\n    var output;\n    try {\n        output = func(cache.module);    \n    } catch (e) {\n        if (typeof e == \"number\") {\n            throw new Error(cache.module.get_error_message(e));\n        } else {\n            throw e;\n        }\n    }\n    return output;\n}\n\nexport function buffer() {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n    return cache.module.wasmMemory.buffer;\n}\n\n/**\n * @return {number} Integer containing the **wasmarrays.js** identifier for **scran.js**'s memory space.\n * This can be used with `createWasmArray()` and related functions from **wasmarrays.js**.\n */\nexport function wasmArraySpace() {\n    return cache.space;\n}\n\n/**\n * @return All worker threads are terminated and the module is deleted from the cache.\n * This is useful for cleaning up at the end of the analysis,\n * otherwise the workers will be shut done ungracefully on program exit.\n */\nexport function terminate() {\n    cache.module.PThread.terminateAllThreads();\n    delete cache.module;\n    return;\n}\n\n/**\n * @return {number} The current size of the Wasm heap, typically used for diagnostic reporting.\n */\nexport function heapSize() {\n    return buffer().byteLength;\n}\n\n/**\n * This is intended for use in web browsers to allow {@linkcode initializeSparseMatrixFromHDF5} to work properly.\n * Node applications should not call this function;\n * rather, they can just read directly from the real file system.\n *\n * @param {string} path - Path to the output file on the virtual file system.\n * @param {Uint8Array} buffer - Buffer to write to file.\n *\n * @return `buffer` is written to the binary file `path`.\n */\nexport function writeFile(path, buffer) {\n    cache.module.FS.writeFile(path, buffer);\n    return;\n}\n\n/**\n * This is intended for use in web browsers to load files written by the various HDF5 utilities.\n * Node applications should not call this function;\n * rather, they can just read directly from the real file system.\n *\n * @param {string} path - Path to a file on the virtual file system.\n *\n * @return {Uint8Array} Binary contents of the file.\n */\nexport function readFile(path) {\n    return cache.module.FS.readFile(path, { encoding: 'binary' });\n}\n\n/**\n * This is intended for use in web browsers to clean up after {@linkcode writeFile}.\n * Node applications should not call this function.\n *\n * @param {string} path - Path to the file on the virtual file system.\n *\n * @return Deletes the specified file from the virtual file system.\n */\nexport function removeFile(path) {\n    cache.module.FS.unlink(path);\n    return;\n}\n\n/**\n * This is intended for use in web browsers. \n * Node applications should not call this function.\n *\n * @param {string} path - Path to the file on the virtual file system.\n * @return {boolean} Whether the file exists.\n */\nexport function fileExists(path) {\n    return cache.module.FS.analyzePath(path).exists;\n}\n","import { buffer } from \"./globals.js\";\nimport { WasmArray } from \"./base.js\";\n\n/** \n * Wrapper around an unsigned 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint8WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint8WasmArray extends WasmArray {\n    /**\n     * @return A Uint8Array view of the allocated memory.\n     */\n    array() {\n        return new Uint8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint8WasmArray\";\n    // We're returning the name explicitly here instead of relying\n    // on the constructor.name trick, as the name of the class can\n    // change during minification.\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around a signed 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt8WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int8WasmArray extends WasmArray {\n    /**\n     * @return An Int8Array view of the allocated memory.\n     */\n    array() {\n        return new Int8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Int8WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around an unsigned 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint16WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint16WasmArray extends WasmArray {\n    /**\n     * @return A Uint16Array view of the allocated memory.\n     */\n    array() {\n        return new Uint16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint16WasmArray\";\n\n    /**\n     * Size of the each data value, in bytes.\n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage a signed 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt16WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int16WasmArray extends WasmArray {\n    /**\n     * @return An `Int16Array` view of the allocated memory.\n     */\n    array() {\n        return new Int16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Int16WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage an unsigned 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint32WasmArray extends WasmArray {\n    /**\n     * @return A Uint32Array view of the allocated memory.\n     */\n    array() {\n        return new Uint32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a signed 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int32WasmArray extends WasmArray {\n    /**\n     * @return An Int32Array view of the allocated memory.\n     */\n    array() {\n        return new Int32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Int32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage an unsigned 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigUint64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class BigUint64WasmArray extends WasmArray {\n    /**\n     * @return A BigUint64Array view of the allocated memory.\n     */\n    array() {\n        return new BigUint64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"BigUint64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a signed 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigInt64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class BigInt64WasmArray extends WasmArray {\n    /**\n     * @return An BigInt64Array view of the allocated memory.\n     */\n    array() {\n        return new BigInt64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"BigInt64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a 32-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Float32WasmArray extends WasmArray {\n    /**\n     * @return A Float32Array view of the allocated memory.\n     */\n    array() {\n        return new Float32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Float32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a 64-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Float64WasmArray extends WasmArray {\n    /**\n     * @return A Float64Array view of the allocated memory.\n     */\n    array() {\n        return new Float64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Float64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\nconst choices = {\n    \"Uint8WasmArray\": Uint8WasmArray,\n    \"Int8WasmArray\": Int8WasmArray,\n    \"Uint16WasmArray\": Uint16WasmArray,\n    \"Int16WasmArray\": Int16WasmArray,\n    \"Uint32WasmArray\": Uint32WasmArray,\n    \"Int32WasmArray\": Int32WasmArray,\n    \"BigUint64WasmArray\": BigUint64WasmArray,\n    \"BigInt64WasmArray\": BigInt64WasmArray,\n    \"Float32WasmArray\": Float32WasmArray,\n    \"Float64WasmArray\": Float64WasmArray\n};\n\n/**\n * Retrieve class from its name.\n *\n * @param {string} name - Name of the {@linkplain WasmArray} class.\n *\n * @return Class object corresponding to `name`.\n */\nexport function stringToClass(name) {\n    if (!(name in choices)){ \n        throw new Error(\"unknown WasmArray class '\" + name + \"'\");\n    }\n    return choices[name];\n}\n","import { allocate } from \"./globals.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return Instance of a {@linkplain WasmArray} subclass.\n */\nexport function createWasmArray(space, length, arrayClass) {\n    return allocate(space, length, arrayClass);\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint8WasmArray}.\n */\nexport function createUint8WasmArray(space, length) { \n    return createWasmArray(space, length, Uint8WasmArray); \n}\n\n/**\n * Create a {@linkplain Int8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int8WasmArray}.\n */\nexport function createInt8WasmArray(space, length) { \n    return createWasmArray(space, length, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint16WasmArray}.\n */\nexport function createUint16WasmArray(space, length) { \n    return createWasmArray(space, length, Uint16WasmArray); \n}\n\n/**\n * Create a {@linkplain Int16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int16WasmArray}.\n */\nexport function createInt16WasmArray(space, length) { \n    return createWasmArray(space, length, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint32WasmArray}.\n */\nexport function createUint32WasmArray(space, length) { \n    return createWasmArray(space, length, Uint32WasmArray); \n}\n\n/**\n * Create a {@linkplain Int32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int32WasmArray}.\n */\nexport function createInt32WasmArray(space, length) { \n    return createWasmArray(space, length, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain BigUint64WasmArray}.\n */\nexport function createBigUint64WasmArray(space, length) { \n    return createWasmArray(space, length, BigUint64WasmArray); \n}\n\n/**\n * Create a {@linkplain BigInt64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain BigInt64WasmArray}.\n */\nexport function createBigInt64WasmArray(space, length) { \n    return createWasmArray(space, length, BigInt64WasmArray); \n}\n\n/**\n * Create a {@linkplain Float32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Float32WasmArray}.\n */\nexport function createFloat32WasmArray(space, length) { \n    return createWasmArray(space, length, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Float64WasmArray}.\n */\nexport function createFloat64WasmArray(space, length) { \n    return createWasmArray(space, length, Float64WasmArray); \n}\n","import { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} view of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * This may need to be a certain multiple of 2, 4 or 8, depending on `arrayClass`.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return Instance of a {@linkplain WasmArray} subclass containing a view on the heap.\n */\nexport function createWasmArrayView(space, length, offset, arrayClass) {\n    return new arrayClass(space, -1, length, offset, {});\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint8WasmArray} view.\n */\nexport function createUint8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint8WasmArray); \n}\n\n/**\n * Create an {@linkplain Int8WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int8WasmArray} view.\n */\nexport function createInt8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint16WasmArray} view.\n */\nexport function createUint16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint16WasmArray); \n}\n\n/**\n * Create an {@linkplain Int16WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int16WasmArray} view.\n */\nexport function createInt16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint32WasmArray} view.\n */\nexport function createUint32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint32WasmArray); \n}\n\n/**\n * Create an {@linkplain Int32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int32WasmArray} view.\n */\nexport function createInt32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain BigUint64WasmArray} view.\n */\nexport function createBigUint64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigUint64WasmArray); \n}\n\n/**\n * Create an {@linkplain BigInt64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain BigInt64WasmArray} view.\n */\nexport function createBigInt64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigInt64WasmArray); \n}\n\n\n/**\n * Create a {@linkplain Float32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Float32WasmArray} view.\n */\nexport function createFloat32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Float64WasmArray} view.\n */\nexport function createFloat64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float64WasmArray); \n}\n"],"names":["module","exports","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","_a","Mutex","this","mutex","begin","res","fn","lock","unlock","globalObject","globalThis","self","window","global","nodeBuffer","Buffer","textEncoder","TextEncoder","hexCharCodesToInt","a","b","writeHexToUInt8","buf","str","size","length","i","index","charCodeAt","hexStringEqualsUInt8","strIndex","alpha","digit","getDigestHex","tmpBuffer","input","hashLength","p","nibble","String","fromCharCode","getUInt8Buffer","data","from","Uint8Array","buffer","byteOffset","isBuffer","ArrayBuffer","isView","byteLength","Error","encode","base64Chars","base64Lookup","getDecodeBase64Length","bufferLength","Math","floor","len","decodeBase64","bytes","encoded1","encoded2","encoded3","encoded4","MAX_HEAP","wasmMutex","wasmModuleCache","Map","WASMInterface","binary","wasmInstance","memoryView","initialized","WebAssembly","writeMemory","offset","set","getMemory","getExports","setMemorySize","totalSize","Hash_SetMemorySize","arrayOffset","Hash_GetBuffer","memoryBuffer","memory","getStateSize","DataView","getUint32","STATE_SIZE","loadWASMPromise","dispatch","has","name","asm","promise","compile","get","instantiate","setupInterface","init","bits","Hash_Init","updateUInt8Array","read","chunk","subarray","Hash_Update","update","Uint8Buffer","digestChars","digest","outputType","padding","Hash_Final","slice","save","stateOffset","Hash_GetState","stateLength","internalState","prefixedState","hash","load","state","overallLength","isDataShort","canSimplify","initParam","calculate","digestParam","Hash_Calculate","lockedCreate","wasm","wasmJson$d","mutex$e","wasmCache$e","md5","err","define","s","f","n","document","postMessage","o","test","location","protocol","h","parse","t","dynamicTyping","M","dynamicTypingFunction","transform","worker","WORKERS_SUPPORTED","r","URL","webkitURL","toString","BLOB_URL","createObjectURL","Blob","type","Worker","onmessage","_","id","userStep","userChunk","userComplete","complete","userError","error","config","workerId","NODE_STREAM_INPUT","download","l","readable","on","g","File","Object","c","stream","unparse","m","y","delimiter","BAD_DELIMITERS","filter","indexOf","quotes","Array","isArray","skipEmptyLines","newline","quoteChar","header","columns","escapeChar","escapeFormulae","RegExp","j","JSON","u","keys","fields","meta","v","join","trim","d","push","constructor","Date","stringify","replace","charAt","RECORD_SEP","UNIT_SEP","BYTE_ORDER_MARK","LocalChunkSize","RemoteChunkSize","DefaultDelimiter","Parser","E","ParserHandle","NetworkStreamer","FileStreamer","StringStreamer","ReadableStreamStreamer","jQuery","each","prop","toUpperCase","attr","toLowerCase","FileReader","files","file","inputElem","instanceConfig","extend","before","action","reason","splice","_handle","_finished","_completed","_halted","_input","_baseIndex","_partialLine","_rowCount","_start","_nextChunk","isFirstChunk","_completeResults","errors","w","chunkSize","parseInt","streamer","_config","call","parseChunk","beforeFirstChunk","paused","aborted","cursor","substring","preview","results","WORKER_ID","finished","concat","_sendError","_readChunk","_chunkLoaded","XMLHttpRequest","withCredentials","onload","onerror","_chunkError","open","downloadRequestBody","downloadRequestHeaders","setRequestHeader","send","message","status","readyState","responseText","getResponseHeader","lastIndexOf","statusText","webkitSlice","mozSlice","FileReaderSync","min","readAsText","encoding","target","pause","prototype","arguments","resume","_streamData","_streamEnd","_streamError","_checkIsFinished","shift","_streamCleanUp","removeListener","pow","abort","k","forEach","transformHeader","map","parseFloat","code","row","split","comments","abs","successful","bestDelimiter","delimitersToGuess","getCharIndex","setTimeout","S","O","x","I","T","D","A","fastMode","L","F","z","C","R","substr","linebreak","truncated","terminate","create","_arrayLikeToArray","arr","arr2","_arrayWithHoles","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","_e","TypeError","normalCompletion","didErr","_e2","_iterableToArrayLimit","_i","_s","_arr","_n","_d","_nonIterableRest","_slicedToArray","_unsupportedIterableToArray","minLen","_toConsumableArray","arrayLikeToArray","iter","unsupportedIterableToArray","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread2","source","key","defineProperty","getOwnPropertyDescriptors","defineProperties","_classPrivateMethodInitSpec","obj","privateSet","checkPrivateRedeclaration","add","_classPrivateMethodGet","receiver","_classStaticPrivateMethodGet","classConstructor","method","initializeSparseMatrixFromMatrixMarket","buf_data","output","compressed","convert_compressed","utils","gc","read_matrix_market_from_buffer","ScranMatrix","read_matrix_market_from_file","extractMatrixMarketDimensions","stats","read_matrix_market_header_from_buffer","read_matrix_market_header_from_file","sarr","array","rows","lines","initializeSparseMatrixFromHDF5","read_hdf5_matrix","unpack_strings","lengths","dec","TextDecoder","names","sofar","view","decode","repack_strings","lengths_arr","total","enc","contents","buffer_arr","check_shape","shape","full_length","reduce","H5Base","H5Group","children","H5GroupDetails","child_names","child_types","types","type_options","delete","options","new_name","H5DataSet","create_hdf5_group","shape_arr","chunk_arr","maxStringLength","compression","chunks","chunk_offset","create_hdf5_dataset","free","handle","maxlen","createDataSet","write_string_hdf5_dataset","write","child","H5File","createNewHDF5File","path","create_hdf5_file","values","deets","H5DataSetDetails","cache","x0","write_numeric_hdf5_dataset","className","vals","LoadedH5DataSet","matchVectorToRowIdentities","perm","isReorganized","identities","copy","updateRowIdentities","old","NR","numberOfRows","same","entries","val","mapping","Int32Array","matchFeatureAnnotationToRowIdentities","featureInfo","permute","guessFeatures","features","human_ens","match","human_sym","mouse_ens","mouse_sym","highest","confidence","subsetArrayCollection","subset","sub","temporaries","subcopy","wa","subsetBlock","local_buffer","sum","barr","xarr","harvest_matrices","BigInt","matrix","$$","ptr","MultiMatrix","store","current","numberOfColumns","to","subsetRows","mat","indices","wasm_indices","row_subset","subsetColumns","column_subset","splitRows","stuff","singleNull","createMultiMatrix","tkeys","clone","computePerCellQcMetrics","subsets","run","subset_offsets","tmp_subsets","nsubsets","offset_offset","offset_arr","PerCellQCMetricsResults","raw","sums","detected","subset_proportions","is_proportion","num_subsets","PerCellAdtQcMetricsResults","subset_totals","computePerCellQcFilters","metrics","block","block_data","bptr","use_blocks","PerCellQCFiltersResults","discard_sums","discard_detected","discard_proportions","discard_overall","thresholds_sums","thresholds_detected","thresholds_proportions","PerCellAdtQcFiltersResults","discard_subset_totals","thresholds_subset_totals","filterCells","filters","filter_data","tmp","discardOverall","filter_cells","groupedSizeFactors","groups","group_arr","center","priorCount","reference","grouped_size_factors","RunPCAResults","pcs","variance_explained","total_variance","num_pcs","principalComponents","numberOfPCs","runPCA","feat_data","scale","blockMethod","use_feat","fptr","run_pca","run_blocked_pca","run_multibatch_pca","ClusterKmeansResults","num_obs","num_clusters","clusters","cluster_sizes","wcss","centers","iterations","clusterKmeans","numberOfDims","numberOfCells","initMethod","initSeed","initPCASizeAdjust","pptr","cluster_kmeans","logNormCounts","sf_data","sizeFactors","allowZeros","sfptr","use_sf","log_norm_counts","BuildNeighborSearchIndexResults","num_dim","FindNearestNeighborsResults","run_data","ind_data","dist_data","runs","distances","serialize","NeighborResults","findNearestNeighbors","find_nearest_neighbors","BuildSNNGraphResults","ClusterSNNGraphMultiLevelResults","best","number","level","modularity","membership","ClusterSNNGraphWalktrapResults","ClusterSNNGraphLeidenResults","perplexityToNeighbors","perplexity","perplexity_to_k","ScoreMarkersResults","num_blocks","num_groups","group","means","summary","cohen","auc","lfc","delta_detected","scoreMarkers","group_data","score_markers","LoadLabelledReferenceResults","num_samples","num_features","num_labels","loadLabelledReferenceFromBuffers","ranks","markers","labels","matbuf","markbuf","labbuf","load_singlepp_reference","BuildLabelledReferenceResults","shared_features","create_feature_availability","mat_id_buffer","mat_id_array","available","counter","convert_reference_features","referenceFeatures","ref_id_buffer","ref_id_array","buildLabelledReference","loaded","top","nfeat","numberOfFeatures","build_singlepp_reference","expectedNumberOfFeatures","label_cells","FUN","msg","tempmat","tempbuf","use_buffer","initialize_dense_matrix","nrow","ncol","labelCells","quantile","run_singlepp","IntegrateLabelledReferencesResults","num_references","integrateCellLabels","assigned","integrated","aptrs","nrefs","numberOfReferences","assigned_arrs","aptrs_arr","fail","integrate_singlepp","mimicGetter","endsWith","freeCache","scran","changedParametersIllegal","xskip","yskip","changedParameters","xnull","ynull","yarr","xkeys","ykeys","sort","allocateCachedArray","reallocate","candidate","owner","findValidUpstreamStates","states","to_use","valid","checkIndices","max","zero$1","LITERALS$1","L_CODES$1","D_CODES$1","MAX_BITS$1","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","_dist_code","_length_code","MAX_MATCH$1","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","pending_buf","pending","send_bits","bi_valid","bi_buf","send_code","tree","bi_reverse","gen_codes","bl_count","next_code","init_block","dyn_ltree","dyn_dtree","bl_tree","END_BLOCK","opt_len","static_len","last_lit","matches","bi_windup","smaller","depth","_n2","_m2","pqdownheap","heap","heap_len","compress_block","ltree","dtree","lc","extra","lx","d_buf","l_buf","build_tree","desc","node","stree","heap_max","xbits","base","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","_tr_stored_block$1","stored_len","last","copy_block","_tr_flush_block_1","opt_lenb","static_lenb","max_blindex","strm","data_type","black_mask","detect_data_type","l_desc","d_desc","bl_desc","BL_CODES$1","build_bl_tree","strategy","lcodes","dcodes","blcodes","rank","send_all_trees","trees","_tr_init","LENGTH_CODES$1","tr_static_init","_tr_stored_block","_tr_flush_block","_tr_tally","lit_bufsize","_tr_align","STATIC_TREES","bi_flush","adler32_1","adler","pos","s1","s2","crcTable","Uint32Array","table","makeTable","crc32_1","crc","end","messages","constants$2","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","Z_NO_FLUSH$2","Z_FULL_FLUSH$1","Z_FINISH$3","Z_BLOCK$1","Z_OK$3","Z_STREAM_END$3","Z_STREAM_ERROR$2","Z_DATA_ERROR$2","Z_BUF_ERROR$1","Z_DEFAULT_COMPRESSION$1","Z_DEFAULT_STRATEGY$1","Z_DEFLATED$2","MAX_MATCH","MIN_LOOKAHEAD","HCRC_STATE","BUSY_STATE","FINISH_STATE","errorCode","zero","HASH","prev","hash_shift","hash_mask","flush_pending","avail_out","pending_out","next_out","total_out","flush_block_only","block_start","strstart","put_byte","putShortMSB","read_buf","start","avail_in","next_in","wrap","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","_w_size","window_size","hash_size","head","insert","ins_h","deflate_fast","flush","hash_head","bflush","match_length","max_lazy_match","MIN_MATCH","deflate_slow","max_insert","prev_match","match_available","Config","good_length","max_lazy","nice_length","max_chain","func","configuration_table","max_block_size","pending_buf_size","max_start","DeflateState","gzhead","gzindex","last_flush","w_bits","hash_bits","Uint16Array","HEAP_SIZE","MAX_BITS","deflateResetKeep","deflateReset","ret","deflateInit2","windowBits","memLevel","deflate_1$2","deflateInit","deflateSetHeader","deflate","beg","old_flush","text","hcrc","comment","time","os","bstate","deflate_huff","deflate_rle","deflateEnd","deflateSetDictionary","dictionary","dictLength","tmpDict","avail","deflateInfo","_has","hasOwnProperty","common","sources","STR_APPLY_UIA_OK","__","_utf8len","q","strings","c2","m_pos","str_len","buf_len","out","utf16buf","c_len","buf2binstring","zstream","toString$1","Z_NO_FLUSH$1","Z_FINISH$2","Z_OK$2","Z_STREAM_END$2","Z_DEFLATED$1","Deflate$1","opt","gzip","ended","dict","_dict_set","flush_mode","_flush_mode","onData","onEnd","inffast","_in","_out","dmax","wsize","whave","wnext","s_window","hold","lcode","dcode","lmask","dmask","here","op","from_source","lencode","distcode","lenbits","distbits","dolen","mode","dodist","sane","MAXBITS","lbase","lext","dbase","dext","inftrees","lens","lens_index","codes","table_index","work","opts","incr","fill","low","mask","here_bits","here_op","here_val","root","curr","drop","left","used","huff","base_index","offs","extra_index","Z_FINISH$1","Z_OK$1","Z_STREAM_END$1","Z_NEED_DICT$1","Z_STREAM_ERROR$1","Z_DATA_ERROR$1","Z_MEM_ERROR$1","TYPE","BAD","zswap32","InflateState","havedict","flags","check","wbits","ncode","nlen","ndist","have","lendyn","distdyn","back","was","lenfix","distfix","inflateResetKeep","inflateReset","inflateReset2","inflateInit2","virgin","fixedtables","updatewindow","src","inflate_1$2","inflateInit","inflate","put","last_bits","last_op","last_val","hbuf","order","inf_leave","xflags","extra_len","inflateEnd","inflateGetHeader","inflateSetDictionary","inflateInfo","gzheader","Inflate$1","inflate$1","inflator","last_avail_out","next_out_utf8","tail","utf8str","inflate_1$1","Inflate","inflateRaw","ungzip","constants","ungzip_1","extractHDF5Strings","content","summarizeValues","chosen","Set","Infinity","unpackText","txt","pako","readLines","decoded","pop","readTable","delim","firstOnly","ppp","promoteToNumber","as_num","Float64Array","opt1","Number","opt2","isNaN","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","reorganizeGenes","geneInfo","genes","ids","splitByFeatureType","types0","factor","by","out_mats","gene_deets","splits","matrices","LoadedFile","reader","readAsArrayBuffer","realizeMatrixMarket","realizeH5","tmppath","round","random","removeH5","allowed","formatFile","sizeOnly","afile","file2link","link2file","setCreateLink","fun","previous","setResolveLink","standardSerialize","details","embeddedSaver","serialized","eout","standardUnserialize","embeddedLoader","abbreviate","args","rutils","h5","extract_features","mhandle","fhandle","preflight","split_out","RNA","annotations","Reader","formatted","out_mat","unserialize","vhandle","dhandle2","extract_annotations","summaryLimit","ohandle","dhandle","chandle","cats","temp","mtx","gene_file","parsed","symb","annotation_file","headers","is_gz","headerFlag","diff","conv","dims","mtx_data","mm","gene_data","anno_data","is_compressed","gene_info","first","chooseReader","format","availableReaders","MtxReader","TENxReader","H5ADReader","step_name","RAW_SUBSET_OVERRIDE","InputsState","parameters","abbreviated","changed","raw_matrix","block_ids","raw_block_ids","multi_block_ids","gene_types","col","annots","block_levels","sample_factor","tmp_abbreviated","namespace","iutils","new_readers","load_and_cache","readers","block_and_cache","subset_and_cache","keep","harvest_subset_indices","onOriginal","new_cache","clone_MultiMatrix","new_params","fetchParameters","ngenes","ghandle","createGroup","phandle","formats","numbers","fihandle","curhandle","writeDataSet","shandle","schandle","field","raw_ranges","ranges","check_subset_ranges","rhandle","ihandle","undoSubset","commonFeatureTypes","scores","curgenes","best_scores","best_fields","fscore","curname","species","best_score","best_type","nscore","best_features","best_type_cols","best_features_sub","bind_single_modality","dkeys","datasets","gnames","mats","merged","mat_ptrs","name_ptrs","renamed","universe","names_arr","replacement","replacement_arr","cbind_with_rownames","internames","first_genes","bind_datasets","blocks","present","annos","inputs","curkeys","ckeys","anno_keys","combined","current_combined","ncells","nice_barr","load_datasets","raw_annotations","anno","new_matrix","multi_block_levels","gene_info_type","anno_batch","converted","levels","raw_block_levels","new_annotations","new_block_ids","new_block_levels","uniq","uniq_arr","x_arr","createPermuter","kids","all_files","curfile","idx","fohandle","solofile","sample_names","sample_groups","curfiles","raw_indices","reranges","old_ids","ref","old_ids2","console","log","permuters","splitMetricsByBlock","blockLevels","blockIds","splitThresholdsByBlock","thresholds","QualityControlStateBase","mito","ensembl","symbol","QualityControlState","inputs_module","metrics_buffer","skip","unsafe","use_mito_default","mito_prefix","nmads","unskip_metrics","unskip_filters","fetchCountMatrix","fetchGenes","sub_arr","lower_mito","startsWith","subsetProportions","internal","subset_offset","per_cell_qc_metrics","fetchBlock","numberOfMADs","per_cell_qc_filters","skipped","fetchBlockLevels","default","bids","qcutils","listed","proportion","thandle","disc","fetchDiscards","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","QCFiltersMimic","discards","sums_","detected_","proportion_","defaults","numberOfGenes","numberOfSubsets","PerCellQCMetrics_Results","proportions","thresholds_proportion","AdtQualityControlState","target_matrix","hasAvailable","igg_prefix","min_detected_drop","skip_impossible","lower_igg","per_cell_adt_qc_metrics","minDetectedDrop","per_cell_adt_qc_filters","igg_total","subsetTotals","thresholdsSubsetTotals","AdtQcFiltersMimic","igg_total_","PerCellAdtQcMetrics_Results","thresholds_igg_total","findUsefulUpstreamStates","is_valid","useful","CellFilteringState","qc_states","block_buffer","discard_buffer","vec","fetchAnnotations","discard","disc_buffer","disc_arr","remaining","listAvailableTypes","bcache","use_state","subsetSums","qc","fetchSums","oarr","NormalizationStateBase","NormalizationState","qc_module","filter_module","sum_buffer","fetchNormalizedMatrix","nutils","fetchFilteredMatrix","fetchFilteredBlock","AdtNormalizationState","exp_buffer","total_buffer","sf_buffer","norm","clust","numberOfClusters","totals","pca","lognorm","cluster","grouped","size_factors","sf","formatPCs","formatSummary","var_exp","varianceExplained","total_var","totalVariance","PcaStateBase","PcaMimic","FeatureSelectionState","norm_module","sorted_residuals","residuals","span","variances","fitted","ModelGeneVarMimic","vars","resids","means_","vars_","fitted_","resids_","permuter","reloaded","PcaState","feat","feat_module","hvg_buffer","putils","num_hvgs","block_method","choose_hvgs","ve","fetchPCs","sorted_resids","fetchSortedResiduals","threshold_at","unsorted_resids","fetchResiduals","element","AdtPcaState","CombineEmbeddingsState","pca_states","combined_buffer","num_cells","total_dims","weights","approximate","weight_arr","has_pos_weight","createPcsView","collected","curpcs","embeddings","embed_ptrs","index_ptrs","holding_ndims","holding_weights","neighbors","nembed","deletable","embed_arr","weight_offset","use_weights","allocator","total_ndim","total_len","index_arr","scale_by_neighbors_indices","ndims_arr","scale_by_neighbors_matrices","whandle","upstream","has_nonzero_weight","BatchCorrectionState","combine_module","corrected","num_neighbors","needs_correction","x_data","robustIterations","robustTrim","referencePolicy","mnn_correct","NeighborIndexState","correct","correct_module","build_neighbor_index","summaries2int","int2summaries","serializeGroupStats","no_summaries","i0","extractor","unserializeGroupStats","fetchGroupResults","rank_type","ordering","undefined","ranking","increasing","deltaDetected","reorder","thing","stat_detected","stat_mean","stat_lfc","stat_delta_d","SnnGraphClusterState","neighbor_module","graph","run_me","scheme","resolution","fetchClustersAsWasmArray","fetchIndex","my_neighbors","build_snn_graph","walktrapSteps","cluster_snn_graph_multilevel","cluster_snn_graph_walktrap","cluster_snn_graph_leiden","SNNClusterMimic","KmeansClusterState","KmeansMimic","ChooseClusteringState","snn","kmeans","snn_module","kmeans_module","MarkerDetectionState","norm_states","choice","choice_module","feat_type","numberOfGroups","khandle","num","ScoreMarkersMimic","sidx","effect_grabber","stat_grabber","cl","ahandle","CustomSelectionsState","selection","selections","key2","val2","CustomMarkersMimic","sel","analysisDefaults","feature_selection","combine_embeddings","batch_correction","tsne","animate","umap","num_epochs","min_dist","kmeans_cluster","snn_graph_cluster","choose_clustering","cell_labelling","mouse_references","human_references","qcadt","normadt","pcaadt","combine","custom","correctible_pca_steps","configureBatchCorrection","correct_method","pca_blocker","guessBatchCorrectionConfig","resp","strict","pca_blockers","approximatable_steps","configureApproximateNeighbors","guessApproximateNeighborsConfig","approximates","createTsneWorker","createUmapWorker","sendMessage","transfer","animateFun","setVisualizationAnimate","scranOptions","numberOfThreads","computeNeighbors","nn_index","rbuf","ibuf","dbuf","sendTask","payload","transferrable","promises","aworkers","worker_registry","initializeWorker","callback","iteration","killWorker","worker_id","runWithNeighbors","nn_out","run_msg","TsneState","vizutils","ready","same_neighbors","reneighbor","UmapState","downloadFun","url","fetch","ok","arrayBuffer","proxy","hs_base","mm_base","hs_loaded","mm_loaded","CellLabellingState","markers_module","compare_arrays","feat_out","fetchGeneTypes","best_feature","choose_features","feature_details","cluster_means","ngroups","fetchGroupMeans","built","used_refs","used_vals","all","feats","id_arr","loaded_arr2","ref_arr2","built_arr2","ref_arr","la2","ra2","ba2","integrate_singlepp_references","as_names","integrated_results","perref","perhandle","per_reference","rebuild","all_loaded","all_built","encodeURIComponent","buffers","gene_lines","chosen_ids","setCellLabellingDownload","step_inputs","step_qc","step_qc_adt","step_filter","step_norm","normalization","step_norm_adt","step_feat","step_pca","step_pca_adt","step_combine","step_correct","step_neighbors","step_tsne","step_umap","step_kmeans","step_snn","step_choice","step_markers","cluster_markers","step_labels","step_custom","custom_markers","createAnalysis","create_analysis","input_state","variance","snn_cluster","cluster_choice","freeAnalysis","runAnalysis","params","startFun","finishFun","quickFinish","asyncQuickFinish","quickStart","compute","saveAnalysis","embedded","saver","saved","loadAnalysis","loadFun","quickFun","retrieveParameters","recoverTypedArrays","cls","Int8Array","Int16Array","Uint64Array","Int64Array","Float32Array","FORMAT_VERSION","numberToBuffer","bufferToNumber","multiplier","createKanaFileInternal","statePath","inputFiles","preamble","stateSize","combined_arr","version","state_len","sutils","parseKanaFileInternal","delta","statebuffer","newfile","info","xhandle","gehandle","mparams","quality_control_metrics","tparams","quality_control_thresholds","mcontents","tcontents","npcs","find_params","snn_find_neighbors","build_params","snn_build_graph","cluster_params","snn_cluster_graph","marker_detection","rankings","custom_marker_management","v0","createKanaFile","aserialize","parseKanaFile","removeHDF5File","validateAnnotations","mkeys","multi","modalities","alt","feature_info","genes2","intersection","dset","initialize","localFile","column","sparse","reorganized","ModelGeneVarResults","modelGeneVar","model_gene_var","createUint8WasmArray","wasmArraySpace","createInt32WasmArray","createBigUint64WasmArray","createFloat64WasmArray","wasmifyArray","expected","space","safeFree","possibleCopy","view_class","matchOptions","choices","scran_custom_nthreads","loadScran","register","get_error_message","wasmMemory","writeFile","FS","readFile","removeFile","unlink","fileExists","analyzePath","exists","Uint8WasmArray","WasmArray","Int8WasmArray","Uint16WasmArray","Int16WasmArray","Uint32WasmArray","Int32WasmArray","BigUint64WasmArray","BigUint64Array","BigInt64WasmArray","BigInt64Array","Float32WasmArray","Float64WasmArray","stringToClass","createWasmArray","arrayClass","allocate","createWasmArrayView"],"sourceRoot":""}