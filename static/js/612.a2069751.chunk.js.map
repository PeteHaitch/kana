{"version":3,"file":"static/js/612.a2069751.chunk.js","mappings":"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","sources":["workers/KanaDBHandler.js","workers/DownloadsDBHandler.js","workers/helpers.js","utils/utils.js","workers/scran.worker.js","workers/translate.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["var kanaDB;\nvar init = null;\n\nexport function initialize() {\n  init = new Promise((resolve) => {\n    // initialize database on worker creation\n    kanaDB = indexedDB.open(\"KanaDB\", 2);\n\n    kanaDB.onupgradeneeded = (e) => {\n      var kanaDBClient = e.target.result;\n\n      // Currently purging all existing stores when the version is updated.\n      // At some point we may add a more sophisticated upgrade mechanism.\n      try {\n        kanaDBClient.deleteObjectStore(\"analysis\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"analysis_meta\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"file\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"file_meta\");\n      } catch (e) {}\n\n      kanaDBClient.createObjectStore(\"analysis\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"analysis_meta\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"file\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"file_meta\", { keyPath: \"id\" });\n    };\n\n    // Send existing stored analyses, if available.\n    kanaDB.onsuccess = () => {\n      getRecordsResolver(resolve);\n    };\n\n    kanaDB.onerror = () => {\n      resolve(null);\n    };\n  });\n\n  return init;\n}\n\nfunction getRecordsResolver(resolve, store = null) {\n  if (store === null) {\n    store = kanaDB.result\n      .transaction([\"analysis_meta\"], \"readonly\")\n      .objectStore(\"analysis_meta\");\n  }\n\n  var allAnalysis = store.getAll();\n\n  allAnalysis.onsuccess = function () {\n    let vals = allAnalysis.result;\n    vals.forEach((x) => {\n      delete x.files;\n    }); // no need to transfer that.\n    resolve(vals);\n  };\n  allAnalysis.onerror = function () {\n    resolve(null);\n  };\n}\n\n/** Helper functions **/\nasync function loadContent(id, store) {\n  return new Promise((resolve) => {\n    let request = store.get(id);\n    request.onsuccess = function () {\n      if (request.result !== undefined) {\n        resolve(request.result);\n      } else {\n        resolve(null);\n      }\n    };\n    request.onerror = function () {\n      resolve(null);\n    };\n  });\n}\n\nfunction allOK(promises) {\n  return Promise.allSettled(promises).then((vals) => {\n    for (const x of vals) {\n      if (!x) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\nexport async function getRecords() {\n  await init;\n  return new Promise((resolve) => {\n    getRecordsResolver(resolve);\n  });\n}\n\n/** Functions to save content **/\nexport async function saveFile(id, buffer) {\n  await init;\n  let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n  let file_store = trans.objectStore(\"file\");\n  let meta_store = trans.objectStore(\"file_meta\");\n\n  var meta = await loadContent(id, meta_store);\n  var refcount;\n  if (meta === null) {\n    refcount = 0;\n  } else {\n    refcount = meta[\"count\"];\n  }\n  refcount++;\n\n  var data_saving = new Promise((resolve) => {\n    var putrequest = file_store.put({ id: id, payload: buffer.buffer });\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  var ref_saving = new Promise((resolve) => {\n    meta.count = refcount;\n    var putrequest = meta_store.put(meta);\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  return allOK([data_saving, ref_saving]);\n}\n\nexport async function saveAnalysis(id, state, files, title) {\n  await init;\n  let trans = kanaDB.result.transaction(\n    [\"analysis\", \"analysis_meta\"],\n    \"readwrite\"\n  );\n  let analysis_store = trans.objectStore(\"analysis\");\n  let meta_store = trans.objectStore(\"analysis_meta\");\n\n  if (id == null) {\n    let already = await new Promise((resolve) =>\n      getRecordsResolver(resolve, meta_store)\n    );\n    id = String(already.length);\n  }\n\n  var data_saving = new Promise((resolve) => {\n    var putrequest = analysis_store.put({ id: id, payload: state.buffer });\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  var id_saving = new Promise((resolve) => {\n    var putrequest = meta_store.put({\n      id: id,\n      files: files,\n      time: Number(new Date()),\n      title: title,\n    });\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  if (await allOK([data_saving, id_saving])) {\n    return id;\n  } else {\n    return null;\n  }\n}\n\n/** Functions to load content **/\nexport async function loadFile(id) {\n  await init;\n  let file_store = kanaDB.result\n    .transaction([\"file\"], \"readonly\")\n    .objectStore(\"file\");\n\n  var meta = await loadContent(id, file_store);\n  return new Uint8Array(meta[\"payload\"]);\n}\n\nexport async function loadAnalysis(id) {\n  await init;\n  let analysis_store = kanaDB.result\n    .transaction([\"analysis\"], \"readonly\")\n    .objectStore(\"analysis\");\n  var meta = await loadContent(id, analysis_store);\n  return new Uint8Array(meta[\"payload\"]);\n}\n\n/** Functions to load content **/\nexport async function removeFile(id) {\n  await init;\n  let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n  let file_store = trans.objectStore(\"file\");\n  let meta_store = trans.objectStore(\"file_meta\");\n\n  var meta = await loadContent(id, meta_store);\n  var refcount = meta[\"count\"];\n  refcount--;\n  var promises = [];\n\n  if (refcount === 0) {\n    promises.push(\n      new Promise((resolve) => {\n        let request = file_store.remove(id);\n        request.onerror = function (event) {\n          resolve(false);\n        };\n        request.onsuccess = function (event) {\n          resolve(true);\n        };\n      })\n    );\n    promises.push(\n      new Promise((resolve) => {\n        let request = meta_store.delete(id);\n        request.onerror = function (event) {\n          resolve(false);\n        };\n        request.onsuccess = function (event) {\n          resolve(true);\n        };\n      })\n    );\n  } else {\n    promises.push(\n      new Promise((resolve) => {\n        meta.count = refcount;\n        let request = meta_store.put(meta);\n        request.onsuccess = function (event) {\n          resolve(true);\n        };\n        request.onerror = function (event) {\n          resolve(false);\n        };\n      })\n    );\n  }\n\n  return allOK(promises);\n}\n\nexport async function removeAnalysis(id) {\n  await init;\n  let trans = kanaDB.result.transaction(\n    [\"analysis\", \"analysis_meta\"],\n    \"readwrite\"\n  );\n  let analysis_store = trans.objectStore(\"analysis\");\n  let meta_store = trans.objectStore(\"analysis_meta\");\n\n  var promises = [];\n\n  promises.push(\n    new Promise((resolve) => {\n      let request = analysis_store.delete(id);\n      request.onsuccess = function (event) {\n        resolve(true);\n      };\n      request.onerror = function (event) {\n        resolve(false);\n      };\n    })\n  );\n\n  // Removing all files as well.\n  var meta = await loadContent(id, meta_store);\n  for (const [k, v] of Object.entries(meta[\"files\"][\"datasets\"])) {\n    for (const f of v[\"files\"]) {\n      promises.push(removeFile(f[\"id\"]));\n    }\n  }\n\n  promises.push(\n    new Promise((resolve) => {\n      let request = meta_store.delete(id);\n      request.onsuccess = function (event) {\n        resolve(true);\n      };\n      request.onerror = function (event) {\n        resolve(false);\n      };\n    })\n  );\n\n  return allOK(promises);\n}\n","var DownloadsDB;\nvar init = null;\n\nexport function initialize() {\n  if (init === null) {\n    init = new Promise((resolve, reject) => {\n      // initialize database on worker creation\n      DownloadsDB = indexedDB.open(\"DownloadsDB\", 3);\n\n      DownloadsDB.onupgradeneeded = (e) => {\n        var DownloadsDBClient = e.target.result;\n\n        // Currently purging all existing stores when the version is updated.\n        // At some point we may add a more sophisticated upgrade mechanism.\n        try {\n          DownloadsDBClient.deleteObjectStore(\"downloads\");\n        } catch (e) {}\n\n        DownloadsDBClient.createObjectStore(\"downloads\", { keyPath: \"url\" });\n      };\n\n      DownloadsDB.onsuccess = () => {\n        resolve(null);\n      };\n\n      DownloadsDB.onerror = () => {\n        reject(\"failed to initialize DownloadsDB\");\n      };\n    });\n  }\n\n  return init;\n}\n\nexport async function list() {\n  await init;\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readonly\");\n  let download_store = trans.objectStore(\"downloads\");\n  return download_store.getAllKeys();\n}\n\nexport async function get(url, params = null, force = false) {\n  await init;\n\n  if (!force) {\n    let trans = DownloadsDB.result.transaction([\"downloads\"], \"readonly\");\n    let download_store = trans.objectStore(\"downloads\");\n    var data_check = new Promise((resolve) => {\n      var already = download_store.get(url);\n      already.onsuccess = function (event) {\n        if (already.result !== undefined) {\n          resolve(already.result.payload);\n        } else {\n          resolve(null);\n        }\n      };\n      already.onerror = function (event) {\n        resolve(null);\n      };\n    });\n\n    var found = await data_check;\n    if (found !== null) {\n      return found;\n    }\n  }\n\n  var req;\n  if (params == null) {\n    req = fetch(url);\n  } else {\n    req = fetch(url, params);\n  }\n\n  var res = await req;\n  if (!res.ok) {\n    throw \"failed to download '\" + url + \"' (\" + res.status + \")\";\n  }\n  var buffer = await res.arrayBuffer();\n\n  // Technically, this isn't quite right, because we need to close the read\n  // transaction before opening the write transaction; multiple queries to\n  // the same URL from different workers could cause multiple downloads if\n  // they each miss each other's read check. But oh well; the auto-commit\n  // of IDB transactions means that it's hard to do any better. (Specifically,\n  // we can't do an async fetch while the transaction is still open, because\n  // it just closes before the fetch is done.)\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readwrite\");\n  let download_store = trans.objectStore(\"downloads\");\n  var data_saving = new Promise((resolve) => {\n    var putrequest = download_store.put({ url: url, payload: buffer });\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  let success = await data_saving;\n  if (!success) {\n    throw \"failed to download resources for '\" + url + \"'\";\n  }\n\n  return buffer;\n}\n\nexport async function remove(url) {\n  await init;\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readwrite\");\n  let download_store = trans.objectStore(\"downloads\");\n\n  var removal = new Promise((resolve) => {\n    let request = download_store.delete(url);\n    request.onsuccess = function (event) {\n      resolve(true);\n    };\n    request.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  return await removal;\n}\n","import * as bakana from \"bakana\";\nimport * as gesel from \"gesel\";\nimport * as remotes from \"bakana-remotes\";\nimport * as downloads from \"./DownloadsDBHandler.js\";\n\n// Evade CORS problems and enable caching.\nconst proxy = \"https://cors-proxy.aaron-lun.workers.dev\";\nasync function proxyAndCache(url) {\n  let buffer = await downloads.get(proxy + \"/\" + encodeURIComponent(url));\n  return new Uint8Array(buffer);\n}\n\nbakana.CellLabellingState.setDownload(proxyAndCache);\ngesel.setGeneDownload(proxyAndCache);\nbakana.RnaQualityControlState.setDownload(proxyAndCache);\n\ngesel.referenceDownload(async (file, start, end) => {\n  let url = gesel.referenceBaseUrl() + \"/\" + file;\n  let full = proxy + \"/\" + encodeURIComponent(url);\n  if (start == null && end == null) {\n    let buffer = await downloads.get(full);\n    return new Response(buffer);\n  } else {\n    return fetch(full + \"?start=\" + String(start) + \"&end=\" + String(end));\n  }\n});\n\ngesel.geneDownload(async (file) => {\n  let url = gesel.geneBaseUrl() + \"/\" + file;\n  let buffer = await downloads.get(proxy + \"/\" + encodeURIComponent(url));\n  return new Response(buffer);\n});\n\nremotes.ExperimentHubDataset.setDownloadFun(proxyAndCache);\nbakana.availableReaders[\"ExperimentHub\"] = remotes.ExperimentHubDataset;\n\nexport function extractBuffers(object, store) {\n  if (!object) {\n    return;\n  }\n\n  if (Array.isArray(object)) {\n    for (const element of object) {\n      extractBuffers(element, store);\n    }\n  } else if (object.constructor == Object) {\n    for (const [key, element] of Object.entries(object)) {\n      extractBuffers(element, store);\n    }\n  } else if (ArrayBuffer.isView(object)) {\n    if (!(object.buffer instanceof ArrayBuffer)) {\n      throw \"only ArrayBuffers should be in the message payload\";\n    }\n    store.push(object.buffer);\n  }\n}\n\nexport function postAttempt(step) {\n  postMessage({\n    type: `${step}_START`,\n  });\n}\n\nexport function postSuccess(step, info) {\n  if (typeof info == \"undefined\") {\n    postMessage({\n      type: `${step}_CACHE`,\n    });\n  } else {\n    var transferable = [];\n    extractBuffers(info, transferable);\n    postMessage(\n      {\n        type: `${step}_DATA`,\n        resp: info,\n      },\n      transferable\n    );\n  }\n}\n\nexport function postError(type, err, fatal) {\n  postMessage({\n    type: `${type}_ERROR`,\n    resp: {\n      reason: err.toString(),\n      fatal: fatal,\n    },\n  });\n}\n\nexport function splitMetricsByBlock(metrics, blockLevels, blockIds) {\n  var output = {};\n  var blocks = blockIds.slice();\n  for (var b = 0; b < blockLevels.length; b++) {\n    let current = {};\n    for (const [key, val] of Object.entries(metrics)) {\n      current[key] = val.slice().filter((x, i) => blocks[i] == b);\n    }\n    output[blockLevels[b]] = current;\n  }\n  return output;\n}\n\nexport function splitThresholdsByBlock(thresholds, blockLevels) {\n  var output = {};\n  for (const x of blockLevels) {\n    output[x] = {};\n  }\n\n  for (const [key, val] of Object.entries(thresholds)) {\n    for (var b = 0; b < blockLevels.length; b++) {\n      output[blockLevels[b]][key] = val[b];\n    }\n  }\n\n  return output;\n}\n\nexport async function fetchStepSummary(state, step) {\n  // do not send any response to UI if they have not changed\n  if (!state[step].changed) {\n    return undefined;\n  }\n\n  if (step === \"inputs\") {\n    let output = {};\n\n    let ngenes = {};\n    for (const a of state[step].fetchCountMatrix().available()) {\n      ngenes[a] = state[step].fetchCountMatrix().get(a).numberOfRows();\n    }\n\n    let gene_info = {};\n    for (const [k, v] of Object.entries(\n      state[step].fetchFeatureAnnotations()\n    )) {\n      let info = {};\n      for (const c of v.columnNames()) {\n        let col = v.column(c);\n        if (Array.isArray(col)) {\n          info[c] = col;\n        }\n      }\n      gene_info[k] = info;\n    }\n\n    let cell_info = {};\n    for (const c of state[step].fetchCellAnnotations().columnNames()) {\n      let col = state[step].fetchCellAnnotations().column(c);\n\n      if (Array.isArray(col) || ArrayBuffer.isView(col)) {\n        const ksumm = bakana.summarizeArray(col);\n        if (ksumm.type === \"continuous\") {\n          cell_info[c] = {\n            name: c,\n            truncated: new Set(col).size >= 50,\n            type: ksumm.type,\n          };\n        } else if (ksumm.type === \"categorical\") {\n          cell_info[c] = {\n            name: c,\n            truncated: ksumm.truncated === true,\n            type: ksumm.type,\n          };\n        }\n      }\n    }\n\n    output = {\n      num_cells: state[step].fetchCountMatrix().numberOfColumns(),\n      num_genes: ngenes,\n      genes: gene_info,\n      annotations: cell_info,\n    };\n\n    return output;\n  } else if (step === \"rna_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().subsetProportions(0),\n    };\n\n    let output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      sums: state[step].fetchFilters().thresholdsSums(),\n      detected: state[step].fetchFilters().thresholdsDetected(),\n      proportion: state[step].fetchFilters().thresholdsSubsetProportions(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    return output;\n  } else if (step === \"adt_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().subsetTotals(0)\n    };\n\n    var output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      detected: state[step].fetchFilters().thresholdsDetected(),\n      proportion: state[step].fetchFilters().thresholdsSubsetTotals(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    // We don't use sums for filtering but we do report it in the metrics,\n    // so we just add some NaNs to the thresholds for consistency.\n    for (const [k, v] of Object.entries(output.thresholds)) {\n      v.sums = NaN;\n    }\n\n    return output;\n  } else if (step === \"crispr_quality_control\") {\n    let metrics = {\n      sums: state[step].fetchMetrics().sums(),\n      detected: state[step].fetchMetrics().detected(),\n      proportion: state[step].fetchMetrics().maxProportions(),\n    };\n\n    let output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = { default: metrics };\n    } else {\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      count: state[step].fetchFilters().thresholdsMaxCount(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    return output;\n  } else if (step === \"cell_filtering\") {\n    let remaining = 0,\n      discard_vec = null;\n    const discardBuff = state[step].fetchDiscards();\n    if (discardBuff) {\n      discardBuff.forEach((x) => {\n        remaining += x == 0;\n      });\n      discard_vec = discardBuff.slice();\n    } else {\n      remaining = state.inputs.fetchCountMatrix().numberOfColumns();\n    }\n    let output = { retained: remaining, discard: discard_vec };\n    return output;\n  } else if (step === \"rna_normalization\") {\n    return {};\n  } else if (step === \"adt_normalization\") {\n    return {};\n  } else if (step === \"crispr_normalization\") {\n    return {};\n  } else if (step === \"feature_selection\") {\n    let output = {\n      means: state[step].fetchResults().means(),\n      vars: state[step].fetchResults().variances(),\n      fitted: state[step].fetchResults().fitted(),\n      resids: state[step].fetchResults().residuals(),\n    };\n    return output;\n  } else if (\n    step === \"rna_pca\" ||\n    step === \"adt_pca\" ||\n    step === \"crispr_pca\"\n  ) {\n    let pcs = state[step].fetchPCs();\n    var var_exp = pcs.varianceExplained();\n    var total_var = pcs.totalVariance();\n    var_exp.forEach((x, i) => {\n      var_exp[i] = x / total_var;\n    });\n    return {\n      var_exp: var_exp,\n    };\n  } else if (step === \"combine_embeddings\") {\n    return {};\n  } else if (step === \"batch_correction\") {\n    return {};\n  } else if (step === \"neighbor_index\") {\n    return {};\n  } else if (step === \"tsne\" || step === \"umap\") {\n    return await state[step].fetchResults();\n  } else if (step === \"kmeans_cluster\") {\n    return {};\n  } else if (step === \"snn_graph_cluster\") {\n    return {};\n  } else if (step === \"choose_clustering\") {\n    var clusters = state[step].fetchClusters();\n    return { clusters: clusters.slice() };\n  } else if (step === \"marker_detection\") {\n    return {};\n  } else if (step === \"cell_labelling\") {\n    return await state[step].fetchResults();\n  } else if (step === \"custom_selections\") {\n    return {};\n  } else if (step === \"feature_set_enrichment\") {\n    let collections = state.feature_set_enrichment.fetchCollectionDetails();\n    let sets = state.feature_set_enrichment.fetchSetDetails();\n    return {\n      collections: collections,\n      sets: {\n        names: sets.names,\n        descriptions: sets.descriptions,\n        sizes: sets.sizes.slice(),\n        collections: sets.collections.slice(),\n      },\n    };\n  }\n}\n","import { randomColor } from \"randomcolor\";\n\nexport const getColors = (data) => {\n  const palette = {\n    1: [\"#1b9e77\"],\n    2: [\"#1b9e77\", \"#d95f02\"],\n    3: [\"#1b9e77\", \"#d95f02\", \"#7570b3\"],\n    4: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\"],\n    5: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\"],\n    6: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\", \"#e6ab02\"],\n    7: [\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#7570b3\",\n      \"#e7298a\",\n      \"#66a61e\",\n      \"#e6ab02\",\n      \"#a6761d\",\n    ],\n    8: [\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#7570b3\",\n      \"#e7298a\",\n      \"#66a61e\",\n      \"#e6ab02\",\n      \"#a6761d\",\n      \"#666666\",\n    ],\n    9: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n    ],\n    10: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n    ],\n    11: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n      \"#ffff99\",\n    ],\n    12: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n      \"#ffff99\",\n      \"#b15928\",\n    ],\n  };\n\n  let cluster_count = Math.max(...data) + 1;\n  let cluster_colors = null;\n  if (cluster_count > Object.keys(palette).length) {\n    cluster_colors = randomColor({\n      luminosity: \"dark\",\n      count: cluster_count + 1,\n    });\n  } else {\n    cluster_colors = palette[cluster_count.toString()];\n  }\n\n  return cluster_colors;\n};\n\nexport function isObject(object) {\n  return typeof object === \"object\" && Array.isArray(object) === false;\n}\n\nexport const code = \"K@𝜂a#$c3ll\";\n\n// this function is from https://developer.mozilla.org/en-US/docs/Glossary/Base64\nexport function utf8_to_b64(str) {\n  return window.btoa(unescape(encodeURIComponent(str)));\n}\n\nexport function generateUID(resource) {\n  let base = `${resource.format}`;\n  switch (resource.format) {\n    case \"SummarizedExperiment\":\n      base += `::${resource.rds.name}::${resource.rds.lastModified}::${resource.rds.size}`;\n      return utf8_to_b64(base);\n    case \"MatrixMarket\":\n      for (let key of [\"genes\", \"mtx\", \"annotations\"]) {\n        if (resource[key]) {\n          base += `::${resource[key].name}::${resource[key].lastModified}::${resource[key].size}`;\n        }\n      }\n      return utf8_to_b64(base);\n    case \"10X\":\n    case \"H5AD\":\n      base += `::${resource.h5.name}::${resource.h5.lastModified}::${resource.h5.size}`;\n      return utf8_to_b64(base);\n    case \"ExperimentHub\":\n      base += `::${resource.id}`;\n      return utf8_to_b64(base);\n    case \"ZippedArtifactdb\":\n      base += `::${resource.zipname}::${resource.zipfile}`;\n      return utf8_to_b64(base);\n    default:\n      throw Error(`format: ${resource.format} does not exist`);\n      break;\n  }\n}\n\nexport const MODALITIES = [\"RNA\", \"ADT\", \"CRISPR\"];\n\nexport const getMinMax = (arr) => {\n  var max = -Number.MAX_VALUE,\n    min = Number.MAX_VALUE;\n  arr.forEach(function (x) {\n    if (max < x) {\n      max = x;\n    }\n    if (min > x) {\n      min = x;\n    }\n  });\n  return [min, max];\n};\n\nexport const defaultColor = \"#5F6B7C\";\n","import * as bakana from \"bakana\";\nimport * as scran from \"scran.js\";\nimport * as kana_db from \"./KanaDBHandler.js\";\nimport * as gesel from \"gesel\";\nimport * as hashwasm from \"hash-wasm\";\nimport * as remotes from \"bakana-remotes\";\nimport * as downloads from \"./DownloadsDBHandler.js\";\nimport JSZip from \"jszip\";\n\nimport * as translate from \"./translate.js\";\nimport {\n  extractBuffers,\n  postAttempt,\n  postSuccess,\n  postError,\n  fetchStepSummary,\n} from \"./helpers.js\";\nimport { code } from \"../utils/utils.js\";\n/***************************************/\n\nconst default_cluster = `${code}::CLUSTERS`;\nconst default_selection = `${code}::SELECTION`;\n\nlet superstate = null;\nlet preflights = {};\nlet preflights_summary = {};\nlet cache_matrix = null;\nlet cache_anno_markers = {};\n\nfunction createDataset(args) {\n  if (args.format === \"10X\") {\n    return new bakana.TenxHdf5Dataset(\n      args.h5,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"MatrixMarket\") {\n    return new bakana.TenxMatrixMarketDataset(\n      args.mtx,\n      args.genes || null,\n      args.annotations || null,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"H5AD\") {\n    return new bakana.H5adDataset(args.h5, args.options ? args.options : {});\n  } else if (args.format === \"SummarizedExperiment\") {\n    return new bakana.SummarizedExperimentDataset(\n      args.rds,\n      args.options ? args.options : {}\n    );\n  } else if (args.format === \"ExperimentHub\") {\n    return new remotes.ExperimentHubDataset(\n      args.id,\n      args.options ? args.options : {}\n    );\n  } else {\n    throw new Error(\"unknown format '\" + args.format + \"'\");\n  }\n}\n\nfunction summarizeDataset(summary, args) {\n  let cells_summary = {};\n  for (const k of summary.cells.columnNames()) {\n    cells_summary[k] = bakana.summarizeArray(summary.cells.column(k));\n  }\n  let tmp_meta = {\n    cells: {\n      columns: cells_summary,\n      numberOfCells: summary.cells.numberOfRows(),\n    },\n  };\n\n  if (args.format === \"H5AD\") {\n    tmp_meta[\"all_features\"] = {};\n    let tmod_summary = {};\n    for (const k of summary[\"all_features\"].columnNames()) {\n      tmod_summary[k] = bakana.summarizeArray(\n        summary[\"all_features\"].column(k)\n      );\n      tmod_summary[k][\"_all_\"] = summary[\"all_features\"].column(k);\n    }\n    tmp_meta[\"all_features\"] = {\n      columns: tmod_summary,\n      numberOfFeatures: summary[\"all_features\"].numberOfRows(),\n    };\n  } else if (args.format === \"SummarizedExperiment\") {\n    tmp_meta[\"modality_features\"] = {};\n    if (\"modality_features\" in summary) {\n      for (const [k, v] of Object.entries(summary.modality_features)) {\n        let tmod_summary = {};\n        for (const k of v.columnNames()) {\n          // TODO: figure out a way to deal with these later\n          if (!Array.isArray(v.column(k))) {\n            continue;\n          }\n          tmod_summary[k] = bakana.summarizeArray(v.column(k));\n          tmod_summary[k][\"_all_\"] = v.column(k);\n        }\n        tmp_meta[\"modality_features\"][k] = {\n          columns: tmod_summary,\n          numberOfFeatures: v.numberOfRows(),\n        };\n      }\n    }\n  } else {\n    tmp_meta[\"modality_features\"] = {};\n    if (\"modality_features\" in summary) {\n      for (const [k, v] of Object.entries(summary.modality_features)) {\n        let tmod_summary = {};\n        for (const k of v.columnNames()) {\n          tmod_summary[k] = bakana.summarizeArray(v.column(k));\n          tmod_summary[k][\"_all_\"] = v.column(k);\n        }\n        tmp_meta[\"modality_features\"][k] = {\n          columns: tmod_summary,\n          numberOfFeatures: v.numberOfRows(),\n        };\n      }\n    }\n  }\n\n  if (args.format === \"H5AD\") {\n    tmp_meta[\"all_assay_names\"] = summary.all_assay_names;\n  } else if (args.format === \"SummarizedExperiment\") {\n    tmp_meta[\"modality_assay_names\"] = summary.modality_assay_names;\n  }\n  return tmp_meta;\n}\n\nbakana.setVisualizationAnimate((type, x, y, iter) => {\n  postMessage(\n    {\n      type: type + \"_iter\",\n      x: x,\n      y: y,\n      iteration: iter,\n    },\n    [x.buffer, y.buffer]\n  );\n});\n\nfunction linkKanaDb(collected) {\n  return async (type, file) => {\n    let buffer = file.buffer();\n    var md5 = await hashwasm.md5(buffer);\n    var id = type + \"_\" + file.name() + \"_\" + buffer.length + \"_\" + md5;\n    var ok = await kana_db.saveFile(id, buffer);\n    if (!ok) {\n      throw new Error(\"failed to save file '\" + id + \"' to KanaDB\");\n    }\n    collected.push(id);\n    return id;\n  };\n}\n\nbakana.setResolveLink(kana_db.loadFile);\n\nasync function unserializeAllSteps(contents) {\n  const h5path = \"serialized_out.h5\";\n\n  let output;\n  try {\n    let loader = await bakana.parseKanaFile(contents, h5path);\n    let loaded_state = await bakana.loadAnalysis(h5path, loader, {\n      finishFun: postSuccess,\n    });\n\n    if (superstate !== null) {\n      await bakana.freeAnalysis(superstate);\n    }\n    superstate = loaded_state;\n\n    output = {\n      parameters: translate.toUI(bakana.retrieveParameters(superstate)),\n      other: {\n        custom_selections: superstate.custom_selections.fetchSelections(),\n      },\n    };\n  } finally {\n    bakana.callScran((scran) => scran.removeFile(h5path));\n  }\n\n  return output;\n}\n\nasync function postStepSummary(step) {\n  try {\n    let output = await fetchStepSummary(superstate, step);\n\n    postSuccess(step, output);\n  } catch (err) {\n    console.error(err);\n    postError(step, err, true);\n  }\n}\n\nfunction getMarkerStandAloneForAnnot(annotation, annotation_vec) {\n  let mds;\n  if (!(annotation in cache_anno_markers)) {\n    mds = new bakana.MarkerDetectionStandalone(\n      getMatrix(),\n      annotation_vec.ids.slice()\n    );\n\n    mds.computeAll();\n    cache_anno_markers[annotation] = mds;\n  }\n\n  return cache_anno_markers[annotation];\n}\n\nconst getAnnotation = (annotation, unfiltered = true) => {\n  let vec;\n  if (annotation === \"__batch__\") {\n    vec = superstate.inputs.fetchBlock().slice();\n  } else if (annotation.startsWith(`${code}::QC::`)) {\n    let metric = annotation.replace(`${code}::QC::`, \"\");\n    let split_metric = metric.split(\"_\");\n    let metrics =\n      superstate[\n        `${split_metric[0].toLowerCase()}_quality_control`\n      ].fetchMetrics();\n\n    if (split_metric[1] === \"sums\") {\n      vec = metrics.sums();\n    } else if (split_metric[1] === \"detected\") {\n      vec = metrics.detected();\n    } else if (split_metric[1] === \"proportion\") {\n      if (split_metric[0].toLowerCase() === \"rna\") {\n        vec = metrics.subsetProportions(0);\n      } else if (split_metric[0].toLowerCase() === \"adt\") {\n        vec = metrics.subsetTotals(0);\n      } else if (split_metric[0].toLowerCase() === \"crispr\") {\n        vec = metrics.maxProportions(0);\n      }\n    }\n  } else {\n    vec = superstate.inputs.fetchCellAnnotations().column(annotation);\n  }\n\n  if (!unfiltered) {\n    vec = superstate.cell_filtering.applyFilter(vec);\n  }\n\n  return vec.slice();\n};\n\nconst getMatrix = () => {\n  if (cache_matrix === null) {\n    cache_matrix = new scran.MultiMatrix();\n    let mapping = {\n      RNA: \"rna_normalization\",\n      ADT: \"adt_normalization\",\n      CRISPR: \"crispr_normalization\",\n    };\n    for (const [k, v] of Object.entries(mapping)) {\n      let state = superstate[v];\n      if (state.valid()) {\n        cache_matrix.add(k, state.fetchNormalizedMatrix());\n      }\n    }\n  }\n  return cache_matrix;\n};\n\n/***************************************/\n\nvar loaded;\nonmessage = function (msg) {\n  const { type, payload } = msg.data;\n\n  // console.log(\"WORKER::RCV::\", type, payload);\n\n  let fatal = false;\n  if (type === \"INIT\") {\n    fatal = true;\n    let nthreads = Math.round((navigator.hardwareConcurrency * 2) / 3);\n    let back_init = bakana.initialize({ numberOfThreads: nthreads });\n\n    let state_init = back_init.then(() => {\n      return bakana.createAnalysis();\n    });\n\n    state_init.then((x) => {\n      superstate = x;\n      postMessage({\n        type: type,\n        msg: \"Success: analysis state created\",\n      });\n    });\n\n    let kana_init = kana_db.initialize();\n    kana_init\n      .then((output) => {\n        if (output !== null) {\n          postMessage({\n            type: \"KanaDB_store\",\n            resp: output,\n            msg: \"Success: KanaDB initialized\",\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n        postMessage({\n          type: \"KanaDB_ERROR\",\n          msg: \"Error: Cannot initialize KanaDB\",\n        });\n      });\n\n    let down_init = downloads.initialize();\n    down_init\n      .then((output) => {\n        postMessage({\n          type: \"DownloadsDB_store\",\n          resp: output,\n          msg: \"Success: DownloadsDB initialized\",\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        postMessage({\n          type: \"DownloadsDB_ERROR\",\n          msg: \"Error: Cannot initialize DownloadsDB\",\n        });\n      });\n\n    try {\n      let ehub_ids = remotes.ExperimentHubDataset.availableDatasets();\n      postMessage({\n        type: \"ExperimentHub_store\",\n        resp: ehub_ids,\n        msg: \"Success: ExperimentHub initialized\",\n      });\n    } catch (err) {\n      console.error(err);\n      postMessage({\n        type: \"ExperimentHub_ERROR\",\n        msg: \"Error: Cannot access datasets in ExperimentHub\",\n      });\n    }\n\n    loaded = Promise.all([back_init, kana_init, down_init, state_init]);\n\n    loaded\n      .then(() => {\n        postMessage({\n          type: type,\n          msg: \"Success: bakana initialized\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** RUNNING AN ANALYSIS *******************/\n  } else if (type === \"RUN\") {\n    fatal = true;\n    loaded\n      .then((x) => {\n        let inputs = payload.inputs;\n        let files = inputs.files;\n\n        if (files !== null) {\n          // Extracting existing datasets from the preflights.\n          let current = {};\n          for (const [k, v] of Object.entries(files)) {\n            if (\"uid\" in v && v.uid in preflights) {\n              current[k] = preflights[v.uid];\n            } else {\n              current[k] = createDataset(v);\n            }\n            current[k].setOptions(v.options);\n          }\n\n          // Cleaning out the preflight datasets that weren't used.\n          for (const [k, v] of Object.entries(preflights)) {\n            v.clear();\n            delete preflights[k];\n          }\n\n          files = current;\n        }\n\n        let formatted = translate.fromUI(inputs, payload.params);\n        bakana\n          .runAnalysis(superstate, files, formatted, {\n            startFun: postAttempt,\n            finishFun: postStepSummary,\n          })\n          .catch((err) => {\n            console.error(err);\n            postError(type, err, fatal);\n          });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n    /**************** LOADING EXISTING ANALYSES *******************/\n  } else if (type === \"LOAD\") {\n    fatal = true;\n    let fs = payload.inputs.files;\n\n    if (fs[Object.keys(fs)[0]].format === \"kana\") {\n      let f = fs[Object.keys(fs)[0]].file;\n      loaded\n        .then(async (x) => {\n          const reader = new FileReaderSync(); // eslint-disable-line\n          const zipbuffer = reader.readAsArrayBuffer(f);\n          const unzipped = await JSZip.loadAsync(zipbuffer);\n          let config = JSON.parse(\n            await unzipped.file(\"config.json\").async(\"string\")\n          );\n\n          let buffers = {};\n          for (const x in unzipped.files) {\n            if (x.startsWith(\"datasets/\")) {\n              let current = await unzipped.files[x].async(\"uint8array\");\n              buffers[x.split(\"/\")[1]] = current;\n            }\n          }\n\n          // This re-runs the entire analysis, so throw startFun/finishFun callbacks here.\n          superstate = await bakana.unserializeConfiguration(\n            config,\n            (id) => buffers[id],\n            {\n              state: superstate,\n              startFun: postAttempt,\n              finishFun: postStepSummary,\n            }\n          );\n\n          const other = {\n            custom_selections: superstate.custom_selections.fetchSelections(),\n          };\n\n          var transferrable = [];\n          extractBuffers(config.parameters, transferrable);\n          postMessage(\n            {\n              type: \"loadedParameters\",\n              resp: {\n                parameters: config.parameters,\n                other: other,\n              },\n            },\n            transferrable\n          );\n\n          let features = {};\n          let resp = {};\n          const loaded_ds = superstate.inputs.fetchDatasets();\n          for (const [k, v] of Object.entries(loaded_ds)) {\n            let res = await v.previewPrimaryIds({ cache: true });\n\n            for (const i_mod of [\"RNA\", \"ADT\", \"CRISPR\"]) {\n              if (i_mod in res) {\n                if (!features[i_mod]) {\n                  features[i_mod] = [res[i_mod]];\n                } else {\n                  features[i_mod].push(res[i_mod]);\n                }\n              }\n            }\n          }\n\n          for (const [k, v] of Object.entries(features)) {\n            resp[k] = gesel.intersect(v).length;\n          }\n\n          postMessage({\n            type: \"PREFLIGHT_OPTIONS_DATA\",\n            resp: resp,\n            msg: \"Success: PREFLIGHT_OPTIONS done\",\n          });\n        })\n        .catch((err) => {\n          console.error(err);\n          postError(type, err, fatal);\n        });\n    } else if (fs[Object.keys(fs)[0]].format === \"kanadb\") {\n      loaded\n        .then(async (x) => {\n          var id = fs[Object.keys(fs)[0]].file;\n\n          const jsonbuffer = await kana_db.loadAnalysis(id);\n          const dec = new TextDecoder();\n          let config = JSON.parse(dec.decode(jsonbuffer));\n\n          superstate = await bakana.unserializeConfiguration(\n            config,\n            kana_db.loadFile,\n            {\n              state: superstate,\n              startFun: postAttempt,\n              finishFun: postStepSummary,\n            }\n          );\n        })\n        .catch((err) => {\n          console.error(err);\n          postError(type, err, fatal);\n        });\n    }\n    /**************** SAVING EXISTING ANALYSES *******************/\n  } else if (type === \"EXPORT\") {\n    loaded\n      .then(async (x) => {\n        let buffers = [];\n        let saver = (name, format, file) => {\n          let id = String(buffers.length);\n          buffers.push(file.buffer());\n          return id;\n        };\n\n        // Returns a configuration object.\n        let collected = await bakana.serializeConfiguration(superstate, saver);\n\n        // Let's zip it all up!\n        const zipper = new JSZip();\n        zipper.file(\"config.json\", JSON.stringify(collected));\n        for (var i = 0; i < buffers.length; i++) {\n          zipper.file(\"datasets/\" + String(i), buffers[i]);\n        }\n        let zipbuffer = await zipper.generateAsync({ type: \"uint8array\" });\n        postMessage(\n          {\n            type: \"exportState\",\n            resp: zipbuffer,\n            msg: \"Success: application state exported\",\n          },\n          [zipbuffer.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"EXPORT_RDS\") {\n    loaded\n      .then(async (x) => {\n        let files = await bakana.saveSingleCellExperiment(\n          superstate,\n          \"results\",\n          {\n            forceBuffer: true,\n          }\n        );\n        let zipbuffer = await bakana.zipFiles(files);\n\n        postMessage(\n          {\n            type: \"exportRDSState\",\n            resp: zipbuffer,\n            msg: \"Success: application state exported\",\n          },\n          [zipbuffer.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"SAVEKDB\") {\n    // save analysis to inbrowser indexedDB\n    var title = payload.title;\n    loaded\n      .then(async (x) => {\n        let buffers = [];\n        let saver = async (name, format, file) => {\n          // basically linkKanaDb with an extra arg.\n          let buffer = file.buffer();\n          var md5 = await hashwasm.md5(buffer);\n          var id = type + \"_\" + file.name() + \"_\" + buffer.length + \"_\" + md5;\n          var ok = await kana_db.saveFile(id, buffer);\n          if (!ok) {\n            throw new Error(\"failed to save file '\" + id + \"' to KanaDB\");\n          }\n          buffers.push(id);\n          return id;\n        };\n\n        let collected = await bakana.serializeConfiguration(superstate, saver);\n        const enc = new TextEncoder();\n        let config = enc.encode(JSON.stringify(collected));\n        let id = await kana_db.saveAnalysis(null, config, collected, title);\n\n        if (id !== null) {\n          let recs = await kana_db.getRecords();\n          postMessage({\n            type: \"KanaDB_store\",\n            resp: recs,\n            msg: `Success: Saved analysis to browser (${id})`,\n          });\n        } else {\n          postMessage({\n            type: \"KanaDB_ERROR\",\n            msg: `Fail: Cannot save analysis to browser`,\n          });\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** KANADB EVENTS *******************/\n  } else if (type === \"REMOVEKDB\") {\n    // remove a saved analysis\n    var id = payload.id;\n    kana_db\n      .removeAnalysis(id)\n      .then(async (output) => {\n        if (output) {\n          let recs = await kana_db.getRecords();\n          postMessage({\n            type: \"KanaDB_store\",\n            resp: recs,\n            msg: `Success: Removed file from cache (${id})`,\n          });\n        } else {\n          postMessage({\n            type: \"KanaDB_ERROR\",\n            msg: `fail: cannot remove file from cache (${id})`,\n          });\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"PREFLIGHT_OPTIONS\") {\n    loaded.then(async (x) => {\n      let resp = {};\n      try {\n        let counter = 0;\n        let features = {};\n\n        for (const [k, v] of Object.entries(payload.inputs.files)) {\n          if (\"uid\" in v) {\n            let ds = preflights[v.uid];\n\n            if (\n              Array.isArray(payload.options) &&\n              payload.options.length > counter\n            ) {\n              ds.setOptions(payload.options[counter]);\n\n              let res = await ds.previewPrimaryIds({ cache: true });\n\n              for (const i_mod of [\"RNA\", \"ADT\", \"CRISPR\"]) {\n                if (i_mod in res) {\n                  if (!features[i_mod]) {\n                    features[i_mod] = [res[i_mod]];\n                  } else {\n                    features[i_mod].push(res[i_mod]);\n                  }\n                }\n              }\n            }\n          }\n          counter++;\n        }\n\n        for (const [k, v] of Object.entries(features)) {\n          if (v.length !== payload.options.length) {\n            resp[k] = 0;\n          } else {\n            resp[k] = gesel.intersect(v).length;\n          }\n        }\n      } catch (e) {\n        console.error(e);\n        resp.status = \"ERROR\";\n        resp.reason = e.toString();\n      }\n\n      postMessage({\n        type: \"PREFLIGHT_OPTIONS_DATA\",\n        resp: resp,\n        msg: \"Success: PREFLIGHT_OPTIONS done\",\n      });\n    });\n  } else if (type === \"PREFLIGHT_INPUT\") {\n    loaded\n      .then(async (x) => {\n        let resp = {};\n        try {\n          // Registering the UIDs of each new dataset.\n          let current = {};\n          let summary = {};\n          for (const [k, v] of Object.entries(payload.inputs.files)) {\n            if (\"uid\" in v) {\n              if (!(v.uid in preflights)) {\n                preflights[v.uid] = createDataset(v);\n                preflights_summary[v.uid] = await preflights[v.uid].summary({\n                  cache: true,\n                });\n              }\n              current[k] = preflights[v.uid];\n              summary[k] = summarizeDataset(preflights_summary[v.uid], v);\n            } else {\n              let tmp_dataset = createDataset(v);\n              current[k] = tmp_dataset;\n              summary[k] = summarizeDataset(\n                await current[k].summary({ cache: true }),\n                v\n              );\n            }\n          }\n\n          resp.status = \"SUCCESS\";\n          resp.details = summary;\n          // resp.details = await bakana.validateAnnotations(current, { cache: true });\n          // i guess iterate through each dataset and call summary\n        } catch (e) {\n          console.error(e);\n          resp.status = \"ERROR\";\n          resp.reason = e.toString();\n        }\n\n        postMessage({\n          type: \"PREFLIGHT_INPUT_DATA\",\n          resp: resp,\n          msg: \"Success: PREFLIGHT_INPUT done\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** VERSUS MODE *******************/\n  } else if (type === \"computeVersusClusters\") {\n    loaded\n      .then((x) => {\n        let rank_type = payload.rank_type;\n        let modality = payload.modality;\n        let annotation = payload.annotation;\n\n        let resp, raw_res;\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.computeVersus(\n            payload.left,\n            payload.right\n          );\n\n          resp = bakana.formatMarkerResults(\n            raw_res.results[modality],\n            raw_res.left,\n            rank_type\n          );\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          raw_res = mds.computeVersus(\n            annotation_vec.levels.indexOf(payload.left),\n            annotation_vec.levels.indexOf(payload.right)\n          );\n          resp = bakana.formatMarkerResults(\n            raw_res.results[modality],\n            raw_res.left,\n            rank_type\n          );\n        }\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"computeVersusClusters\",\n            resp: resp,\n            msg: \"Success: COMPUTE_VERSUS_CLUSTERS done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeVersusSelections\") {\n    loaded\n      .then((x) => {\n        let rank_type = payload.rank_type;\n        let res = superstate.custom_selections.computeVersus(\n          payload.left,\n          payload.right\n        );\n        let resp = bakana.formatMarkerResults(\n          res[\"results\"][payload.modality],\n          payload.left,\n          rank_type\n        );\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"computeVersusSelections\",\n            resp: resp,\n            msg: \"Success: COMPUTE_VERSUS_SELECTIONS done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** OTHER EVENTS FROM UI *******************/\n  } else if (type === \"getMarkersForCluster\") {\n    loaded\n      .then((x) => {\n        let cluster = payload.cluster;\n        let rank_type = payload.rank_type;\n        let modality = payload.modality;\n        let annotation = payload.annotation;\n        let resp;\n        let raw_res;\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.fetchResults()[modality];\n          resp = bakana.formatMarkerResults(raw_res, cluster, rank_type);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          raw_res = mds.fetchResults()[modality];\n          // cache_anno_markers[annotation][modality];\n\n          resp = bakana.formatMarkerResults(\n            raw_res,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type\n          );\n        }\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"setMarkersForCluster\",\n            resp: resp,\n            msg: \"Success: GET_MARKER_GENE done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getGeneExpression\") {\n    loaded\n      .then((x) => {\n        let row_idx = payload.gene;\n        let modality = payload.modality;\n\n        const matrix = getMatrix(modality);\n        let vec;\n        if (modality === \"RNA\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else if (modality === \"ADT\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else if (modality === \"CRISPR\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else {\n          throw new Error(\"unknown feature type '\" + modality + \"'\");\n        }\n\n        postMessage(\n          {\n            type: \"setGeneExpression\",\n            resp: {\n              gene: row_idx,\n              expr: vec,\n            },\n            msg: \"Success: GET_GENE_EXPRESSION done\",\n          },\n          [vec.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeCustomMarkers\") {\n    loaded\n      .then((x) => {\n        superstate.custom_selections.addSelection(\n          payload.id,\n          payload.selection\n        );\n        postMessage({\n          type: \"computeCustomMarkers\",\n          msg: \"Success: COMPUTE_CUSTOM_MARKERS done\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getMarkersForSelection\") {\n    loaded\n      .then((x) => {\n        let raw_res = superstate.custom_selections.fetchResults(\n          payload.cluster\n        )[payload.modality];\n        let resp = bakana.formatMarkerResults(\n          raw_res,\n          payload.cluster,\n          payload.rank_type\n        );\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"setMarkersForCustomSelection\",\n            resp: resp,\n            msg: \"Success: GET_MARKER_GENE done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"removeCustomMarkers\") {\n    loaded\n      .then((x) => {\n        superstate.custom_selections.removeSelection(payload.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"animateTSNE\") {\n    loaded\n      .then(async (x) => {\n        await superstate.tsne.animate();\n        postSuccess(\"tsne\", await superstate.tsne.fetchResults());\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"animateUMAP\") {\n    loaded\n      .then(async (x) => {\n        await superstate.umap.animate();\n        postSuccess(\"umap\", await superstate.umap.fetchResults());\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getAnnotation\") {\n    loaded\n      .then((x) => {\n        let annot = payload.annotation;\n        let vec, output;\n\n        vec = getAnnotation(annot, !!payload.unfiltered);\n\n        if (ArrayBuffer.isView(vec)) {\n          output = {\n            type: \"array\",\n            values: vec.slice(),\n          };\n        } else {\n          let uniq_vals = [];\n          let uniq_map = {};\n          let indices = new Int32Array(vec.length);\n          vec.map((x, i) => {\n            if (!(x in uniq_map)) {\n              uniq_map[x] = uniq_vals.length;\n              uniq_vals.push(x);\n            }\n            indices[i] = uniq_map[x];\n          });\n\n          output = {\n            type: \"factor\",\n            index: indices,\n            levels: uniq_vals,\n          };\n        }\n\n        let extracted = [];\n        extractBuffers(output, extracted);\n        postMessage(\n          {\n            type: \"setAnnotation\",\n            resp: {\n              annotation: annot,\n              values: output,\n            },\n            msg: \"Success: GET_ANNOTATION done\",\n          },\n          extracted\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeFeaturesetSummary\") {\n    loaded\n      .then(async (x) => {\n        let { annotation, rank_type, cluster } = payload;\n        let index = rank_type.indexOf(\"-\");\n        let resp;\n        if (default_cluster === annotation) {\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            superstate.marker_detection.fetchResults()[\"RNA\"],\n            cluster,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        } else if (default_selection === annotation) {\n          let sel_indices =\n            superstate.custom_selections.fetchSelectionIndices(cluster);\n          let num_cells = superstate.cell_filtering\n            .fetchFilteredMatrix()\n            .numberOfColumns();\n\n          let arr_sel_indices = new Uint8Array(num_cells);\n          sel_indices.map((x) => arr_sel_indices.set([1], x));\n          let annotation_vec = scran.factorize(arr_sel_indices);\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          let anno_markers = mds.fetchResults()[\"RNA\"];\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers,\n            annotation_vec.levels.indexOf(1),\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          let anno_markers = mds.fetchResults()[\"RNA\"];\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"computeFeaturesetVSSummary\") {\n    loaded\n      .then(async (x) => {\n        let { annotation, rank_type, left, right } = payload;\n        let index = rank_type.indexOf(\"-\");\n        let resp;\n        if (default_cluster === annotation) {\n          let raw_res = superstate.marker_detection.computeVersus(left, right);\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            raw_res.results[\"RNA\"],\n            raw_res.left,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        } else if (default_selection === annotation) {\n          let anno_markers = superstate.custom_selections.computeVersus(\n            left,\n            right\n          );\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers.results[\"RNA\"],\n            0,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          let raw_res = mds.computeVersus(\n            annotation_vec.levels.indexOf(payload.left),\n            annotation_vec.levels.indexOf(payload.right)\n          );\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            raw_res.results[\"RNA\"],\n            raw_res.left,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getFeatureScores\") {\n    loaded\n      .then((x) => {\n        let { index } = payload;\n\n        let resp =\n          superstate.feature_set_enrichment.computePerCellScores(index);\n        postSuccess(\"setFeatureScores\", resp);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getFeatureGeneIndices\") {\n    loaded\n      .then((x) => {\n        let { index, cluster, annotation, modality, rank_type } = payload;\n\n        let resp =\n          superstate.feature_set_enrichment.fetchFeatureSetIndices(index);\n\n        let raw_res, marker_resp;\n\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.fetchResults()[modality];\n          marker_resp = bakana.formatMarkerResults(raw_res, cluster, rank_type);\n        } else if (default_selection === annotation) {\n          raw_res = superstate.custom_selections.fetchResults(payload.cluster)[\n            payload.modality\n          ];\n          marker_resp = bakana.formatMarkerResults(\n            raw_res,\n            payload.cluster,\n            payload.rank_type\n          );\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          raw_res = mds.fetchResults()[modality];\n          // cache_anno_markers[annotation][modality];\n\n          marker_resp = bakana.formatMarkerResults(\n            raw_res,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type\n          );\n        }\n\n        let indices = marker_resp.ordering\n          .map((x, i) => (resp.includes(x) ? i : -100))\n          .filter((x) => x !== -100);\n\n        let filtered_marker_resp = {};\n        for (const [k, v] of Object.entries(marker_resp)) {\n          filtered_marker_resp[k] = v\n            .map((x, i) => (indices.includes(i) ? x : -100))\n            .filter((x) => x !== -100);\n        }\n\n        postSuccess(\"setFeatureGeneIndices\", filtered_marker_resp);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else {\n    console.error(`Type: ${type} not defined`);\n    postError(type, `Type: ${type} not defined`, fatal);\n  }\n};\n","/*****************************************************\n * This file is intended to be vendored into kanapi,\n * so you shouldn't add too many dependencies here.\n * The canonical version of the file is expected to\n * live at src/workers/translate.js in the kana repo.\n *****************************************************/\n\nimport * as bakana from \"bakana\";\n\nconst mappings = {\n  quality_control: {\n    use_mito_default: [\"qc\", \"qc-usemitodefault\"],\n    mito_prefix: [\"qc\", \"qc-mito\"],\n    nmads: [\"qc\", \"qc-nmads\"],\n    skip: [\"qc\", \"skip\"],\n  },\n  adt_quality_control: {\n    nmads: [\"adt_qualitycontrol\", \"nmads\"],\n    min_detected_drop: [\"adt_qualitycontrol\", \"min_detected_drop\"],\n    igg_prefix: [\"adt_qualitycontrol\", \"igg_prefix\"],\n    skip: [\"adt_qualitycontrol\", \"skip\"],\n  },\n  adt_normalization: {\n    num_pcs: [\"adt_normalization\", \"num_pcs\"],\n    num_clusters: [\"adt_normalization\", \"num_clusters\"],\n  },\n  feature_selection: {\n    span: [\"fSelection\", \"fsel-span\"],\n  },\n  pca: {\n    num_hvgs: [\"pca\", \"pca-hvg\"],\n    num_pcs: [\"pca\", \"pca-npc\"],\n  },\n  adt_pca: {\n    num_pcs: [\"adt_pca\", \"num_pcs\"],\n  },\n  combine_embeddings: {\n    weights: [\"combine_embeddings\", \"weights\"],\n  },\n  batch_correction: {\n    // method is handled by configureBatchCorrection.\n    num_neighbors: [\"batch_correction\", \"num_neighbors\"],\n  },\n  choose_clustering: {\n    method: [\"cluster\", \"clus-method\"],\n  },\n  // Neighbor indexing is handled by configureApproximateNeighbors.\n  tsne: {\n    perplexity: [\"tsne\", \"tsne-perp\"],\n    iterations: [\"tsne\", \"tsne-iter\"],\n    animate: [\"tsne\", \"animate\"],\n  },\n  umap: {\n    num_neighbors: [\"umap\", \"umap-nn\"],\n    num_epochs: [\"umap\", \"umap-epochs\"],\n    min_dist: [\"umap\", \"umap-min_dist\"],\n    animate: [\"umap\", \"animate\"],\n  },\n  kmeans_cluster: {\n    k: [\"cluster\", \"kmeans-k\"],\n  },\n  snn_graph_cluster: {\n    k: [\"cluster\", \"clus-k\"],\n    scheme: [\"cluster\", \"clus-scheme\"],\n    resolution: [\"cluster\", \"clus-res\"],\n  },\n  cell_labelling: {\n    human_references: [\"annotateCells\", \"annotateCells-human_references\"],\n    mouse_references: [\"annotateCells\", \"annotateCells-mouse_references\"],\n  },\n};\n\nexport function fromUI(inputs, params) {\n  let formatted = params;\n\n  // Replacing all 1:1 mappings.\n  let safeReplace = (step, par, value) => {\n    if (typeof value == \"undefined\") {\n      throw new Error(\n        \"cannot assign undefined parameter to '\" + step + \".\" + par + \"'\"\n      );\n    }\n    if (!(step in formatted)) {\n      throw new Error(\"unknown analysis step '\" + step + \"'\");\n    }\n    let target = formatted[step];\n    if (!(par in target)) {\n      throw new Error(\n        \"unknown analysis parameter '\" + par + \"' for step '\" + step + \"'\"\n      );\n    }\n    target[par] = value;\n  };\n\n  safeReplace(\"inputs\", \"block_factor\", inputs.batch);\n  safeReplace(\"inputs\", \"subset\", inputs.subset);\n\n  // Special handling for multi-step parameters.\n  bakana.configureBatchCorrection(formatted, params.batch_correction[\"method\"]);\n  bakana.configureApproximateNeighbors(\n    formatted,\n    params.neighbor_index[\"approximate\"]\n  );\n\n  // Simplify the combine_embeddings if we see it is all equal.\n  if (formatted.combine_embeddings.weights !== null) {\n    let uniq_weights = new Set([\n      formatted.combine_embeddings.rna_weight,\n      formatted.combine_embeddings.adt_weight,\n      formatted.combine_embeddings.crispr_weight,\n    ]);\n    if (uniq_weights.size <= 1) {\n      formatted.combine_embeddings.weights = null;\n    }\n  }\n\n  return formatted;\n}\n\nexport function toUI(params) {\n  // Setting all 1:1 mappings.\n  let safeExtract = (step, par) => {\n    if (!(step in params)) {\n      throw new Error(\n        \"no available step '\" + step + \"' in the supplied parameters\"\n      );\n    }\n\n    let curstep = params[step];\n    if (!(par in curstep)) {\n      throw new Error(\n        \"no available parameter '\" + par + \"' in step '\" + step + \"'\"\n      );\n    }\n\n    return curstep[par];\n  };\n\n  let reversed = {\n    inputs: {\n      batch: safeExtract(\"inputs\", \"sample_factor\"),\n      subset: safeExtract(\"inputs\", \"subset\"),\n    },\n  };\n\n  for (const [step, spars] of Object.entries(mappings)) {\n    for (const [par, target] of Object.entries(spars)) {\n      if (!(target[0] in reversed)) {\n        reversed[target[0]] = {};\n      }\n\n      let currev = reversed[target[0]];\n      if (target[1] in currev) {\n        throw new Error(\n          \"duplicate entry for parameter '\" + target[0] + \".\" + target[1] + \"'\"\n        );\n      }\n      currev[target[1]] = safeExtract(step, par);\n    }\n  }\n\n  // Mopping up the rest.\n  reversed.batch_correction.method = bakana.guessBatchCorrectionConfig(params);\n  reversed.ann = {\n    approximate: bakana.guessApproximateNeighborsConfig(params),\n  };\n\n  // Converting it into a dictionary for easier consumption by the UI.\n  if (reversed.combine_embeddings.weights === null) {\n    reversed.combine_embeddings.weights = {};\n  }\n\n  return reversed;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [841,51,754], function() { return __webpack_require__(9612); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"51\":\"f7135b8d\",\"484\":\"2675bdb1\",\"754\":\"b5725fde\",\"841\":\"3bb3130c\",\"909\":\"5f72aea9\",\"933\":\"e17c1ca2\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t612: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([841,51,754].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["kanaDB","init","getRecordsResolver","resolve","store","arguments","length","undefined","result","transaction","objectStore","allAnalysis","getAll","onsuccess","vals","forEach","x","files","onerror","loadContent","_x","_x2","_loadContent","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","abrupt","Promise","request","get","stop","allOK","promises","allSettled","then","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","f","getRecords","_getRecords","_callee2","_context2","saveFile","_x3","_x4","_saveFile","_callee3","buffer","trans","file_store","meta_store","meta","refcount","data_saving","ref_saving","_context3","sent","putrequest","put","payload","event","count","saveAnalysis","_x5","_x6","_x7","_x8","_saveAnalysis","_callee4","state","title","analysis_store","already","id_saving","_context4","String","time","Number","Date","loadFile","_x9","_loadFile","_callee5","_context5","Uint8Array","loadAnalysis","_x10","_loadAnalysis","_callee6","_context6","removeFile","_x11","_removeFile","_callee7","_context7","push","remove","delete","_removeAnalysis","_callee8","_i","_Object$entries","_Object$entries$_i","v","_iterator2","_step2","_context8","Object","entries","_slicedToArray","DownloadsDB","_get","url","params","force","_trans","_download_store","data_check","found","req","res","download_store","_args2","fetch","ok","status","arrayBuffer","proxy","proxyAndCache","_proxyAndCache","downloads","encodeURIComponent","extractBuffers","object","Array","isArray","constructor","ArrayBuffer","isView","postAttempt","step","postMessage","type","concat","postSuccess","info","transferable","resp","postError","fatal","reason","toString","splitMetricsByBlock","metrics","blockLevels","blockIds","output","blocks","slice","b","current","_i2","_Object$entries2","_Object$entries2$_i","key","val","filter","i","splitThresholdsByBlock","thresholds","_i3","_Object$entries3","_Object$entries3$_i","fetchStepSummary","_fetchStepSummary","_output","ngenes","_iterator3","_step3","a","gene_info","_i4","_Object$entries4","_Object$entries4$_i","k","_iterator4","_step4","c","col","cell_info","_iterator5","_step5","_c","_col","ksumm","_output2","bids","listed","_metrics","_bids","_listed","_i5","_Object$entries5","_Object$entries5$_i","_metrics2","_output3","_bids2","_listed2","remaining","discard_vec","discardBuff","_output4","_output5","pcs","var_exp","total_var","clusters","collections","sets","changed","fetchCountMatrix","available","numberOfRows","fetchFeatureAnnotations","columnNames","column","fetchCellAnnotations","bakana","name","truncated","Set","size","num_cells","numberOfColumns","num_genes","genes","annotations","sums","fetchMetrics","detected","proportion","subsetProportions","fetchBlockLevels","data","default","fetchBlock","fetchFilters","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","subsetTotals","thresholdsSubsetTotals","NaN","maxProportions","thresholdsMaxCount","fetchDiscards","inputs","retained","discard","means","fetchResults","vars","variances","fitted","resids","residuals","fetchPCs","varianceExplained","totalVariance","fetchClusters","feature_set_enrichment","fetchCollectionDetails","fetchSetDetails","names","descriptions","sizes","gesel","_ref","file","start","end","full","Response","_ref2","remotes","code","default_cluster","default_selection","superstate","preflights","preflights_summary","cache_matrix","cache_anno_markers","createDataset","args","format","h5","options","mtx","rds","Error","summarizeDataset","summary","cells_summary","cells","tmp_meta","columns","numberOfCells","tmod_summary","numberOfFeatures","modality_features","all_assay_names","modality_assay_names","postStepSummary","_postStepSummary","_callee16","_context16","t0","console","error","getMarkerStandAloneForAnnot","annotation","annotation_vec","mds","getMatrix","ids","computeAll","y","iter","iteration","kana_db","loaded","getAnnotation","vec","unfiltered","startsWith","split_metric","replace","split","toLowerCase","cell_filtering","applyFilter","scran","RNA","ADT","CRISPR","valid","add","fetchNormalizedMatrix","onmessage","msg","_msg$data","nthreads","Math","round","navigator","hardwareConcurrency","back_init","numberOfThreads","state_init","kana_init","indexedDB","open","onupgradeneeded","kanaDBClient","target","deleteObjectStore","createObjectStore","keyPath","catch","down_init","reject","DownloadsDBClient","ehub_ids","all","uid","setOptions","clear","formatted","safeReplace","par","batch","subset","batch_correction","neighbor_index","combine_embeddings","weights","rna_weight","adt_weight","crispr_weight","translate","startFun","finishFun","fs","keys","reader","zipbuffer","unzipped","config","buffers","other","transferrable","features","loaded_ds","_i6","_Object$entries6","_Object$entries6$_i","_i7","_arr","i_mod","_i8","_Object$entries7","_Object$entries7$_i","_k7","_v3","FileReaderSync","readAsArrayBuffer","JSZip","JSON","async","t1","parse","call","t2","t3","custom_selections","fetchSelections","parameters","fetchDatasets","previewPrimaryIds","cache","_ref3","jsonbuffer","dec","TextDecoder","decode","_ref4","saver","collected","zipper","stringify","generateAsync","_ref5","forceBuffer","_ref6","enc","recs","_ref7","md5","hashwasm","_x12","_x13","TextEncoder","encode","_ref8","_x14","_ref9","_callee9","counter","_i9","_Object$entries8","_Object$entries8$_i","ds","_i10","_arr2","_i11","_Object$entries9","_Object$entries9$_i","_k8","_v4","_context9","_x15","_ref10","_callee10","_i12","_Object$entries10","_Object$entries10$_i","tmp_dataset","_context10","details","_x16","raw_res","rank_type","modality","marker_detection","computeVersus","left","right","results","levels","indexOf","cluster","row_idx","gene","matrix","row","expr","addSelection","selection","removeSelection","_ref11","_callee11","_context11","tsne","animate","_x17","_ref12","_callee12","_context12","umap","_x18","annot","values","uniq_vals","uniq_map","indices","Int32Array","map","index","extracted","_ref13","_callee13","sel_indices","arr_sel_indices","anno_markers","_annotation_vec","_mds","_anno_markers","_context13","computeEnrichment","fetchSelectionIndices","fetchFilteredMatrix","set","_x19","_ref14","_callee14","_raw_res","_context14","_x20","computePerCellScores","marker_resp","fetchFeatureSetIndices","ordering","includes","filtered_marker_resp","_i13","_Object$entries11","_Object$entries11$_i","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","getter","__esModule","d","definition","o","defineProperty","enumerable","chunkId","reduce","u","miniCssF","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","p","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}